#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
sitePort=65432
apiPort=65431
apiUrl="http://127.0.0.1:$apiPort"
scriptDir="${0%/*}"
dataDir="$scriptDir/data"
cd "$scriptDir"

logEntry() {
  local level message
  level="${1^^}"

  if [[ -z "${DEBUG:-}" ]] && [[ "$level" == "DEBUG" ]]; then
    return
  fi

  shift
  message=("$@")

  echo "$level" "${message[@]}" >&2

}

start-server() {
  local i
  rm -rf "$dataDir"
  mkdir "$dataDir"
  cp test-data.json "$dataDir/data.json"

  go run ../ -b "$dataDir/" --default-static --api-port "$apiPort" --port "$sitePort" &> "$dataDir/go-process.log" &
  serverPgid="$(ps o pgid= $!)"
  serverPgid="${serverPgid// /}"
  logEntry "DEBUG" "Server started with pgid '$serverPgid'"

  # shellcheck disable=SC2064
  trap "{ kill -INT -- -$serverPgid; }" EXIT

  i=0
  while ! nc -z 127.0.0.1 $apiPort; do
    ((i++))

    if [[ $i -gt 3 ]]; then

      logEntry "WARN" "Server not responding after 3 seconds."
      return 1
    fi

    sleep 1
  done

  if [[ -n "${VISUAL:-}" ]]; then
    mkdir -p "$dataDir/chrome"
    touch "$dataDir/chrome/First Run"
    google-chrome-stable --user-data-dir="$dataDir/chrome" --new-window "http://127.0.0.1:$sitePort" &> /dev/null &
    chromePgid="$(ps o pgid= $!)"
    chromePgid="${chromePgid// /}"

    # shellcheck disable=SC2064
    trap "{ kill -INT -- -$chromePgid; }" EXIT
  fi
}


test-createBox() {
  local expectedResponse response
  expectedResponse='{"id":"testingCreateBox","name":"Test create box","size":"dmedium","status":"grey","expireAfter":"","maxTBU":"","lastUpdate":"","lastMessage":"created test box"}'

  response="$(curl -sS -X POST "$apiUrl/api/v1/new" -H "Content-Type: application/json" -d '
    {
      "id": "testingCreateBox",
      "name": "Test create box",
      "size": "dmedium",
      "status": "grey",
      "lastMessage": "created test box"
    }')"

  if [[ "$(jq -Mc '.lastUpdate=""' <<<"$response")" != "$expectedResponse" ]]; then
    return 1
  fi

  response="$(curl -sS -X GET "$apiUrl/api/v1/testingCreateBox" | jq -Mc '.lastUpdate=""' )"

  if [[ "$response" != "$expectedResponse" ]]; then

    return 1
  fi
}


test-deleteBox() {
  local expectedResponse response
  expectedResponse='"deleted testingDeleteBox"'
  response="$(curl -sS -X DELETE "$apiUrl/api/v1/testingDeleteBox")"

  if [[ "$response" != "$expectedResponse" ]]; then
    return 1
  fi

  expectedResponse='{"error":"id not found"}'
  response="$(curl -sS -X GET "$apiUrl/api/v1/testingDeleteBox")"

  if [[ "$response" != "$expectedResponse" ]]; then

    return 1
  fi
}



start-server || (echo "Failed to start server" && exit 128)

failedTests=0

if [[ -n "${VISUAL:-}" ]]; then
    echo "Press a key to start create box test"
    read -r
fi

if test-createBox; then
    logEntry "INFO" "Create Box: PASS"
else
    logEntry "INFO" "Create Box: FAIL"
    ((failedTests++))
fi

if [[ -n "${VISUAL:-}" ]]; then
    echo "Press a key to start delete box test"
    read -r
fi

if test-deleteBox; then
    logEntry "INFO" "Delete Box: PASS"
else
    logEntry "INFO" "Delete Box: FAIL"
    ((failedTests++))
fi

if [[ -n "${VISUAL:-}" ]]; then
    echo "Press a key to finish visual inspection"
    read -r
fi

exit $failedTests
