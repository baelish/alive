// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\xe5\x8b\xa9\x5a\x51\xec\x6c\x7b\xb1\xa1\x16\x75\x93\xa1\x03\x92\x74\x48\x32\x0c\x83\xe1\x07\x5a\x3c\xcb\x5c\x69\xd2\x20\x29\xff\x4a\xfd\xbf\x0f\x24\x65\xc5\x0a\x9a\xa1\x4f\x32\x79\xdf\x7d\x1f\xef\x3b\xf2\xbc\x61\x06\x9c\x58\xa1\xae\x9d\x85\x02\xa6\xb3\x24\xf1\x5b\x56\xd7\xa6\x44\x28\x40\xe1\x16\x6e\x36\xa8\xdc\x63\xd8\xa1\xe4\x12\xfd\xca\x5e\x92\x74\x9c\x44\x54\xae\xd5\x0a\xad\x65\x95\xc7\x2f\x6a\x55\x3a\xa1\x15\x0d\xb0\x14\x9e\x13\x00\x00\x4f\x19\x36\xae\xd1\x31\x21\xbd\x52\x58\xe6\x9c\x39\x96\xdb\xb5\x14\x8e\xf6\xb2\x5e\x1a\xc0\x76\x2b\x5c\xb9\xa4\xe7\xf8\xe9\x60\x76\xa2\x02\x28\x99\x45\x20\xf5\x9a\x33\x87\x13\xbd\x23\xa3\x66\x3f\xca\x38\x66\x2a\x74\x13\xbd\x83\x02\xb8\x2e\xeb\x95\x97\xa9\xd0\xdd\x48\xf4\x3f\x27\xfb\x3f\x78\x97\x7a\x38\x4b\xc7\x2d\x43\xb9\x64\xaa\xc2\x4f\x12\x8d\xbb\xc5\x0d\x4a\xda\xd2\x65\x9d\x02\xa6\x57\xb3\x57\x1b\xbf\x9c\xd3\xcc\x0d\xb2\x6f\xe3\xce\x79\x0d\x4a\xcd\xf8\x9f\xac\xc2\xb3\x03\x4b\x5d\x32\xef\x56\x1e\xa3\x34\x1a\x70\x4c\x8e\xe3\x24\x49\x4e\x56\xc2\x5c\xef\x3e\x4b\x51\x7e\xa3\x82\x7b\x17\x8e\xe7\xb1\xd5\xfe\x49\xac\x90\xb6\x4e\x8b\x05\x50\x70\xf0\xae\x00\x55\x4b\x09\x2f\xae\x01\x98\xa6\x9d\xd7\xcc\xf9\x84\x28\x05\x28\x2d\xbe\x05\x3a\x1d\x27\x04\xd0\xd5\x46\x81\xf1\x5e\xfe\x5e\x4b\xf9\x0f\x32\x43\x53\xe8\x03\xb9\x20\xd0\x87\x35\xe3\x34\xc4\xee\xb4\x72\xcb\x10\x18\x66\x57\x6d\xbc\xe5\x6f\x71\xd7\x6c\x4f\xd3\x06\xf1\xd4\x61\xf8\xa2\x6b\x63\xdb\xd8\xc8\xc7\x22\xb3\x50\xb5\x43\xeb\xb9\x5b\xba\x18\x6e\x53\x1f\xb1\xd4\x8a\xc7\xe4\xae\x4f\x1e\xa2\x32\xd8\x0a\xee\x96\x19\x1c\xa2\x2f\x07\x28\xe0\x00\xdf\xbf\x43\x6f\xd0\xf3\xdd\x52\xbe\x78\xe8\x43\x2f\xac\x9a\x8a\x55\x2e\x51\x55\x6e\x09\x1f\x8a\x98\x0e\x1f\x41\xc1\x28\xb8\xf4\xc9\x18\xb6\xa7\x71\xf7\xe2\x05\xd9\x87\x61\x9a\xff\xab\x85\xa2\x07\x5f\x83\x1a\x77\xcf\xf2\xc6\x25\xcb\x40\xfa\x55\x06\xcd\x6b\xea\xb4\x74\x4a\xd8\x6a\x8e\x86\x64\xa4\x32\x88\x2a\x7e\xf7\x24\x23\x06\x39\x99\xe5\x42\x71\xdc\x7d\x5d\xd0\xc0\x90\x42\x51\xc0\xc5\x30\x85\xe7\xc8\x08\x05\x44\x74\xd3\xca\x28\x97\x97\x92\x59\x7b\x2b\xac\xcb\x0d\xae\xf4\x06\xe9\x49\x02\x4e\x1a\x4d\x5a\x06\x41\x25\xfd\x71\x32\xe3\xbc\x91\x3d\x8f\xbf\xbc\x38\x3b\xd9\x7f\xf6\xe0\x7b\xb6\x42\x4a\x9a\xda\x48\x3a\x1d\xf8\x53\x2b\x34\x5f\x9e\xee\x6e\xa1\x38\x15\xfd\x33\x1c\x92\x59\xf7\x57\x78\xfe\xfc\x07\x3c\xf1\x41\xbc\x6a\xbf\x11\xd5\xd2\x3d\x8a\x03\x4e\x44\x35\xd1\x3b\x7a\x3e\x98\xd8\x86\x09\xc9\xe6\x12\xff\x0e\x7d\x2c\xe0\x8e\xb9\x65\xbe\x90\x5a\x1b\xba\x15\x8a\xeb\x6d\x14\x88\xe1\x4b\xf8\x6d\x78\x95\xc2\x7b\xff\x09\x14\xa1\xfb\x71\xde\xd0\x57\x54\x1f\x0a\x18\x0e\xae\x7e\x4d\xe1\xe3\x2b\x91\x91\xdf\x0e\xd9\x6f\x8d\xa8\xde\x5c\x54\x17\x73\xbd\xeb\xa5\xb9\x75\x7b\x89\xf9\xb6\x39\x5c\x2b\xd7\x07\xb2\xde\x91\x6e\x99\xcc\xdf\xa9\x7b\x1d\xcd\xa1\x82\x67\x61\xb6\xbf\x5c\x24\xea\xf6\x6b\xd4\x8b\x76\xe2\x4f\x05\x9f\xc1\xbb\xa2\x00\x52\x2b\x8e\x0b\xa1\xbc\xa3\xf0\x0c\xa5\x44\x66\x9e\x22\x88\x9e\x83\xd3\xe3\x38\xe9\x4e\xda\xff\x19\xb3\x82\x37\x57\xe2\x5c\xad\x00\x8b\xee\x44\xdd\xfe\x5b\xa4\xcf\x6f\x3e\x8a\x70\xf7\x32\x20\x37\x0f\x0f\x5f\x1f\x46\x70\xaf\x21\x8e\x7e\x0b\x0b\x6d\xc0\x3f\x7f\xcf\xef\xed\xb0\x39\x49\x8f\xb1\x64\x78\x0f\xc3\xc1\x60\xe0\x6f\xc1\x7f\x01\x00\x00\xff\xff\x65\x24\x96\x7e\xe2\x06\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 1762, mode: os.FileMode(420), modTime: time.Unix(1553951328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\x4b\x6e\xdb\x30\x10\x06\xe0\xbd\x4f\x41\xa0\xe8\x52\x86\x1e\xb1\xdb\xd0\xbb\x9e\xa1\x39\xc0\x88\x1c\x4b\x83\xf0\x61\x90\x63\x47\x69\xd1\xbb\x17\xb1\x68\x49\xae\xfc\x2a\x90\xa5\xc8\x7f\x3e\x11\x9c\x01\x35\x1d\x96\x4d\x40\x74\xe2\xf7\x42\x08\x21\x6a\x50\xaf\x4d\xf0\x7b\xa7\x33\xe5\x8d\x0f\xf2\x4b\x55\x29\x55\x55\x9b\xc5\x9f\xc5\xe2\x23\x1c\x50\x5f\x8d\x2a\x95\xe7\x79\x3e\x44\xc1\xd6\x18\xae\x86\xb7\xdb\xef\xd3\x70\x13\xf0\xfd\x6a\x16\x8a\x67\x7c\x56\x43\xb6\x33\x10\x1a\x4c\xe9\x37\xd2\xdc\xca\x55\x91\xef\xba\xcd\x71\xa1\x45\x6a\x5a\x9e\xae\x6c\xbd\xe3\x2c\xd2\x2f\x94\x25\xda\x41\xd1\x8f\x28\xe5\xea\x69\xae\x14\xcb\xd5\xc4\x99\x33\x93\xa2\xc7\x19\x6d\x51\xd3\xde\xde\x81\x8a\x72\x7d\x09\x2a\xca\x29\x75\x41\x9a\xd4\xfd\x8f\xa4\xa3\x05\x63\xee\x48\xeb\x72\x0e\xe5\xcb\x6f\x53\x67\xce\x8c\x45\x8f\x2b\xda\x92\x0a\xfe\x36\x53\x5d\xe8\x7a\x7e\x76\xd1\x73\xa4\xfa\xb7\xeb\xf7\x91\xda\x77\x89\xe8\x47\x54\xbc\xb5\xc4\x98\x6a\x8c\x07\x96\x06\xb7\xdc\x7f\x5b\x08\x0d\xb9\xac\xf6\xcc\xde\xca\xe1\xc0\x69\x39\xf4\x03\x72\x5a\xdd\xf9\x48\x4c\xde\x49\x11\xd0\x00\xd3\x21\xa1\x8c\x1d\x67\x60\xa8\x71\x52\x28\x74\x8c\x61\x3c\x0b\x35\xd9\x78\x9e\x9e\x95\x02\xf6\xec\x8f\x91\xdd\x92\x89\x0d\x9e\x6d\x67\xb5\xf1\xea\x35\x8b\x0c\x81\xa5\x58\x7d\xdd\xcc\xf7\xd0\xe9\x33\xc4\x62\x8c\x30\x0c\xfa\x78\x2f\xeb\xfc\x52\x75\x92\xd3\xa5\xdd\xc7\xa1\xfb\xf9\xe3\x65\x66\x3f\xdd\xb2\xfb\xf2\x5b\xf4\xc7\xde\x81\x22\xd5\x64\x88\xdf\xa5\x68\x49\x6b\x74\xe9\x97\x06\x22\xbf\xec\x34\xf0\xf0\xa0\x7d\xea\x7f\xc7\x3e\x42\x1d\xbd\xd9\x9f\x86\x23\x4d\x81\x28\xfa\xcf\xbe\xfb\xe2\xf8\xbe\xfe\x0d\x00\x00\xff\xff\x96\xeb\xbe\x5b\x8c\x05\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1420, mode: os.FileMode(420), modTime: time.Unix(1553942178, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
