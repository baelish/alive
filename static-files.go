// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x73\x1a\x37\x10\x7e\xe7\x57\x6c\xf4\x82\x2e\x1c\x67\x70\x9a\x17\x7b\x2e\x99\xe0\xb8\x93\x76\x6c\xa7\x63\xbb\xd3\xe9\x30\x3c\x88\xd3\x72\xa8\x11\x12\x23\xe9\x0c\xd8\xe1\xbf\x77\x24\x1d\x07\xc7\x98\x34\x0f\x7d\x02\x69\xbf\xfd\xbe\xbd\x6f\x57\xd2\x13\x33\xe0\xc4\x02\x75\xe5\x2c\xe4\x30\x9e\x74\xfc\x0e\xae\x97\xc2\x6c\xe2\x3a\x6c\x58\x5d\x99\x02\x21\x07\x85\x2b\xb8\x7e\x42\xe5\x1e\xc2\x0e\x25\x67\xe8\x57\xf6\x8c\x24\x97\x9d\x88\xca\xb4\x5a\xa0\xb5\xac\xf4\xf8\x59\xa5\x0a\x27\xb4\xa2\x01\x96\xc0\x4b\x07\x00\x20\x68\xf8\x8d\xcf\xe8\x98\x90\x5e\x39\x2c\x33\xce\x1c\xcb\xec\x52\x0a\x47\xbb\x69\x37\x09\x60\xbb\x12\xae\x98\xd3\x43\xfc\x78\x30\xd9\x51\x01\x14\xcc\x22\x90\x6a\xc9\x99\xc3\x91\x5e\x93\x8b\x7a\x3f\xca\x38\x66\x4a\x74\x23\xbd\x86\x1c\xb8\x2e\xaa\x85\x97\x29\xd1\x5d\x4b\xf4\x7f\x47\x9b\xdf\x78\x9b\x7a\x38\x49\x2e\x1b\x86\x62\xce\x54\x89\x9f\x24\x1a\x77\x83\x4f\x28\x69\x43\x97\xb6\x3e\x60\x7c\x3e\x39\xda\xf8\xe5\x90\x86\x79\x82\x3b\xfd\x67\xa8\xf1\x58\xee\x28\xf1\xdd\x24\x69\xf2\x42\x1f\xf0\x77\x3d\xfd\x8f\x9c\xf7\x93\xa4\xd3\x24\x4d\x0d\xb2\x6f\x97\x9d\x96\x3b\x06\xa5\x66\xfc\x0f\x56\xe2\x81\x3d\x52\x17\xcc\xf7\x26\x8b\x51\x1a\x75\xb7\x9d\xed\x65\xa7\xd3\xd9\x35\x0e\xa6\x7a\x7d\x25\x45\xf1\x8d\x0a\xee\x3d\xdf\x1e\xc6\x16\x9b\x47\xb1\x40\xda\xf4\x55\xcc\x80\x82\x83\x37\x39\xa8\x4a\x4a\xd8\xf7\x08\xc0\xd4\xc3\xf3\xd9\x3b\xe0\x6a\x29\x40\x69\xf1\x14\x68\x57\x4e\x08\xa0\xab\x8c\x02\xe3\x3b\xf7\x6b\x25\xe5\xdf\xc8\x0c\x4d\xa0\x07\xa4\x4f\xa0\x07\x4b\xc6\x69\x88\xdd\x6a\xe5\xe6\x21\x30\x4c\xcf\x9b\x78\xc3\xdf\xe0\xa2\x40\x0d\x79\x6c\x51\x7c\xd1\x95\xb1\x4d\xec\xe2\xd5\xf4\x5b\xa1\x2a\x87\x6d\xd4\x3e\xfa\x80\x85\x56\x3c\x46\xdb\x7e\x79\x88\x4a\x61\x25\xb8\x9b\xa7\xf0\x1c\xfd\x79\x86\x1c\x9e\xe1\xfb\x77\xe8\x0e\xba\x7e\x64\x94\x37\x01\x7a\xd0\x0d\xab\xfa\xcb\x55\x26\x51\x95\x6e\x0e\x1f\xf2\x98\x0e\x1f\x41\xc1\x45\x70\xeb\x93\x31\x6c\x43\xe3\x6e\x7f\x8f\xec\xc1\x30\xc9\xfe\xd1\x42\xd1\x67\x5f\xa4\xba\x6c\xd7\x72\x62\xb4\x53\x90\x7e\x95\x42\x7d\x86\x5b\xad\x1d\x13\xb6\x98\xa2\x21\x29\x29\x0d\xa2\x8a\xbf\x1b\x92\x12\x83\x9c\x4c\x32\xa1\x38\xae\xbf\xce\x68\x60\x48\x20\xcf\xa1\x3f\x4c\xe0\x25\x32\x42\x0e\x11\x5d\xb7\x34\xca\x65\x85\x64\xd6\xde\x08\xeb\x32\x83\x0b\xfd\x84\x74\x27\x01\x3b\x8d\x3a\x2d\x85\xa0\x92\xbc\x9e\xcc\x38\xaf\x65\x0f\xe3\xfb\x73\x6e\x47\x9b\x2b\x0f\xbe\x63\x0b\xa4\xa4\xfe\x36\x92\x8c\x07\xbe\x6a\x85\xe6\xcb\xe3\xed\x0d\xe4\xbb\x8f\xfe\x19\x0e\xc9\xac\x8b\x07\x9a\xbf\xc2\x13\x0f\xc6\x51\xfb\x8d\x28\xe7\xee\x41\x3c\xe3\x48\x94\x23\xbd\xa6\x87\xd7\x21\x7b\x62\x42\xb2\xa9\xc4\xbf\x42\x1f\x73\xb8\x65\x6e\x9e\xcd\xa4\xd6\x86\xd2\x95\x50\x5c\xaf\xa2\x42\x8c\xf7\xdf\x0d\x12\x38\x83\xf7\xc3\xf3\x04\xde\xfa\x9f\x40\x14\x66\x20\xde\x75\xf4\x88\xf0\x43\x1e\xc1\x1f\x8f\x94\x2e\x76\xb9\xa7\x2e\xc7\xee\x54\x94\xfd\xa9\x5e\x77\x93\xcc\xba\x8d\xc4\x6c\x55\x17\xd8\x88\xf5\x80\x2c\xd7\xe4\xc7\x24\xd6\x31\x57\xd9\xfe\x94\x99\x63\x1e\xba\x27\xea\x9f\x43\xb2\x63\x6b\x19\xd7\xbe\x3f\x05\x4f\xc3\x9b\xb5\x1f\x4d\xea\x36\x4b\xd4\xb3\xe6\x25\x1b\x0b\x3e\x81\x37\x79\x0e\xa4\x52\x1c\x67\x42\xf9\x1e\xc1\x0b\x14\x12\x99\x79\x8c\x20\x7a\x08\x4e\xea\xa1\xf4\x54\x62\x81\x7e\x74\x07\x3e\xa1\x3e\x7d\xdb\x4e\xfb\x39\xf9\xc1\x5b\x22\x78\x3d\x81\x87\xa5\xe4\x60\xd1\xed\x74\x9b\x27\x31\x79\x39\x79\x06\xc3\xa8\xa7\x40\xae\xef\xef\xbf\xde\x5f\xc0\x9d\x86\xf8\xbe\x59\x98\x69\x03\xfe\xb6\x09\x65\xf6\x80\xd8\x8c\x24\xdb\xe8\x07\xbc\x85\xe1\x60\x30\x08\x43\xd7\x58\xb7\x7f\x42\x4e\xdb\x16\x9f\xfb\x9f\x32\x6d\x0f\xfd\xff\x2d\x3b\x28\xe3\x94\x61\xf5\x99\x5c\x32\x83\xca\xdd\x69\x8e\xf5\xad\x71\x35\x17\x92\xd7\xee\xbd\x62\xc7\xbf\x01\x00\x00\xff\xff\x45\xe3\xc3\x3c\xe6\x08\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 2278, mode: os.FileMode(420), modTime: time.Unix(1560463850, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x72\x9b\x30\x10\xc6\xef\x7e\x0a\x4d\x32\xbd\x05\x0f\x98\xd8\x69\xe4\x5b\xa7\x6f\xd0\xa6\xf7\x05\x2d\x78\x1b\x21\x79\xa4\xc5\xb1\x9b\xc9\xbb\x77\x6c\x64\xc0\x05\xff\xe9\x4c\x8e\x2c\xdf\xf7\xfb\x96\xdd\x65\x2d\xde\x0b\x6b\x38\x2a\xa0\x22\xbd\x93\xe2\xee\x3b\xfe\x86\x4d\x2d\x7e\x80\xf1\x77\x0f\xe2\x17\x3a\x05\x06\x1e\x84\x07\xe3\x23\x8f\x8e\x8a\xe5\xc7\x64\xa2\x68\x33\x2d\x1d\xa2\x11\xef\x13\x21\x84\xc8\x20\x7f\x2d\x9d\xad\x8d\x8a\x72\xab\xad\x93\xf7\x69\x9a\xe7\x69\xba\x9c\x04\xb1\x43\x75\x56\x9a\xe7\x71\x1c\xc7\xad\x14\xaa\x0c\xdd\x59\x71\x51\x7c\xed\x8b\x4b\x87\xbb\xb3\x5a\x48\x9e\xf1\x39\x6f\xb5\x5b\x0d\xae\xc4\xa0\x7e\x23\xc5\x2b\x39\x4f\xe2\xf5\x76\x79\x28\xac\x90\xca\x15\xf7\x2b\x87\xb9\x78\xfa\x83\x72\x86\x55\x4b\x51\xb7\x50\x66\xf3\xc7\x21\x25\x99\xce\x7b\x9c\x21\xa6\x67\xba\x1d\xa3\x2a\x54\x54\x57\x57\x40\xc9\x6c\x31\x06\x4a\x66\x7d\xd4\x08\xa9\xe7\xfb\x1f\x92\xf2\x15\x68\x7d\x85\xb4\x98\x0d\x41\xf1\xf4\xa9\xcf\x19\x62\x3a\xd3\xed\x14\x55\x51\xee\xec\x65\x4c\x3a\xb2\xf5\xf8\x64\xd0\x43\x48\xfa\xef\xd6\xaf\x43\x3c\x03\xd7\x3e\x50\x82\x4b\x8c\xd9\x92\xce\x74\xdf\x98\xa2\x0c\x9c\x58\x4f\x99\x58\x1f\xcf\xa6\x93\x8b\x24\x8e\xbf\x34\x8c\xb5\xf5\xc4\x64\x8d\x14\x90\x79\xab\x6b\xc6\xa6\xae\xb1\xd8\x67\x35\x0f\x99\x65\xb6\x95\x14\xc9\x78\x88\x06\xcf\x2f\x6b\x05\xdc\xfe\xb5\xbd\xa8\xa7\xf9\x95\x24\x17\x3e\xeb\x4c\xd4\x34\xb3\xdb\x40\x6d\xfe\x53\xf1\xb6\xa2\xa3\xb7\xd0\x16\x58\xee\x7b\x6d\x9e\x2b\x70\x25\x99\x28\x40\xda\xad\x85\x72\x93\xd4\x56\xbb\x86\x1c\x6a\x60\xda\x04\x28\xe3\x96\x23\xd0\x54\x1a\x29\x72\x34\x8c\xae\xeb\x85\xca\xa8\xeb\xa7\xc1\x4a\x01\x35\xdb\x83\xe4\x74\xde\xc7\x66\xb4\xcd\x5f\x23\xcf\xe0\x58\x8a\xe3\x30\x4e\xde\xa1\x51\x27\x90\x0a\xbd\x87\x72\xb8\xb6\x45\x3c\xe6\x0e\xe4\x70\x39\xd7\xe1\xb0\xfd\xf9\xed\x65\xc0\x7e\xbc\xc4\x6e\xec\x97\xd0\xfb\x77\x1b\xf2\x94\x91\x26\xde\x49\xb1\x22\xa5\xd0\x84\xc8\x4b\xf7\xf1\x09\xb9\xe7\x0e\xab\x77\x4a\xa7\x77\xf6\x31\xf9\x1b\x00\x00\xff\xff\x64\x2f\xe5\xf4\xc7\x06\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1555877026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
