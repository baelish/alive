// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\x23\x37\x0c\xbe\xfb\x29\xb8\xba\x44\x5a\xdb\x13\x27\x45\x2f\x09\x66\x17\x71\x9a\x62\xbb\xc8\x4f\x91\x64\x51\x14\x41\x0e\xf2\x88\x1e\xab\xab\x91\x0c\x49\x13\xdb\xc9\xe6\xdd\x0b\x8d\xe6\xc7\x93\x8d\xd3\x1c\x7a\x1a\x8b\xfc\xf8\x91\x22\x29\xd2\x0f\xdc\x82\x97\x05\x9a\xd2\x3b\x48\xe1\xee\x7e\x10\x24\xb8\x5e\x4a\xbb\x89\xe7\x4a\xe0\x4c\x69\x33\x84\x14\x34\xae\xe0\xec\x01\xb5\xbf\xa9\x24\x94\xec\x63\x38\xb9\x7d\xc2\x8e\x07\x11\x95\x18\x5d\xa0\x73\x3c\x0f\xf8\x79\xa9\x33\x2f\x8d\xa6\x15\x8c\xc1\xd3\x00\x00\xa0\xf2\x11\x04\x90\xc2\xd7\x9b\xab\xcb\x64\xc9\xad\xc3\x88\x49\x04\xf7\x9c\x55\x30\xb7\x92\x3e\x5b\xd4\x62\xbf\x59\x62\x63\x0f\x90\x71\x87\x40\xca\xa5\xe0\x1e\xa7\x66\x4d\x8e\x6a\x79\xe4\xf6\xdc\xe6\xe8\xa7\x66\x0d\x29\x08\x93\x95\x45\x20\xc8\xd1\x9f\x29\x0c\x3f\xa7\x9b\x3f\x44\xcd\x2a\x05\x3b\x6e\x4d\xb3\x05\xd7\x39\x9e\x28\xb4\xfe\x1c\x1f\x50\xd1\x96\x67\x14\xc3\x4d\x32\xa3\x8c\x6d\x0e\x8a\x3b\x7f\x11\x6f\xba\x45\xc2\x83\xf9\xa5\xf9\x56\x85\xd6\x7a\x69\x6c\x0a\xbe\xbe\x9d\x7e\x63\x2d\xba\xca\x34\x7e\x35\xb3\x9f\x90\x51\x73\x32\xf7\x68\xd9\xa0\xc5\xcf\x2c\xf2\xef\xc7\x83\x5e\x16\x04\x2a\x7c\x99\x85\x56\xd6\xdd\xf3\x6d\x12\x8b\xca\x70\xf1\x27\xcf\x71\x8b\x45\x99\x8c\x87\xea\x25\x51\x4b\x63\xdc\xcf\x83\xe7\xe3\xc1\x60\xd0\x94\x16\x66\x66\x7d\xaa\x64\xf6\x9d\x4a\x11\x0a\xf4\xbc\xa5\xea\xc2\x88\xba\xed\xf2\xbc\x51\x9b\x10\x2d\xd4\xb0\xd0\x1b\xa8\xfd\xa5\x11\x98\x58\x2c\xcc\x03\x9e\x2e\xa4\x12\x75\x6d\x58\xcf\x5d\xb1\xb9\x95\x05\xd2\xb6\xcf\xe4\x1c\x28\x78\xf8\x90\x82\x2e\x95\x82\xae\x7d\x00\x6c\xdd\xcc\xbf\x85\x2a\xf9\xfa\x62\x80\xca\xe1\x2e\x50\x73\xf9\x4a\x81\xbe\xb4\x1a\x6c\x08\xfc\xf7\x52\xa9\xbf\x91\x5b\xca\x60\x08\x64\x4c\x60\x08\x4b\x2e\x68\xa5\xbb\x30\xda\x2f\x2a\xc5\xc1\xe8\xb0\xd5\xb7\xfc\x2d\x2e\x3a\xa8\x21\xb7\x3d\x8a\x2f\xa6\xb4\xae\xd5\x1d\xbd\x6a\x7e\x21\x75\xe9\xb1\x8f\xea\xb4\x37\x98\x19\x2d\xa2\x36\xa4\xab\xcb\x57\x80\xe8\x11\xac\xa4\xf0\x8b\x11\x3c\xc6\xfc\x3c\x42\x0a\x8f\xf0\xe3\x07\xec\x4d\xf6\x42\x5b\xeb\x90\x04\x18\xc2\x5e\x75\xaa\x6f\xae\x13\x85\x3a\xf7\x0b\xf8\x94\x46\x73\xf8\x0c\x1a\x8e\xaa\x6c\x9d\x58\xcb\x37\x34\x4a\xc7\x1d\x72\x08\x07\x2c\xf9\xc7\x48\x4d\x1f\x43\x90\xfa\xb8\x1f\xcb\x8e\xc7\x37\x02\x15\x4e\x23\xa8\x67\x4a\xaf\xb4\x77\x84\x17\x33\xb4\x64\x44\x72\x8b\xa8\xe3\x77\x43\x46\xc4\xa2\x20\xf7\x89\xd4\x02\xd7\x57\x73\x5a\x31\x30\x48\x53\x18\x1f\x30\x78\x8a\x8c\x90\x42\x44\xd7\x25\xad\xbb\x2d\x53\xdc\xb9\x73\xe9\x7c\xdd\x6c\xb4\x71\x01\x8d\x8f\xda\x6c\x04\x95\x17\xf6\xba\x31\x17\xa2\x76\xbb\xad\xef\xda\xdc\x4d\x37\xa7\x01\x7c\xc9\x0b\xa4\xa4\xbe\x1b\x61\x77\x93\x10\xb5\x46\xfb\xe5\xf6\xe2\x1c\xd2\xe6\xd2\xef\xe1\x08\xd3\x28\x0e\x1d\xf1\x0a\x4f\x7c\x18\x2f\xca\x6f\x65\xbe\xf0\x37\xf2\x11\xa7\x32\x0f\x6f\x74\x7b\x3c\xf3\x07\x2e\x15\x9f\x29\xfc\xab\xaa\x63\x0a\x17\xdc\x2f\x92\xb9\x32\xc6\x52\xba\x92\x5a\x98\x55\xf4\x10\xf5\xe3\x5f\x26\x0c\xf6\xe1\xd7\x83\x43\x06\x1f\xc3\xa7\x22\xaa\x7a\x20\x8e\x61\xfa\x82\xf0\x53\x1a\xc1\x9f\x5f\x78\x3a\x6a\x6c\x77\xcd\x86\xbd\x99\xcc\xc7\x33\xb3\xde\x63\x89\xf3\x1b\x85\xc9\xaa\x0e\xb0\x75\x36\x04\xb2\x5c\x93\xb7\x49\x9c\xe7\xbe\x74\xe3\x19\xb7\x2f\x79\x68\x47\x34\x3e\x04\xd6\xb0\xf5\x12\xd7\x9f\xf1\x61\x66\x87\x1d\xda\xb5\x26\x0d\xcb\xca\xcc\xdb\xcd\x7a\x27\xc5\x3d\x7c\x48\x53\x20\xa5\x16\x38\x97\x3a\xd4\x08\x9e\x20\x53\xc8\xed\x6d\x04\xd1\x6d\x30\xab\x9b\x32\x50\xc9\x02\x43\xeb\x4e\x82\x41\xfd\xfa\x9e\x07\xfd\x4d\xf7\x9f\xa3\x14\xfa\xa1\xa4\xe0\xd0\x37\x7e\xdb\x15\xcd\x9e\x76\xbe\xc1\xaa\xd5\x47\x40\xce\xae\xaf\xaf\xae\x8f\xe0\xd2\x40\x5c\xbd\x0e\xe6\xc6\x42\x98\x36\x55\x98\x43\x20\x2e\x21\xec\x39\xe6\x03\x3e\xc2\xc1\x64\x32\xe9\x8f\xe8\x6e\xe1\xed\x4e\x5b\xfc\xfb\xf1\xae\xa4\x75\xd0\xff\x3f\x65\x5b\x61\xec\x4a\xd8\xbb\x56\xd4\xcf\xe9\xf8\x37\x00\x00\xff\xff\x18\xa3\x09\x17\x76\x09\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 2422, mode: os.FileMode(420), modTime: time.Unix(1563108125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x72\x9b\x30\x10\xc6\xef\x7e\x0a\x4d\x32\xbd\x05\x0f\x98\xd8\x69\xe4\x5b\xa7\x6f\xd0\xa6\xf7\x05\x2d\x78\x1b\x21\x79\xa4\xc5\xb1\x9b\xc9\xbb\x77\x6c\x64\xc0\x05\xff\xe9\x4c\x8e\x2c\xdf\xf7\xfb\x96\xdd\x65\x2d\xde\x0b\x6b\x38\x2a\xa0\x22\xbd\x93\xe2\xee\x3b\xfe\x86\x4d\x2d\x7e\x80\xf1\x77\x0f\xe2\x17\x3a\x05\x06\x1e\x84\x07\xe3\x23\x8f\x8e\x8a\xe5\xc7\x64\xa2\x68\x33\x2d\x1d\xa2\x11\xef\x13\x21\x84\xc8\x20\x7f\x2d\x9d\xad\x8d\x8a\x72\xab\xad\x93\xf7\x69\x9a\xe7\x69\xba\x9c\x04\xb1\x43\x75\x56\x9a\xe7\x71\x1c\xc7\xad\x14\xaa\x0c\xdd\x59\x71\x51\x7c\xed\x8b\x4b\x87\xbb\xb3\x5a\x48\x9e\xf1\x39\x6f\xb5\x5b\x0d\xae\xc4\xa0\x7e\x23\xc5\x2b\x39\x4f\xe2\xf5\x76\x79\x28\xac\x90\xca\x15\xf7\x2b\x87\xb9\x78\xfa\x83\x72\x86\x55\x4b\x51\xb7\x50\x66\xf3\xc7\x21\x25\x99\xce\x7b\x9c\x21\xa6\x67\xba\x1d\xa3\x2a\x54\x54\x57\x57\x40\xc9\x6c\x31\x06\x4a\x66\x7d\xd4\x08\xa9\xe7\xfb\x1f\x92\xf2\x15\x68\x7d\x85\xb4\x98\x0d\x41\xf1\xf4\xa9\xcf\x19\x62\x3a\xd3\xed\x14\x55\x51\xee\xec\x65\x4c\x3a\xb2\xf5\xf8\x64\xd0\x43\x48\xfa\xef\xd6\xaf\x43\x3c\x03\xd7\x3e\x50\x82\x4b\x8c\xd9\x92\xce\x74\xdf\x98\xa2\x0c\x9c\x58\x4f\x99\x58\x1f\xcf\xa6\x93\x8b\x24\x8e\xbf\x34\x8c\xb5\xf5\xc4\x64\x8d\x14\x90\x79\xab\x6b\xc6\xa6\xae\xb1\xd8\x67\x35\x0f\x99\x65\xb6\x95\x14\xc9\x78\x88\x06\xcf\x2f\x6b\x05\xdc\xfe\xb5\xbd\xa8\xa7\xf9\x95\x24\x17\x3e\xeb\x4c\xd4\x34\xb3\xdb\x40\x6d\xfe\x53\xf1\xb6\xa2\xa3\xb7\xd0\x16\x58\xee\x7b\x6d\x9e\x2b\x70\x25\x99\x28\x40\xda\xad\x85\x72\x93\xd4\x56\xbb\x86\x1c\x6a\x60\xda\x04\x28\xe3\x96\x23\xd0\x54\x1a\x29\x72\x34\x8c\xae\xeb\x85\xca\xa8\xeb\xa7\xc1\x4a\x01\x35\xdb\x83\xe4\x74\xde\xc7\x66\xb4\xcd\x5f\x23\xcf\xe0\x58\x8a\xe3\x30\x4e\xde\xa1\x51\x27\x90\x0a\xbd\x87\x72\xb8\xb6\x45\x3c\xe6\x0e\xe4\x70\x39\xd7\xe1\xb0\xfd\xf9\xed\x65\xc0\x7e\xbc\xc4\x6e\xec\x97\xd0\xfb\x77\x1b\xf2\x94\x91\x26\xde\x49\xb1\x22\xa5\xd0\x84\xc8\x4b\xf7\xf1\x09\xb9\xe7\x0e\xab\x77\x4a\xa7\x77\xf6\x31\xf9\x1b\x00\x00\xff\xff\x64\x2f\xe5\xf4\xc7\x06\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1555877026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
