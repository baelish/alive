// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xcc\xf2\x12\x6a\x2d\x6b\x9d\x14\xbd\x24\xd0\x2e\xe2\x34\xc5\x76\x91\x8f\x22\xc9\xa2\x28\x82\x1c\x68\x71\x2c\xb3\x4b\x91\x06\x49\xc5\x1f\x59\xff\xf7\x82\xa4\x24\xdb\x69\xbc\xd8\x43\x4f\xb6\x38\x6f\xde\x0c\xdf\x0c\x67\x9e\x99\x01\x27\x6a\xd4\x8d\xb3\x50\xc0\xe3\x53\xe2\x4f\x70\x39\x17\x66\x15\xbf\xc3\x81\xd5\x8d\x29\x11\x0a\x50\xb8\x80\xcb\x67\x54\xee\x3e\x9c\x50\xf2\x01\xfd\x97\xfd\x40\xd2\xb3\x24\xa2\x72\xad\x6a\xb4\x96\x55\x1e\x3f\x6d\x54\xe9\x84\x56\x34\xc0\x52\x78\x49\x00\x00\x42\x0c\x7f\x00\x05\x7c\xb9\xbf\xbd\xc9\xe7\xcc\x58\x8c\x98\x9c\x33\xc7\xd2\x00\xb3\x0b\xe1\xca\x59\x7b\xec\x56\x73\xec\xfc\x01\x4a\x66\x11\x48\x33\xe7\xcc\xe1\x58\x2f\xc9\x69\x7b\x1e\xb9\x1d\x33\x15\xba\xb1\x5e\x42\x01\x5c\x97\x4d\xed\x09\x2a\x74\x97\x12\xfd\xdf\xf1\xea\x0f\xde\xb2\x0a\x9e\x9e\xf5\xae\xe5\x8c\xa9\x0a\xcf\x25\x1a\x77\x85\xcf\x28\x69\xcf\x93\xc5\x74\xf3\x52\x4b\x6d\xba\x0f\xc9\xac\xbb\x8e\x37\xdd\x21\x61\xde\xfd\x46\x7f\x0d\xa9\xf5\x51\x3a\x9f\x9a\x2d\x1f\xc6\x5f\xd3\x1e\x1d\x94\xc6\x2f\x7a\xf2\x1f\x64\xb4\x9c\x4f\x1d\x9a\x34\xe9\xf1\x13\x83\xec\xdb\x59\xb2\xa7\x82\x41\xa9\x19\xff\x93\x55\xb8\x23\x83\xd4\x25\xf3\xc2\xe7\xd1\x4a\x63\xc8\x4d\xb2\x39\x4b\x92\xa4\xab\x0a\x4c\xf4\xf2\x42\x8a\xf2\x1b\x15\xdc\x6b\xbb\xd9\xb5\xd5\xab\x07\x51\x23\xed\x8b\x26\xa6\x40\xc1\xc1\xbb\x02\x54\x23\x25\x6c\x6b\x01\x60\xda\xce\xf8\xcd\x5f\xd9\xb5\xa1\x00\xa5\xc5\x43\xa0\x2e\x9d\x60\x40\xd7\x18\x05\xc6\x57\xe8\xf7\x46\xca\xbf\x91\x19\x9a\xc2\x00\xc8\x90\xc0\x00\xe6\x8c\xd3\x60\xbb\xd6\xca\xcd\x82\xe1\x38\x3b\xe9\xed\x3d\x7f\x8f\x8b\x01\x5a\xc8\xc3\x1e\xc5\x67\xdd\x18\xdb\xdb\x4e\xdf\x74\xbf\x16\xaa\x71\xb8\x8f\xda\x5a\xef\xb1\xd4\x8a\x47\xeb\xbe\x5e\x1e\xa2\x32\x58\x08\xee\x66\x19\xac\xa3\x3e\x6b\x28\x60\x0d\xdf\xbf\xc3\xd1\xe8\xc8\xf7\x88\xf2\x22\xc0\x00\x8e\xc2\x57\x7b\x73\x95\x4b\x54\x95\x9b\xc1\xc7\x22\xba\xc3\x27\x50\x70\x1a\xd4\x3a\x37\x86\xad\x68\x3c\x1d\x6e\x91\x03\x38\x4e\xf3\x7f\xb4\x50\x74\xed\x93\x54\x67\xfb\xb9\x1c\xe8\xe4\x0c\xa4\xff\xca\xa0\x7d\xa0\x7b\xa5\x7d\x24\xac\x9e\xa0\x21\x19\xa9\x0c\xa2\x8a\xbf\x2b\x92\x11\x83\x9c\x3c\xe5\x42\x71\x5c\xde\x4e\x69\x60\x48\xa1\x28\x60\x78\x9c\xc2\x4b\x64\x84\x02\x22\xba\x2d\x69\x0c\x97\x97\x92\x59\x7b\x25\xac\xcb\x0d\xd6\xfa\x19\x69\x17\x02\xba\x18\xad\x5b\x06\x21\x4a\xfa\xb6\x33\xe3\xbc\x0d\xbb\x6b\xdf\xbe\x67\x3b\x5e\x5d\x78\xf0\x0d\xab\x91\x92\xf6\x6e\x24\x7d\x1c\xf9\xac\x15\x9a\xcf\x0f\xd7\x57\x50\x74\x97\xfe\x19\x0e\xff\xb4\xe3\x0b\xe6\x6f\xf0\xc4\x87\xf1\xaa\xfc\x46\x54\x33\x77\x2f\xd6\x38\x16\xd5\x58\x2f\xe9\xee\xac\x63\xcf\x4c\x48\x36\x91\xf8\x57\xa8\x63\x01\xd7\xcc\xcd\xf2\xa9\xd4\xda\x50\xba\x10\x8a\xeb\x45\x8c\x10\xed\xc3\x5f\x46\x29\x7c\x80\x5f\x8f\x4f\x52\x78\xef\x7f\x02\x51\xe8\x81\x38\xd3\xe8\x2b\xc2\x8f\x45\x04\x7f\x7a\x15\xe9\xb4\xf3\x3d\x34\x04\x8f\x26\xa2\x1a\x4e\xf4\xf2\x28\xcd\xad\x5b\x49\xcc\x17\x6d\x82\x7d\xb0\x01\x90\xf9\x92\xfc\x98\xc4\x3a\xe6\x1a\x3b\x9c\x30\xf3\x9a\x87\x6e\x89\x86\x27\x90\x76\x6c\x7b\xc2\xed\x0f\x4c\x3f\x00\xfd\x42\xda\xb6\x26\xf5\x93\x5f\x4f\xfb\x35\xf5\x28\xf8\x13\xbc\x2b\x0a\x20\x8d\xe2\x38\x15\xca\xd7\x08\x5e\xa0\x94\xc8\xcc\x43\x04\xd1\x5d\x70\xda\x36\xa5\xa7\x12\x35\xfa\xd6\x1d\x79\x87\xf6\xf5\x6d\x92\xfd\xb5\xf1\x83\x9d\x21\x78\xdb\x81\xbb\xa9\x14\x60\xd1\x75\x71\xfb\x7d\x97\xbe\x1c\x7c\x83\xa1\xd5\x33\x20\x97\x77\x77\xb7\x77\xa7\x70\xa3\x21\xee\x31\x0b\x53\x6d\xc0\x4f\x9b\x90\xe6\x00\x88\xcd\x49\xba\x89\x7a\xc0\x7b\x38\x1e\x8d\x46\xa1\xe9\x7a\xe9\xb6\xdb\xe3\xb0\x6c\x71\x97\xff\x94\x68\x5b\xe8\xff\x2f\xd9\x4e\x1a\x87\x04\x6b\xdf\xe4\x9c\x19\x54\xee\x46\x73\x6c\xa7\xc6\xc5\x4c\x48\xde\xaa\xf7\x86\x1c\xff\x06\x00\x00\xff\xff\x55\x03\x43\xd9\xc3\x08\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 2243, mode: os.FileMode(420), modTime: time.Unix(1561383282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x72\x9b\x30\x10\xc6\xef\x7e\x0a\x4d\x32\xbd\x05\x0f\x98\xd8\x69\xe4\x5b\xa7\x6f\xd0\xa6\xf7\x05\x2d\x78\x1b\x21\x79\xa4\xc5\xb1\x9b\xc9\xbb\x77\x6c\x64\xc0\x05\xff\xe9\x4c\x8e\x2c\xdf\xf7\xfb\x96\xdd\x65\x2d\xde\x0b\x6b\x38\x2a\xa0\x22\xbd\x93\xe2\xee\x3b\xfe\x86\x4d\x2d\x7e\x80\xf1\x77\x0f\xe2\x17\x3a\x05\x06\x1e\x84\x07\xe3\x23\x8f\x8e\x8a\xe5\xc7\x64\xa2\x68\x33\x2d\x1d\xa2\x11\xef\x13\x21\x84\xc8\x20\x7f\x2d\x9d\xad\x8d\x8a\x72\xab\xad\x93\xf7\x69\x9a\xe7\x69\xba\x9c\x04\xb1\x43\x75\x56\x9a\xe7\x71\x1c\xc7\xad\x14\xaa\x0c\xdd\x59\x71\x51\x7c\xed\x8b\x4b\x87\xbb\xb3\x5a\x48\x9e\xf1\x39\x6f\xb5\x5b\x0d\xae\xc4\xa0\x7e\x23\xc5\x2b\x39\x4f\xe2\xf5\x76\x79\x28\xac\x90\xca\x15\xf7\x2b\x87\xb9\x78\xfa\x83\x72\x86\x55\x4b\x51\xb7\x50\x66\xf3\xc7\x21\x25\x99\xce\x7b\x9c\x21\xa6\x67\xba\x1d\xa3\x2a\x54\x54\x57\x57\x40\xc9\x6c\x31\x06\x4a\x66\x7d\xd4\x08\xa9\xe7\xfb\x1f\x92\xf2\x15\x68\x7d\x85\xb4\x98\x0d\x41\xf1\xf4\xa9\xcf\x19\x62\x3a\xd3\xed\x14\x55\x51\xee\xec\x65\x4c\x3a\xb2\xf5\xf8\x64\xd0\x43\x48\xfa\xef\xd6\xaf\x43\x3c\x03\xd7\x3e\x50\x82\x4b\x8c\xd9\x92\xce\x74\xdf\x98\xa2\x0c\x9c\x58\x4f\x99\x58\x1f\xcf\xa6\x93\x8b\x24\x8e\xbf\x34\x8c\xb5\xf5\xc4\x64\x8d\x14\x90\x79\xab\x6b\xc6\xa6\xae\xb1\xd8\x67\x35\x0f\x99\x65\xb6\x95\x14\xc9\x78\x88\x06\xcf\x2f\x6b\x05\xdc\xfe\xb5\xbd\xa8\xa7\xf9\x95\x24\x17\x3e\xeb\x4c\xd4\x34\xb3\xdb\x40\x6d\xfe\x53\xf1\xb6\xa2\xa3\xb7\xd0\x16\x58\xee\x7b\x6d\x9e\x2b\x70\x25\x99\x28\x40\xda\xad\x85\x72\x93\xd4\x56\xbb\x86\x1c\x6a\x60\xda\x04\x28\xe3\x96\x23\xd0\x54\x1a\x29\x72\x34\x8c\xae\xeb\x85\xca\xa8\xeb\xa7\xc1\x4a\x01\x35\xdb\x83\xe4\x74\xde\xc7\x66\xb4\xcd\x5f\x23\xcf\xe0\x58\x8a\xe3\x30\x4e\xde\xa1\x51\x27\x90\x0a\xbd\x87\x72\xb8\xb6\x45\x3c\xe6\x0e\xe4\x70\x39\xd7\xe1\xb0\xfd\xf9\xed\x65\xc0\x7e\xbc\xc4\x6e\xec\x97\xd0\xfb\x77\x1b\xf2\x94\x91\x26\xde\x49\xb1\x22\xa5\xd0\x84\xc8\x4b\xf7\xf1\x09\xb9\xe7\x0e\xab\x77\x4a\xa7\x77\xf6\x31\xf9\x1b\x00\x00\xff\xff\x64\x2f\xe5\xf4\xc7\x06\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1555877026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
