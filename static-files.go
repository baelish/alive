// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x6f\x1b\x37\x16\x7e\xd7\xaf\x38\xe5\x43\x35\x53\x49\x23\xa5\x8b\xee\x83\x95\x49\x11\x7b\x03\xb4\xbb\xb1\x5d\xd8\x0e\xfa\x60\x04\x0b\x6a\xe6\xcc\x88\xd5\x88\x1c\x90\xd4\xcd\xa9\xfe\xfb\xe2\x90\x9c\x8b\x7c\xd9\x7a\x91\x6c\x1e\x62\x89\x3c\x97\x8f\x87\xdf\xf9\x78\x34\x9d\xc2\x0d\x56\x8a\xe7\x20\x0a\xd0\x38\xd9\x0a\x23\xac\x90\x25\x6c\x0c\xfd\xbf\xe0\xd9\x6a\x5a\x28\xbd\xe3\x3a\x87\xc5\xc6\x5a\x25\x4d\x32\x10\x05\x44\xb7\x56\x0b\x59\x46\x3b\x21\x73\xb5\x4b\x6a\xd4\x85\xd2\x6b\x2e\x33\x4c\x4a\xb4\x1f\xa4\xd5\x02\xcd\xf9\xe1\xee\x50\x63\xc4\x24\xdf\x8a\x92\x5b\xa1\x24\x8b\xef\x67\x9f\x13\x7b\xa8\x31\x86\x34\x4d\x81\x51\x82\x7f\x87\x04\x2c\xfe\x32\x00\xa8\x54\xe6\x4c\x13\xed\x70\x45\xf1\x7c\x70\x1c\x0c\x06\x0e\x68\x29\x8c\x45\x0d\x3b\x61\x97\xb0\x50\x7b\xc0\x2d\x4a\x0b\x46\x6d\x74\x86\x83\x0a\x9b\x8f\x90\x82\xc4\x1d\x7c\xa0\xdd\x5b\xb7\x12\xb1\xa9\xb3\x35\x53\x16\xcf\x07\xde\x2a\x51\x72\x8d\xc6\xf0\x92\xec\x8b\x8d\xcc\x28\x6b\xe4\xcc\x62\x20\x24\x3e\x7a\x0a\xff\xbc\xbd\xbe\x4a\x6a\xae\x0d\xfa\xdd\x24\xe7\x96\xc7\xf3\x01\x80\xd9\x09\x9b\x2d\xc3\xaa\x3f\x15\x39\x02\x64\xdc\x20\xb0\x15\x62\xcd\x2b\xb1\x45\x76\xe6\x56\x01\xda\x15\x3a\x56\x58\x5b\x68\xe4\xab\xf0\xcd\xfb\x6d\xea\x9c\x5b\x3c\x57\xfb\xd6\x8f\xce\x66\xb9\x2e\xd1\x9e\xab\x3d\xa4\x90\xab\x6c\xb3\xa6\xa4\x54\xec\x0a\xe9\xe3\xf9\xe1\xd7\x3c\x20\x11\x79\x17\x9d\xee\xaa\xf3\xfc\x2e\x4d\x41\x6e\xaa\xaa\xc1\xe9\x72\x2e\xb9\x2c\xf1\x7d\x85\xda\x7e\xc4\x2d\x56\x9d\xf9\xd8\x97\x20\x31\x96\xdb\x8d\x69\xbe\x55\xdc\xd8\x4b\x5f\x38\x57\x04\xfa\x77\xec\xa7\xf3\x66\x6b\xbe\xbf\x3b\xff\xe4\x32\x32\xd6\xcf\x47\x67\xd1\x6a\x07\x69\x77\xa2\xde\x31\xcc\xf9\xe1\xa2\xe2\xc6\x5c\xf1\x35\x46\xcc\x07\x71\xac\x69\xfd\xb5\xda\x9d\xda\xdf\xf1\xd2\x59\x0f\x6d\x3e\x74\xfc\x12\x52\xa2\xfe\xe5\xee\xf2\x23\xa4\xd0\x07\x33\x6f\x63\x3c\x81\xe9\xc8\x38\x23\x9c\x14\xde\xd8\x43\x85\x49\x2e\x4c\x5d\xf1\x03\xa4\xc0\xa4\x92\xc8\x8e\x80\x95\xc1\x17\x2c\x2c\x5f\x54\x38\xd1\x6a\xc7\x8e\x2f\xd7\x04\xf7\xb5\xd0\xf8\xbe\x20\x12\x7f\x5d\x61\x7a\x91\xbe\xbe\x3a\xbd\x60\xcf\x95\xa8\x8f\xfa\xff\x59\xa7\xa7\x8d\x90\x63\x85\xa7\x8d\xd0\xae\x3c\x43\xf5\xa7\xfe\x5e\x42\x7e\xe3\x65\xd7\x81\x4f\xe4\x65\x40\x08\x8e\x73\x2f\x31\xd4\x23\x56\xa9\xca\x8a\x7a\xd0\x48\x02\x29\xcd\x2f\x6a\x8b\x3a\xb2\xa2\xf6\xf7\xd5\xb5\xe3\x7f\xe9\x45\x16\x02\x31\x4a\xe1\xad\x4f\x6a\x4f\x39\xda\x8d\x5e\x85\x16\x95\xca\x56\xcc\x89\x5e\x1f\xc2\xf5\xc6\x46\xdf\x30\x3b\x63\xcf\x26\x5f\x8a\x3c\x47\xc9\x1a\xc9\xa5\x7a\x64\x95\xc8\x56\x27\x50\x2e\x68\x25\x12\xb9\x87\x13\x9e\x80\xb6\xb0\x4b\x8d\x05\x85\x9a\x2e\xd4\x7e\xca\x60\x04\x22\xef\x49\xf8\x5a\x6d\x91\x62\x74\x01\xbb\x2b\x6d\x22\xbe\xea\x80\xee\xe6\xdb\x23\xd4\x5c\xa3\xb4\x57\x2a\xc7\x44\xbb\x1c\x17\x4b\x51\xe5\x41\xca\xba\x27\xa4\xd5\x5f\xf7\x5a\x90\x92\xfd\x8b\xcf\x3b\x28\x3d\x79\x6e\x81\x64\x36\x3c\x27\xff\xe0\x16\xa3\x98\x60\xdc\x89\x35\x3a\xe2\x50\x8f\x84\x28\xf0\xfd\xf7\x10\x85\x8f\x23\xf8\xfb\x6c\x36\x9b\xc5\xf0\x96\xbc\x63\xf8\xf2\x94\x75\x40\xec\x0f\xe6\x29\x64\xf6\xd5\xd7\xea\xb5\x78\xb2\xe0\x9a\xf5\xcf\x9f\x91\x34\x7c\x14\xc6\x86\xe3\x47\x8c\xaf\x17\xa8\xd9\x98\x95\x1a\x51\xfa\xbf\x07\x36\x66\x52\x7d\x72\xaf\x0b\x1b\x33\x8d\xf9\x0b\x31\x78\x9e\x47\xc1\xb1\x6f\xf0\xa2\x4a\xfb\xd7\x80\x3d\x91\x17\xc6\xe6\xae\x4a\x11\xbd\x8d\xaa\x80\x15\xf7\xb2\xb7\x91\x39\x16\x42\x52\x7e\xf8\x02\x59\x85\x5c\x53\x4d\xd5\xc6\x46\x2b\x1e\xcf\xe1\x48\x6e\x2b\xaa\x8c\xf1\xd5\xa6\x1d\xd7\xc0\xed\x3b\x1d\x37\xba\xf9\x2d\x0a\xf0\x6c\x1c\x57\x84\xd6\xfa\xb1\xdd\xff\x5e\x8b\x0f\x37\x37\xd7\x37\x67\x70\xa5\x3a\x9a\x19\x30\x42\x66\x08\xd4\x25\xeb\x83\xa3\x95\xe7\x44\x0c\x23\x60\x09\xf3\x39\x8f\x63\xf8\x09\x7e\x80\x37\xb3\xd9\x6c\x00\x10\x37\x5c\xfe\x4d\x0b\x69\xc1\x8a\x35\x82\x90\xb0\x3e\x40\xad\xb1\x40\xad\x31\x07\x37\x8b\xd9\x8e\xd7\x21\xb6\xed\x58\xad\xe7\x81\xbe\x16\xbe\x3b\x1d\x09\x74\x9f\xee\xd6\xc9\x63\xd0\xf3\xa7\xdb\x5e\x3c\x01\x34\xda\x8d\x96\xa0\x13\xab\x7e\xbd\xbd\x0e\xa3\x61\x07\x94\xe7\xc0\xc1\xb8\xd5\x0e\x53\xcd\xf3\x48\x8e\x61\x27\x72\xbb\x1c\xc3\x83\x4f\xff\x00\x29\x3c\xc0\x9f\x7f\xc2\x70\x36\x24\x84\x92\xb2\xc1\x08\x86\xee\x5b\x48\x23\x93\x0a\x65\x69\x97\xf0\x2e\xf5\xee\xf0\x33\x48\x38\x73\xb0\xde\x6b\xcd\x0f\x91\x5f\x9d\x74\x96\x23\x78\x13\x27\x7f\x28\x21\xa3\x07\x2a\xad\x6c\x05\xe1\xc2\x0d\x3f\xc0\x69\xfa\x81\x8a\xc6\x1f\x50\x05\xf0\x53\x85\x7a\x61\x42\x1a\x43\x33\x18\x85\x4b\xf7\x67\x70\xa2\x70\xff\x4a\xfa\x11\x47\x72\xdc\x5f\x17\x91\x8f\xe5\xc7\xe2\xc9\x1b\xea\x0b\xbf\x42\xd4\x71\xbe\xae\xd2\x7f\xc5\x76\x68\xf2\x05\xa7\x31\xf4\x32\xc2\x5f\xb4\x7c\x80\xf0\x35\x1d\x1f\x36\x5e\x11\x82\x88\xee\x81\xe5\xcf\x84\xf1\x84\x75\x50\xb6\x5c\x43\x1d\x06\x4e\xd3\x0e\x47\x2f\xc6\xad\x35\x6e\x85\xda\x98\xc6\xc3\x9f\xd7\x51\xdd\x89\x50\xd4\xc6\xba\x9f\x7d\x26\xf2\x0f\x5b\x35\x1a\xc6\xa4\xe2\x8f\xf7\xfb\xcd\xd1\xdf\x4b\x84\x34\xa8\xed\xfb\xfc\x0f\x9e\xa1\xb4\x84\x3c\x1a\x72\x9a\x92\x16\x58\x0a\x39\x1c\x03\x7b\x5b\x89\x77\xbd\xde\x76\x5d\x7d\xe6\xba\xdd\x97\x3a\xb1\xea\x53\x5d\xa3\xbe\xe0\x26\xec\x42\xe4\xec\xc3\xef\x92\x11\xb0\xf8\xed\x94\x82\xb8\x43\x1c\x1b\xd6\x5e\xf2\x15\xc2\x42\x94\xee\x47\x90\x55\x50\x08\x0b\xdc\xc0\x9a\xcb\x03\x2d\x97\x68\x2c\x6d\xa1\xa1\xd5\x9d\xa8\x2a\x67\x61\x97\x08\xd9\x46\xd3\x43\xd9\x3c\xda\x1d\xc7\xb5\x28\x97\xf6\x56\x3c\xe0\xb9\x28\xe9\x2d\xee\xa4\x82\x6f\xb9\xa8\x68\x6a\xfb\xdd\x75\x55\x0a\x97\xdc\x2e\x93\xa2\x52\x4a\x47\xcd\xef\x3f\x77\x77\x7e\x7f\xf2\xb7\x59\x0c\x53\xf8\xe9\xcd\x8f\x31\xfc\x40\x7f\xe6\x21\x8e\x6b\x4a\xff\xf3\x25\x7a\x14\xf3\x5d\xea\xed\x7f\x7e\x94\xec\x2c\xb8\xbf\xf4\x1a\x0e\x17\xa2\x9c\x2c\xd4\x7e\x18\x87\x41\x73\x17\x20\xb6\xb9\x46\xc0\xea\x3d\x6b\x20\x14\x9b\xaa\xfa\x3d\x6c\x39\x2e\x3d\x13\xf8\x84\x4d\x43\xf2\x70\xc1\x86\xee\x06\x0a\xa5\x21\xa2\x48\x02\x52\x98\xcd\x41\xc0\xdb\x47\x41\x83\xe2\xcc\x41\x8c\x46\x0d\x6b\x4e\x2d\xee\xc5\xe7\x47\x68\xa3\x16\xee\x04\x7e\x8c\x7b\x98\xe9\xc2\xff\x13\x00\x00\xff\xff\x96\xa4\xde\xce\xa2\x0f\x00\x00")

func bindataScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_bindataScriptsJs,
		"/scripts.js",
	)
}



func bindataScriptsJs() (*asset, error) {
	bytes, err := bindataScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/scripts.js",
		size: 4002,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1717255239, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStandardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcb\x72\xab\x38\x10\xdd\xf3\x15\xaa\xa4\xb2\x71\x59\x36\xb6\xe3\x4c\x42\x56\x33\x35\x7f\x30\x93\xd9\x37\xd0\x60\x4d\x84\x44\x49\x8d\x1f\x37\x95\x7f\xbf\x05\x02\x22\x1c\x48\x6e\x9c\xbb\xd4\x51\xf7\x91\xfa\xa8\x1f\x5a\xce\x98\x45\x22\xa1\x72\x96\x62\x06\x95\x24\x96\x69\x45\x2c\x83\x42\xc8\x13\x9b\x2d\x83\x72\xce\x62\x9d\x9e\xe6\x8c\x20\x96\xc8\x5e\x02\xd6\x58\x70\x67\x11\xb1\xab\xbf\xf1\x7f\xd8\x57\xec\x1f\x50\xf6\x6a\xce\xfe\x43\x93\x82\x82\x39\xb3\xa0\x2c\xb7\x68\x44\xf6\x18\xbc\x06\x41\x14\xf1\x03\xc6\xcf\x82\xb8\x4d\x8c\x96\x32\x06\xd3\x70\xa5\xc2\x96\x12\x4e\x11\x53\x5a\x61\x6d\xc8\x0b\xcb\xf5\x1e\x4d\x26\xf5\x81\x5b\x3a\x49\x74\x7b\x8f\x41\xef\xc8\x0f\x22\xa5\x5d\x07\x07\xcb\x19\x93\x60\xe9\xa9\x4c\x81\x90\x25\x12\xac\x65\xcd\xcd\x17\x6f\x70\xda\x1c\xd6\x5e\xdd\x8a\x1f\x18\xdd\x86\x37\x8f\x0d\x54\x80\xc9\x85\xe2\xb1\xd4\xc9\x33\x47\x95\x46\x0c\x2a\xd2\x23\x7b\x96\xc0\x90\xbf\x5b\x6a\x2b\x48\x68\x15\x31\x88\xad\x96\x15\xa1\xc3\x8d\xc8\x77\x14\xb1\x4d\x79\x74\xeb\x58\x13\xe9\x22\x62\xab\x1a\x78\x0d\x82\x54\xec\xaf\x2d\x01\x55\x96\xd7\x32\x7c\x78\x4d\xf6\xc7\xf6\xa6\x71\x5a\x14\x22\x31\x7a\xcc\x78\x20\xa1\xb3\x4d\xbf\x62\x6c\x0b\x90\xf2\xd7\x6c\x6b\xad\x0b\xb4\x16\xf2\x4e\xe8\x46\xe7\x0e\x3a\xbf\xfc\xdd\xa5\x1a\x87\x8b\x2d\x16\x83\xb0\x87\x47\x7c\x10\xf2\x67\x86\x75\x08\x24\x48\x7a\x01\x2c\xdc\xfa\xe5\x1b\xe9\x30\xf2\xaa\x3e\xe9\x20\x03\xce\x1e\x78\x15\x76\x2a\x49\xcc\xfc\xb4\x19\x4b\xaf\x36\x80\x58\x1f\x59\xa2\xa5\x36\x2e\x08\x74\x61\xe4\x06\x51\x75\x27\x42\xf2\x9c\x1b\x5d\xa9\x94\x37\x86\xd1\xf5\x66\x93\x24\x9b\x8d\x13\xcb\x60\x3a\x67\x0b\xa5\xdb\x9a\x99\x72\x49\x92\x30\x0c\x43\xe7\x02\x45\x8c\x66\xd2\x32\xcb\xee\x7b\xcb\xdc\xe0\x69\xd2\x10\x56\x0f\xf8\x90\x0c\x02\xa9\x65\x18\xc4\x71\x94\x60\x46\xb2\x69\x5d\xa7\x44\x0d\xed\xb0\x29\xb0\xed\x2a\xec\xa4\x72\x0d\xa1\x05\x9a\x6c\x18\xa7\x58\xb9\xbc\xf2\x48\xd6\xdb\xdb\x49\x92\x8b\x39\x5a\xc0\xa5\x25\xa6\xa2\x2a\x46\x58\x56\xeb\x73\x9e\xd5\xfa\x6e\x92\xe7\x3b\x34\x2d\xd0\x5c\xc7\x15\xfb\x39\x4d\xb8\xb8\x3f\x23\xb9\x5b\x4f\x72\x5c\x4a\xe1\xd6\x5e\xad\x7e\x4e\xb1\x09\xa7\x28\x2e\x65\xd8\xf4\xaf\xeb\x6a\xf5\xbd\xa2\x67\x04\xac\xf7\xe8\x0b\xcf\x4b\xd5\x7a\xed\x18\x5c\x7e\xb3\xc3\x4e\x74\x63\x20\x93\x1a\x28\xaa\x8b\x7a\xd8\x3d\x5c\x2f\xe8\xc5\x69\x61\x37\x34\xd6\xef\x8b\xdf\xa0\x04\x12\xfb\x96\x94\xf0\x48\x1c\xa4\xc8\x55\xc4\x12\x54\x84\xc6\x45\x13\x8b\x9c\xbf\x5d\xc6\x71\x7a\xcd\xa9\x69\xdc\x70\xfc\xf7\xaf\xa7\x41\xdf\x76\xc8\x54\xab\x5c\xce\x18\x1e\x4b\x61\xf0\xcf\x8c\xd0\xf8\x8e\x3e\xfc\x81\xb7\x50\x99\x6e\xff\x0d\xb5\x58\xde\x72\x4a\xb3\x12\xd2\x54\xa8\x9c\xbb\x56\xb8\xed\xde\xca\x79\x76\x73\xc9\xd7\xc0\xc9\xfb\x66\xb3\x1b\xb1\x69\xa4\x75\xfc\x7b\x34\x24\x12\x90\xdd\x16\xe9\xd2\xf3\xae\xba\xb4\x96\xc2\x92\xfb\x7c\x70\x3a\x95\xfd\x0f\xc4\xbf\xa1\x50\x52\x28\xec\x07\xd6\xd9\x6b\x92\x2e\xdf\x83\xdd\x14\xe8\x12\xaa\x9e\x44\x5a\x4b\x12\xa5\x3f\x8b\x5a\xe4\x2b\x83\xe3\xf7\x7f\x61\xda\x1f\x96\x3b\xe2\x35\xf8\x19\x00\x00\xff\xff\x39\x33\x41\xca\x27\x0a\x00\x00")

func bindataStandardCssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStandardCss,
		"/standard.css",
	)
}



func bindataStandardCss() (*asset, error) {
	bytes, err := bindataStandardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/standard.css",
		size: 2599,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1717253891, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/scripts.js":   bindataScriptsJs,
	"/standard.css": bindataStandardCss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"scripts.js": {Func: bindataScriptsJs, Children: map[string]*bintree{}},
		"standard.css": {Func: bindataStandardCss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
