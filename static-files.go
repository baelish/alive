// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x51\x6f\x22\x37\x10\x7e\xe7\x57\xcc\xf9\x05\xfb\xd8\x6c\x20\x6a\x5f\x82\xf6\x4e\xc7\x25\xd5\x55\x4a\x72\x52\x92\xaa\xaa\x10\x0f\x06\x0f\x8b\x5b\x63\x23\xdb\x0b\x2c\x39\xfe\x7b\x65\x7b\xd9\x00\x2d\x55\xf3\x90\xc5\x33\xdf\x7c\xe3\x6f\x66\x3c\x6b\x6e\xc1\xcb\x25\x9a\xca\x3b\x28\x60\x3c\xe9\x74\x82\xc9\x99\xca\xce\x10\x0a\xd0\xb8\x81\xfb\x35\x6a\xff\x12\x2d\x94\x5c\x63\x38\xb9\x6b\xc2\x86\x9d\x84\xca\x8d\x5e\xa2\x73\xbc\x0c\xf8\x79\xa5\x67\x5e\x1a\x4d\x23\x8c\xc1\x5b\x07\x00\x20\x50\x46\xc3\x1d\x7a\x2e\x55\xc8\x14\x8f\xb9\xe0\x9e\xe7\x6e\xa5\xa4\xa7\xdd\xac\xcb\x5a\xb0\xe7\xb6\x44\x3f\x32\x5b\x28\x40\x98\x59\xb5\x0c\xe0\x12\xfd\xbd\xc2\xf0\x73\x54\xff\x2a\xe8\x31\xe1\xb8\x3f\x61\xc3\x18\x3d\x5b\x70\x5d\xe2\x17\x85\xd6\x3f\xe0\x1a\x15\x6d\xa9\xb2\x93\x2b\x8c\x07\x93\x33\xc3\x4d\xa0\xd8\x0f\x3b\x9d\xce\x41\x04\x4c\xcd\xf6\xab\x92\xb3\xbf\xa8\x14\x41\xca\xfe\xd8\xb7\xac\x5f\xe5\x12\x69\xab\x51\xce\x81\x82\x87\x0f\x05\xe8\x4a\x29\x38\x98\xc3\x9f\x6d\x0a\x79\xc7\x7d\x08\x88\xf6\x3d\xa0\x72\x78\x09\xd4\x60\xe2\x7f\x8b\xbe\xb2\x1a\x6c\xd0\xff\x4b\xa5\xd4\x1f\xc8\x2d\x65\xd0\x03\x72\x45\xa0\x07\x2b\x2e\x68\xf4\x3d\x1a\xed\x17\xd1\x31\xc8\x6e\x5a\x7f\xcb\xdf\xe2\xee\x78\x4d\x59\x83\x78\x3d\x61\xf8\x66\x2a\xeb\x5a\xdf\x6d\xf0\x25\x66\xa9\x2b\x8f\x2e\x70\xb7\x74\xc9\xdd\x86\xbe\xe0\xcc\x68\x91\x82\x4f\xeb\x14\x20\x3a\x83\x8d\x14\x7e\x91\xc1\x2e\xd5\x65\x07\x05\xec\xe0\xc7\x0f\xe8\xf6\xbb\xa1\x6f\x3a\x88\x87\x1e\x74\xe3\xa9\x51\xac\x73\x85\xba\xf4\x0b\xf8\x54\xa4\x70\xf8\x0c\x1a\x6e\x63\x95\xbe\x58\xcb\x6b\x9a\xac\x57\xef\xc8\x1e\x0c\x58\xfe\xa7\x91\x9a\xee\x82\x06\x3d\x3c\xbd\xcb\x85\xe1\xc8\x40\x85\x53\x06\xcd\x1c\x9f\xb4\x74\x4c\xf8\x72\x8a\x96\x64\xa4\xb4\x88\x3a\x7d\x6b\x92\x11\x8b\x82\x4c\x72\xa9\x05\x6e\xbf\xcf\x69\x64\x60\x50\x14\x70\x35\x60\xf0\x96\x18\xa1\x80\x84\x6e\x5a\x99\xd2\xe5\x33\xc5\x9d\x7b\x90\xce\xe7\x16\x97\x66\x8d\xf4\x90\x02\x0e\x39\x9a\xb0\x0c\x62\x16\xf6\xef\xc1\x5c\x88\x26\xed\xb1\xff\xfd\x95\xb8\x51\xfd\x35\x80\x9f\xf8\x12\x29\x69\xb4\x11\x36\xee\x87\x5b\x6b\xb4\xdf\x5e\x1f\x1f\xa0\x38\x88\xfe\x3f\x1c\x8a\x3b\xff\xdb\x4a\x70\x1f\x2e\xf5\x0f\x9e\xf4\x20\xce\xda\x6f\x65\xb9\xf0\x2f\x72\x87\x23\x59\x8e\xcc\x96\x1e\xaf\x04\xbe\xe6\x52\xf1\xa9\xc2\xdf\x63\x1f\x0b\x78\xe4\x7e\x91\xcf\x95\x31\x96\x6e\xa4\x16\x66\x93\x12\x24\xf7\x35\xfc\x3c\xb8\x61\xf0\x31\x7c\x22\x45\xec\x7e\xda\x11\xf4\x8c\xea\x53\x01\x83\xfe\xcd\x4f\x0c\x3e\x9f\x25\xb9\x0d\xe6\x18\x7d\x69\xad\x74\xa7\xb2\xbc\x9a\x9a\x6d\x97\xe5\xce\xd7\x0a\xf3\x4d\x73\xb9\x36\x5d\x0f\xc8\x6a\x4b\x4e\x65\xf2\x30\x53\x4f\x26\x15\x87\x4a\x91\xc5\xad\xfa\x3e\x48\xd4\xd7\x2b\x34\xf3\x76\xd7\x8e\xa5\x98\xc0\x87\xa2\x00\x52\x69\x81\x73\xa9\x43\x45\xe1\x0d\x66\x0a\xb9\x7d\x4d\x20\x7a\x0c\x66\xfb\xe1\xd9\x76\xfc\x8f\xd5\x28\x45\x33\x12\xc7\xd9\x0a\x70\xe8\x0f\xd4\xed\x9e\x66\x6f\x17\x1f\x45\x9c\xbd\x0c\xc8\xfd\xf3\xf3\xf7\xe7\x5b\x78\x32\x50\x45\x79\x0e\xe6\xc6\x42\x78\xfe\x81\x3f\x94\xc3\xe5\x84\xed\x93\x64\xf8\x08\x83\x7e\xbf\x1f\xa6\xe0\xef\x00\x00\x00\xff\xff\xbd\x4e\x65\x2f\x5c\x06\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 1628, mode: os.FileMode(420), modTime: time.Unix(1553941960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\x4b\x6e\xdb\x30\x10\x06\xe0\xbd\x4f\x41\xa0\xe8\x52\x86\x1e\xb1\xdb\xd0\xbb\x9e\xa1\x39\xc0\x88\x1c\x4b\x83\xf0\x61\x90\x63\x47\x69\xd1\xbb\x17\xb1\x68\x49\xae\xfc\x2a\x90\xa5\xc8\x7f\x3e\x11\x9c\x01\x35\x1d\x96\x4d\x40\x74\xe2\xf7\x42\x08\x21\x6a\x50\xaf\x4d\xf0\x7b\xa7\x33\xe5\x8d\x0f\xf2\x4b\x55\x29\x55\x55\x9b\xc5\x9f\xc5\xe2\x23\x1c\x50\x5f\x8d\x2a\x95\xe7\x79\x3e\x44\xc1\xd6\x18\xae\x86\xb7\xdb\xef\xd3\x70\x13\xf0\xfd\x6a\x16\x8a\x67\x7c\x56\x43\xb6\x33\x10\x1a\x4c\xe9\x37\xd2\xdc\xca\x55\x91\xef\xba\xcd\x71\xa1\x45\x6a\x5a\x9e\xae\x6c\xbd\xe3\x2c\xd2\x2f\x94\x25\xda\x41\xd1\x8f\x28\xe5\xea\x69\xae\x14\xcb\xd5\xc4\x99\x33\x93\xa2\xc7\x19\x6d\x51\xd3\xde\xde\x81\x8a\x72\x7d\x09\x2a\xca\x29\x75\x41\x9a\xd4\xfd\x8f\xa4\xa3\x05\x63\xee\x48\xeb\x72\x0e\xe5\xcb\x6f\x53\x67\xce\x8c\x45\x8f\x2b\xda\x92\x0a\xfe\x36\x53\x5d\xe8\x7a\x7e\x76\xd1\x73\xa4\xfa\xb7\xeb\xf7\x91\xda\x77\x89\xe8\x47\x54\xbc\xb5\xc4\x98\x6a\x8c\x07\x96\x06\xb7\xdc\x7f\x5b\x08\x0d\xb9\xac\xf6\xcc\xde\xca\xe1\xc0\x69\x39\xf4\x03\x72\x5a\xdd\xf9\x48\x4c\xde\x49\x11\xd0\x00\xd3\x21\xa1\x8c\x1d\x67\x60\xa8\x71\x52\x28\x74\x8c\x61\x3c\x0b\x35\xd9\x78\x9e\x9e\x95\x02\xf6\xec\x8f\x91\xdd\x92\x89\x0d\x9e\x6d\x67\xb5\xf1\xea\x35\x8b\x0c\x81\xa5\x58\x7d\xdd\xcc\xf7\xd0\xe9\x33\xc4\x62\x8c\x30\x0c\xfa\x78\x2f\xeb\xfc\x52\x75\x92\xd3\xa5\xdd\xc7\xa1\xfb\xf9\xe3\x65\x66\x3f\xdd\xb2\xfb\xf2\x5b\xf4\xc7\xde\x81\x22\xd5\x64\x88\xdf\xa5\x68\x49\x6b\x74\xe9\x97\x06\x22\xbf\xec\x34\xf0\xf0\xa0\x7d\xea\x7f\xc7\x3e\x42\x1d\xbd\xd9\x9f\x86\x23\x4d\x81\x28\xfa\xcf\xbe\xfb\xe2\xf8\xbe\xfe\x0d\x00\x00\xff\xff\x96\xeb\xbe\x5b\x8c\x05\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1420, mode: os.FileMode(420), modTime: time.Unix(1553942178, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
