// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdf\x6f\x1a\x39\x10\x7e\xe7\xaf\x98\xfa\x05\x6f\xb3\x6c\x20\xd5\xbd\x80\xb6\x55\x69\x73\xea\x49\x49\x7a\x4a\x72\x3a\x9d\x10\x0f\x66\x3d\x2c\xbe\x1a\x1b\xd9\x5e\x7e\xa5\xfc\xef\x27\xdb\xcb\xc2\xa2\xa4\xba\x27\x58\xcf\xe7\xef\x1b\x7f\x33\x1e\xaf\x99\x01\x27\x96\xa8\x2b\x67\x21\x87\xc9\xb4\xd3\xf1\x4b\x56\x57\xa6\x40\xc8\x41\xe1\x06\x6e\xd7\xa8\xdc\x53\x58\xa1\xe4\x1a\xfd\x97\xbd\x26\xc9\xa8\x13\x51\x99\x56\x4b\xb4\x96\x95\x1e\x3f\xaf\x54\xe1\x84\x56\x34\xc0\x12\x78\xe9\x00\x00\x78\xca\xb0\xf0\x15\x1d\x13\xd2\x2b\x85\xcf\x8c\x33\xc7\x32\xbb\x92\xc2\xd1\x6e\xda\x4d\x02\xd8\x6e\x84\x2b\x16\xf4\x1c\x3f\xe9\x4f\x8f\x54\x00\x05\xb3\x08\xa4\x5a\x71\xe6\x70\xac\xb7\x64\x58\xaf\x47\x19\xc7\x4c\x89\x6e\xac\xb7\x90\x03\xd7\x45\xb5\xf4\x32\x25\xba\x5b\x89\xfe\xef\x78\xf7\x07\x6f\x53\x0f\xa6\xc9\xa8\x61\x28\x16\x4c\x95\xf8\x59\xa2\x71\x77\xb8\x46\x49\x1b\xba\xb4\x75\x80\xc9\xcd\xf4\x62\xe1\xc3\x39\xcd\xcc\x20\xfb\x31\x6a\xe5\x6b\x50\x6a\xc6\xff\x64\x25\x9e\x25\x2c\x75\xc1\xbc\x5b\x59\x8c\xd2\x68\xc0\xa1\x73\x18\x75\x3a\x9d\xa3\x95\x30\xd3\xdb\x2f\x52\x14\x3f\xa8\xe0\xde\x85\xc3\x79\x6c\xb9\x7b\x16\x4b\xa4\x8d\xd3\x62\x0e\x14\x1c\xbc\xcb\x41\x55\x52\xc2\xc9\x35\x00\x53\x97\xf3\x2b\x73\x7e\x43\x94\x02\x94\x16\xdf\x02\x1d\xd3\x09\x01\x74\x95\x51\x60\xbc\x97\xbf\x57\x52\xfe\x83\xcc\xd0\x04\xae\x80\xf4\x08\x5c\xc1\x8a\x71\x1a\x62\xf7\x5a\xb9\x45\x08\x0c\xd2\x9b\x26\xde\xf0\x37\xb8\x28\x50\x43\x9e\x5b\x14\xdf\x74\x65\x6c\x13\x1b\xbe\xba\xfd\x5e\xa8\xca\x61\x1b\x75\x8a\x3e\x61\xa1\x15\x8f\xd1\xb6\x5f\x1e\xa2\x52\xd8\x08\xee\x16\x29\xec\xa3\x3f\x7b\xc8\x61\x0f\x3f\x7f\x42\xb7\xdf\xf5\x55\x53\xde\x04\xb8\x82\x6e\xf8\xaa\x4f\xae\x32\x89\xaa\x74\x0b\xf8\x98\xc7\xed\xf0\x09\x14\x0c\x83\x5b\x9f\x8d\x61\x3b\x1a\x57\x7b\x27\xe4\x15\x0c\x92\xec\x5f\x2d\x14\xdd\xfb\x24\xd5\xa8\x9d\xcb\x1b\xcd\x96\x82\xf4\x5f\x29\xd4\xb7\xaa\x55\xda\x09\x61\xcb\x19\x1a\x92\x92\xd2\x20\xaa\xf8\xbb\x23\x29\x31\xc8\xc9\x34\x13\x8a\xe3\xf6\xfb\x9c\x06\x86\x04\xf2\x1c\x7a\x83\x04\x5e\x22\x23\xe4\x10\xd1\x75\x49\xa3\x5c\x56\x48\x66\xed\x9d\xb0\x2e\x33\xb8\xd4\x6b\xa4\x47\x09\x38\x6a\xd4\xdb\x52\x08\x2a\xc9\xeb\x9b\x19\xe7\xb5\xec\x79\xfc\x74\xf3\xec\x78\xf7\xc5\x83\x1f\xd8\x12\x29\xa9\xcf\x46\x92\x49\xdf\x67\xad\xd0\x7c\x7b\xbe\xbf\x83\xfc\x78\xe8\xff\xc3\x21\x99\x75\x7f\x85\x31\xc0\x5f\xe1\x89\x17\xe3\xa2\xfc\x46\x94\x0b\xf7\x24\xf6\x38\x16\xe5\x58\x6f\xe9\xf9\x80\x62\x6b\x26\x24\x9b\x49\xfc\x3b\xd4\x31\x87\x7b\xe6\x16\xd9\x5c\x6a\x6d\x28\xdd\x08\xc5\xf5\x26\x2a\xc4\x78\xef\x43\x3f\x81\x6b\xf8\x6d\x70\x93\xc0\x7b\xff\x13\x88\x42\x0f\xc4\xe9\x43\x2f\x08\x3f\xe6\x11\xfc\xe9\x42\x69\x78\xdc\xfb\xd6\xb8\xea\xce\x44\xd9\x9b\xe9\x6d\x37\xc9\xac\xdb\x49\xcc\x36\x75\x82\x8d\xd8\x15\x90\xd5\x96\xfc\x9a\xc4\x3a\xe6\x2a\xdb\x9b\x31\x73\xc9\x43\x4f\x44\xbd\x1b\x48\x8e\x6c\x2d\xe3\x98\xef\xd2\x07\x1d\xed\xa6\x82\xa7\xe1\xd5\x38\xb5\x26\x75\xbb\x15\xea\x79\xf3\x96\x4c\x04\x9f\xc2\xbb\x3c\x07\x52\x29\x8e\x73\xa1\x7c\x8d\xe0\x05\x0a\x89\xcc\x3c\x47\x10\x3d\x07\x27\x87\x51\xa7\x3d\xc3\x7f\x31\xc0\x05\xaf\x9b\xec\x5c\x2d\x07\x8b\xee\x48\xdd\xbc\x43\xc9\xcb\x9b\xd7\x2c\x74\x73\x0a\xe4\xf6\xf1\xf1\xfb\xe3\x10\x1e\x34\xc4\x47\xc5\xc2\x5c\x1b\xf0\x03\xc5\xf3\x7b\x3b\x6c\x46\x92\x43\x3c\x32\xbc\x87\x41\xbf\xdf\xf7\x7d\xf5\x5f\x00\x00\x00\xff\xff\x00\xaa\x11\x5b\x3c\x07\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 1852, mode: os.FileMode(420), modTime: time.Unix(1555861985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x72\x9b\x30\x10\xc6\xef\x7e\x0a\x4d\x32\xbd\x05\x0f\x98\xd8\x69\xe4\x5b\xa7\x6f\xd0\xa6\xf7\x05\x2d\x78\x1b\x21\x79\xa4\xc5\xb1\x9b\xc9\xbb\x77\x6c\x64\xc0\x05\xff\xe9\x4c\x8e\x2c\xdf\xf7\xfb\x96\xdd\x65\x2d\xde\x0b\x6b\x38\x2a\xa0\x22\xbd\x93\xe2\xee\x3b\xfe\x86\x4d\x2d\x7e\x80\xf1\x77\x0f\xe2\x17\x3a\x05\x06\x1e\x84\x07\xe3\x23\x8f\x8e\x8a\xe5\xc7\x64\xa2\x68\x33\x2d\x1d\xa2\x11\xef\x13\x21\x84\xc8\x20\x7f\x2d\x9d\xad\x8d\x8a\x72\xab\xad\x93\xf7\x69\x9a\xe7\x69\xba\x9c\x04\xb1\x43\x75\x56\x9a\xe7\x71\x1c\xc7\xad\x14\xaa\x0c\xdd\x59\x71\x51\x7c\xed\x8b\x4b\x87\xbb\xb3\x5a\x48\x9e\xf1\x39\x6f\xb5\x5b\x0d\xae\xc4\xa0\x7e\x23\xc5\x2b\x39\x4f\xe2\xf5\x76\x79\x28\xac\x90\xca\x15\xf7\x2b\x87\xb9\x78\xfa\x83\x72\x86\x55\x4b\x51\xb7\x50\x66\xf3\xc7\x21\x25\x99\xce\x7b\x9c\x21\xa6\x67\xba\x1d\xa3\x2a\x54\x54\x57\x57\x40\xc9\x6c\x31\x06\x4a\x66\x7d\xd4\x08\xa9\xe7\xfb\x1f\x92\xf2\x15\x68\x7d\x85\xb4\x98\x0d\x41\xf1\xf4\xa9\xcf\x19\x62\x3a\xd3\xed\x14\x55\x51\xee\xec\x65\x4c\x3a\xb2\xf5\xf8\x64\xd0\x43\x48\xfa\xef\xd6\xaf\x43\x3c\x03\xd7\x3e\x50\x82\x4b\x8c\xd9\x92\xce\x74\xdf\x98\xa2\x0c\x9c\x58\x4f\x99\x58\x1f\xcf\xa6\x93\x8b\x24\x8e\xbf\x34\x8c\xb5\xf5\xc4\x64\x8d\x14\x90\x79\xab\x6b\xc6\xa6\xae\xb1\xd8\x67\x35\x0f\x99\x65\xb6\x95\x14\xc9\x78\x88\x06\xcf\x2f\x6b\x05\xdc\xfe\xb5\xbd\xa8\xa7\xf9\x95\x24\x17\x3e\xeb\x4c\xd4\x34\xb3\xdb\x40\x6d\xfe\x53\xf1\xb6\xa2\xa3\xb7\xd0\x16\x58\xee\x7b\x6d\x9e\x2b\x70\x25\x99\x28\x40\xda\xad\x85\x72\x93\xd4\x56\xbb\x86\x1c\x6a\x60\xda\x04\x28\xe3\x96\x23\xd0\x54\x1a\x29\x72\x34\x8c\xae\xeb\x85\xca\xa8\xeb\xa7\xc1\x4a\x01\x35\xdb\x83\xe4\x74\xde\xc7\x66\xb4\xcd\x5f\x23\xcf\xe0\x58\x8a\xe3\x30\x4e\xde\xa1\x51\x27\x90\x0a\xbd\x87\x72\xb8\xb6\x45\x3c\xe6\x0e\xe4\x70\x39\xd7\xe1\xb0\xfd\xf9\xed\x65\xc0\x7e\xbc\xc4\x6e\xec\x97\xd0\xfb\x77\x1b\xf2\x94\x91\x26\xde\x49\xb1\x22\xa5\xd0\x84\xc8\x4b\xf7\xf1\x09\xb9\xe7\x0e\xab\x77\x4a\xa7\x77\xf6\x31\xf9\x1b\x00\x00\xff\xff\x64\x2f\xe5\xf4\xc7\x06\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1555866449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
