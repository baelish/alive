// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\xcc\xf2\x62\x72\xa3\x28\x76\xd0\x5e\x62\x68\x17\xeb\x4d\x8a\x2d\x90\x64\x81\x24\x45\x51\x18\x3e\xd0\xe2\x58\x66\x4b\x91\x06\x49\xd9\x96\x13\xff\xf7\x82\x94\xfc\x21\xa3\x6e\x0e\x91\x39\xf3\xe6\xcd\xbc\x19\x0e\x57\xdc\x82\x97\x25\x9a\xca\x3b\xc8\x60\x32\xed\xf5\x82\xc9\x99\xca\xe6\x08\x19\x68\x5c\xc3\xc3\x0a\xb5\x7f\x8d\x16\x4a\x6e\x30\x9c\xdc\x0d\x61\xa3\x5e\x83\x4a\x8d\x2e\xd1\x39\x5e\x04\xfc\xbc\xd2\xb9\x97\x46\xd3\x08\x63\xf0\xde\x03\x00\x08\x94\xd1\x70\x8f\x9e\x4b\x15\x32\xc5\x63\x2a\xb8\xe7\xa9\x5b\x2a\xe9\x69\x3f\xe9\xb3\x03\xd8\x73\x5b\xa0\x1f\x9b\x0d\x64\x20\x4c\x5e\x95\x01\x5c\xa0\x7f\x50\x18\x7e\x8e\xeb\xdf\x05\x3d\x25\x9c\x0c\xa6\x6c\x14\xa3\xf3\x05\xd7\x05\x7e\x53\x68\xfd\x23\xae\x50\xd1\x03\x55\xd2\x29\x61\x32\x9c\x9e\x19\x6e\x03\xc5\x6e\xd4\xeb\xf5\xf6\x22\x60\x66\x36\xdf\x95\xcc\xff\xa1\x52\x04\x29\xbb\x53\x5f\x59\xbf\xc9\x12\xe9\x41\xa3\x9c\x03\x05\x0f\x9f\x32\xd0\x95\x52\xb0\x37\x87\x3f\xdb\x36\xf2\x9e\xfb\x10\x10\xed\x3b\x40\xe5\xf0\x12\xa8\xc5\xc4\xff\x16\x7d\x65\x35\xd8\xa0\xff\xb7\x4a\xa9\xbf\x90\x5b\xca\xe0\x0a\x96\x5c\xd0\x68\x7d\x32\xda\x2f\xa2\x69\x98\xdc\x76\x3c\xf7\xbc\xa6\xac\xb1\x91\x37\x72\xea\xf9\x61\x2a\xeb\x5a\xdf\xb1\x86\xc8\x26\x75\xe5\xd1\x75\x53\xbc\x62\x6e\xb4\x68\x02\xba\x7d\x08\x10\x9d\xc0\x5a\x0a\xbf\x48\x60\xdb\xe8\xde\x42\x06\x5b\xf8\xf8\x80\xfe\xa0\x1f\xe6\xa2\x83\x38\xb8\x82\x7e\x3c\xb5\x8a\x74\xaa\x50\x17\x7e\x01\x5f\xb2\x26\x1c\xbe\x82\x86\xbb\xd8\x85\x6f\xd6\xf2\x9a\x36\xd6\xeb\x23\xf2\x0a\x86\x2c\xfd\xdb\x48\x4d\xb7\xa1\x3c\x3d\xea\xd6\x72\x61\xf8\x09\xa8\x70\x4a\xa0\xbd\xa7\x9d\x91\x4d\x08\x2f\x67\x68\x49\x42\x0a\x8b\xa8\x9b\x6f\x4d\x12\x62\x51\x90\x69\x2a\xb5\xc0\xcd\xcf\x39\x8d\x0c\x0c\xb2\x0c\xae\x87\x0c\xde\x1b\x46\xc8\xa0\x41\xb7\xa3\x6a\xd2\xa5\xb9\xe2\xce\x3d\x4a\xe7\x53\x8b\xa5\x59\x21\xdd\xa7\x80\x7d\x8e\x36\x2c\x81\x98\x85\xfd\x77\x30\x17\xa2\x4d\x7b\xea\x3f\x6e\x81\x1b\xd7\xdf\x03\xf8\x99\x97\x48\x49\xab\x8d\xb0\xc9\x20\x54\xad\xd1\xfe\x78\x7b\x7a\x84\x6c\x2f\xba\xdb\x29\x2b\x8b\x85\x7f\x95\x5b\x1c\xcb\x62\x6c\x36\xf4\x74\x53\xf9\x8a\x4b\xc5\x67\x0a\xff\x8c\xed\xcf\xe0\x89\xfb\x45\x3a\x57\xc6\x58\xba\x96\x5a\x98\x75\xc3\xdf\xb8\x6f\xe0\xd7\xe1\x2d\x83\xcf\xe1\x13\x29\xe2\xd0\x9a\xd5\xa5\x67\x54\x5f\x32\x18\x0e\x6e\x7f\x61\xf0\xf5\x2c\xc9\x5d\x30\xc7\xe8\x4b\xdb\xde\x9f\xc9\xe2\x7a\x66\x36\x7d\x96\x3a\x5f\x2b\x4c\xd7\x6d\x71\x87\x74\x57\x40\x96\x1b\xd2\x95\xc9\xc3\x55\x78\x36\x7f\x2c\x45\xd8\x2a\x29\x92\xf8\xd8\x1d\xe7\x4f\x7d\xbd\x44\x33\x3f\x3c\x81\x13\x29\xa6\xf0\x29\xcb\x80\x54\x5a\xe0\x5c\xea\x30\x1d\x78\x87\x5c\x21\xb7\x6f\x0d\x88\x9e\x82\xd9\x6e\x74\xf6\x68\xfd\xcf\x8b\x25\x45\x3b\xc9\xd3\x6c\x19\x38\xf4\x7b\xea\xc3\xf3\xc9\xde\x2f\xde\xe5\x78\x65\x12\x20\x0f\x2f\x2f\x3f\x5f\xee\xe0\xd9\x40\x15\xe5\x39\x98\x1b\x0b\x61\xc9\x03\x7f\x68\x87\x4b\x09\xdb\x35\x92\xe1\x33\x0c\x07\x83\x41\xd8\xdd\x7f\x03\x00\x00\xff\xff\x82\xa9\x52\x5f\xf3\x05\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 1523, mode: os.FileMode(420), modTime: time.Unix(1553444241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd2\xdb\x6e\xa3\x30\x10\x06\xe0\x7b\x9e\xc2\xd2\x6a\x2f\x41\x06\x96\x6c\xe3\x3c\x8d\xb1\x07\x63\xc5\x87\xc8\x4c\x1a\xda\xaa\xef\x5e\x35\x50\x70\x02\x39\xf4\x32\x93\xff\xff\x0c\x8c\xa5\x7e\xcd\x54\x00\x70\xe4\x23\x21\x84\x90\x9a\x8b\xbd\x0a\xfe\xe8\x64\x2a\xbc\xf1\x81\xfd\x29\x4b\x21\xca\x72\x97\x7c\x26\xc9\x77\x38\x80\xbc\x19\x15\x82\x52\x4a\xa7\x28\xb7\x35\x84\x9b\xe1\xa6\x79\x89\xc3\x2a\xc0\xdb\xcd\x2c\xcf\xb7\xb0\x15\x53\xb6\x37\x3c\x28\x18\xd3\x27\x2d\xb1\x65\x55\x4e\x0f\xfd\xee\x3c\x68\x41\xab\x16\xe3\x49\xe3\x1d\xa6\x9d\x7e\x07\x56\x80\x9d\x14\xf9\x8c\x52\x54\xff\x96\x4a\x9e\x55\x91\xb3\x64\xa2\xd2\xf3\x8c\xb4\x20\xf5\xd1\x3e\x80\xf2\x62\xb3\x06\xe5\x45\x4c\xad\x48\x51\xef\x37\x92\xec\x2c\x37\xe6\x81\xb4\x29\x96\x10\xcd\xfe\xc7\xce\x92\x99\x4b\xcf\x2b\xd2\x6a\x11\xfc\x7d\xa6\x5c\xd9\x3a\xbd\xf8\xd0\x4b\xa4\xbc\xde\xfa\x63\xa4\xf6\xfd\x48\x58\x1e\x94\x76\x69\x18\xf6\xfc\xd3\x1b\xa7\xb5\x47\xf4\x76\x1e\x37\xc6\x73\x64\x06\x1a\x1c\x7e\x23\xf4\x98\x72\xa3\x95\x63\x44\x80\x43\x08\xc3\x7c\xb8\xf7\xe4\xd4\x6a\x84\xf9\x4c\xad\xd2\xeb\x73\x19\xe1\x47\xf4\xe7\xc8\x21\x43\x8d\x06\x2e\x1f\xab\x36\x5e\xec\xd3\x0e\x79\x40\x46\xaa\xbf\xbb\xe5\x7f\xe0\xe4\x05\x62\xa1\xeb\xf8\x74\xa1\xe7\xf7\xdf\xd0\xb5\xf6\x28\x0f\xfd\xfb\xf6\x57\x00\x00\x00\xff\xff\x38\x14\xf0\xe4\x6b\x04\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1131, mode: os.FileMode(420), modTime: time.Unix(1551633529, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
