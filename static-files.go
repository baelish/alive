// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x6f\x1b\xbb\x11\x7e\xd7\xaf\x98\xc3\x87\xa3\xdd\xa3\xab\x53\xa4\x0f\x56\x36\x41\xec\xa6\x48\xdb\xd8\x0e\x6c\x07\x41\x11\x04\x05\xb5\x3b\xbb\x62\xb5\x22\x05\x92\xab\x8b\x13\xfd\xf7\x62\x48\xee\x45\xb6\x1c\x04\x68\x4e\x1e\x22\x89\x73\xfb\x66\x38\xf3\x0d\x3d\x99\xc0\x2d\x96\x8a\x67\x20\x72\xd0\x38\xda\x08\x23\xac\x90\x05\x54\x86\xfe\x9f\xf3\x74\x39\xc9\x95\xde\x72\x9d\xc1\xbc\xb2\x56\x49\x33\xee\x89\x1c\xa2\x3b\xab\x85\x2c\xa2\xad\x90\x99\xda\x8e\xd7\xa8\x73\xa5\x57\x5c\xa6\x38\x2e\xd0\xbe\x93\x56\x0b\x34\x17\xfb\xfb\xfd\x1a\x23\x26\xf9\x46\x14\xdc\x0a\x25\x59\xfc\x65\xfa\x75\x6c\xf7\x6b\x8c\x21\x49\x12\x60\x14\xe0\x3f\x21\x00\x8b\xbf\xf5\x00\x4a\x95\x3a\xd5\xb1\x76\xb8\xa2\x78\xd6\x3b\xf4\x7a\x3d\x07\xb4\x10\xc6\xa2\x86\xad\xb0\x0b\x98\xab\x1d\xe0\x06\xa5\x05\xa3\x2a\x9d\x62\xaf\xc4\xfa\x2b\x24\x20\x71\x0b\xef\x48\x7a\xe7\x4e\x22\x36\x71\xba\x66\xc2\xe2\x59\xcf\x6b\x8d\x95\x5c\xa1\x31\xbc\x20\xfd\xbc\x92\x29\x45\x8d\x9c\x5a\x0c\x84\x04\x82\xff\x04\xfe\x79\x77\x73\x3d\x5e\x73\x6d\xd0\xcb\xc7\x19\xb7\x3c\x9e\x39\x1d\xb3\x15\x36\x5d\x84\x73\x9f\x99\x37\x06\x48\xb9\x41\x60\x4b\xc4\x35\x2f\xc5\x06\xd9\x79\x38\x07\x68\xce\x28\xbd\xe6\x74\xae\x91\x2f\x9b\xdf\xde\xba\x5a\x67\xdc\xe2\x85\xda\x75\xac\x29\x53\xcb\x75\x81\xf6\x42\xed\x20\x81\x4c\xa5\xd5\x8a\xc2\x53\xe9\x4b\xa4\xaf\x17\xfb\x7f\x64\x01\x93\xc8\xba\x31\xe8\xee\x5a\xdb\xdf\x92\x04\x64\x55\x96\x2d\x66\x17\x79\xc1\x65\x81\x6f\x4b\xd4\xf6\x03\x6e\xb0\x6c\x0d\x86\xbe\x24\x63\x63\xb9\xad\x4c\xfd\xab\xe4\xc6\x5e\xf9\x52\x86\xa2\xd0\xbf\xc3\x71\x50\xaf\xba\xe2\xbb\xfb\x8b\x4f\x2e\x2e\x63\xc7\x51\x29\x2b\xad\xb6\x90\xb4\xb9\x75\x12\x32\x17\xfb\xcb\x92\x1b\x73\xcd\x57\x18\x31\xef\xc6\x75\x53\xc7\x83\x56\xdb\x63\x8b\x7b\x5e\x38\xfd\xbe\xcd\xfa\xae\xf3\x84\x94\xa8\xdf\xdf\x5f\x7d\x80\x04\xba\x80\x66\x1d\x2f\x4f\xc0\xba\x46\x9d\x12\x5a\x0a\x60\xec\xbe\xc4\x71\x26\xcc\xba\xe4\x7b\x48\x80\x49\x25\x91\x1d\x00\x4b\x83\xcf\x68\x58\x3e\x2f\x71\xa4\xd5\x96\x1d\x7e\x5c\x1d\xdc\xad\x85\xc6\xb7\x39\x35\xf9\xff\x5b\xa2\x8e\xaf\x5f\x51\xa7\x8e\xbb\xd3\xc5\xea\x62\xff\xb3\x2b\x76\x6a\x50\x32\x2c\xf1\xf1\xa0\x34\x67\x27\x47\xe1\x94\x17\x4f\x3a\x1f\x79\xd1\x9d\xd6\x27\x94\xd4\xf3\x78\x0e\x33\x4f\x4c\x34\x49\x56\xa9\xd2\x8a\x75\xaf\x26\x12\xe2\xa7\xf7\x6a\x83\x3a\xb2\x62\x5d\xdf\x62\x3b\xb8\x3f\x98\x5a\x16\x5c\x31\x1f\xc6\xeb\x1f\xdd\x08\xc5\xe9\x88\x3a\x75\x9b\x97\x2a\x5d\x32\x47\x98\x5d\x20\x37\x95\x8d\x7e\x31\x06\xc6\x9e\x81\xb0\x10\x59\x86\x92\xd5\xa4\x4d\xb5\x49\x4b\x91\x2e\x8f\x00\x5d\xd2\x49\x24\xb2\x1a\x54\x58\x23\x4d\xa1\x17\x1a\x73\x72\x36\x99\xab\xdd\x84\xc1\x00\x44\xd6\x59\x03\x2b\xb5\x41\xf2\xd2\xba\x6c\x2f\xba\xf6\xf9\x53\x69\xba\x7e\x68\x92\x58\x73\x8d\xd2\x5e\xab\x0c\xc7\xda\xc5\xb8\x5c\x88\x32\x0b\xe4\xd7\xae\xa1\x86\xbb\xdd\xc6\x21\xee\xfb\x17\x9f\xb5\x50\x3a\xd4\xde\x00\x49\x6d\x58\x49\x7f\xe3\x16\xa3\x98\x60\xdc\x8b\x15\xba\x46\xa2\x09\x0a\x5e\xe0\xf7\xdf\x21\x0a\x5f\x07\xf0\xd7\xe9\x74\x3a\x8d\xe1\x15\x59\xc7\xf0\xed\x69\x17\x02\xcd\x46\x50\x4f\x20\xb5\x3f\x9b\x35\xf3\xec\x3d\x9a\x73\xcd\x5c\xfe\xcf\xf0\xfd\x10\x58\xa1\x11\x25\x1b\x12\x11\xcd\x1c\xd6\x88\x36\x9c\xca\x61\xc9\x3d\x41\x55\x32\xc3\x5c\x48\xcc\x68\xd8\x21\x2d\x91\x6b\xca\x4c\x55\x36\x5a\xf2\x78\x06\x07\x32\x5b\x12\x3e\xe3\x73\x26\x89\xbb\xf2\x66\xe3\xc6\x2d\xc3\x3d\x0f\x44\x63\x46\x30\xde\xdd\xde\xde\xdc\x9e\xc3\xb5\x6a\xcb\x6c\xc0\x08\x99\x22\x50\x97\xac\xf6\xae\xac\xbe\x26\x31\x0c\x80\x8d\x43\x07\x1f\x86\xf0\x12\xfe\x80\x33\x2a\x69\x7d\x91\x1f\xb5\x90\x16\xac\x58\x21\x08\x09\xab\x3d\xac\x35\xe6\xa8\x35\x66\xe0\x1e\x33\xb6\xbd\xd4\xe0\xd8\x76\x87\x28\xf0\xa0\x5b\xa8\xf0\xdb\xd3\x3d\xaa\xbb\x77\x6e\x03\x8c\x40\x7a\xa7\x95\x6a\x5e\x71\x02\xb4\x95\x96\xa0\xe9\xf2\xfe\x5e\x95\xe5\xbf\x91\xeb\xc8\xa5\x34\xa2\x4c\xd7\x3c\x8b\x9c\xec\x4a\x49\xbb\x70\x82\xb3\xe1\x8b\x46\xde\xf8\x6f\xf4\x7c\x80\xa0\x72\x7f\xe4\xe2\xbd\xaa\xb4\x69\x64\xe7\x27\xcd\xaf\x84\xac\x2c\x1e\x6b\xb5\xd2\x3b\x4c\x95\xcc\xbc\xb4\xa9\x2e\xcf\x80\x83\x71\xcf\xc4\xb6\x90\x64\x22\x87\xb0\x15\x99\x5d\x0c\xe1\xc1\xd7\xeb\x01\x12\x78\x80\xef\xdf\xa1\x3f\xed\x53\x51\x25\x15\x05\x06\xd0\x77\xbf\x42\x25\xe4\xb8\x44\x59\xd8\x05\xbc\x4e\xbc\x39\xbc\x01\x09\xe7\xae\x7a\x6f\xb5\xe6\xfb\xc8\x9f\x8e\x5a\xcd\x01\x9c\xc5\xe3\xff\x2a\x21\xa3\x07\x02\x2d\x9b\x11\xbe\x74\x7d\x06\x9c\x1a\x0d\x4a\xea\x34\x50\x39\xf0\x63\x4e\x79\xb6\x19\xeb\xc7\x4f\x78\x3d\xd6\x77\xee\x06\xf9\x0b\xe3\xab\x39\x6a\x36\xac\x47\x87\x3e\xf7\x6c\xc8\xa4\xfa\xe4\x5e\x72\x6c\xe8\x7a\x99\x56\x6c\x86\xbb\x9b\x3c\xf2\xde\xfc\x73\x78\x74\x46\x53\xe4\x4f\x88\xfe\x9c\x6d\x68\x88\x40\x52\x29\x6d\xf8\x0f\xc2\xd8\xc0\x51\x51\x1d\xb0\x33\xac\x3e\x24\x74\x62\xfa\x01\x0a\x8f\xb3\x27\x9e\x78\x96\xd5\x30\x8e\x34\x9e\x7d\x7d\xf9\xc4\xd9\x93\xa7\x42\x10\xfc\x94\x13\x1a\x52\x0f\x2f\x3b\xe1\x68\x1f\xf8\x31\x5c\xd8\x15\x5f\x22\xcc\x45\xe1\x5e\xfd\x56\x41\x2e\x2c\x70\x03\x2b\x2e\xf7\x74\x5c\xa0\xb1\x24\x42\x43\xa7\x5b\x51\x96\x4e\xc3\x2e\x10\xd2\x4a\x13\xab\xd7\x1b\xa6\xbd\x5e\x2d\x8a\x85\xbd\x13\x0f\x78\x21\x0a\x5a\x1c\xdd\xd1\xe6\x1b\x2e\x4a\x7a\x82\x7c\x76\x2d\x95\xc0\x15\xb7\x8b\x71\x5e\x2a\xa5\xa3\xfa\x4f\x1e\x07\xd7\xcb\x47\x7f\x99\xc6\x30\x81\x97\x67\x2f\x62\xf8\x83\x3e\x66\x8d\x27\xd7\x93\xfe\x95\x1e\x3d\xf2\xfa\x3a\xf1\x16\x6f\x1e\x85\x3b\x6f\x1c\x3c\x47\xe0\xfd\xb9\x28\x46\x73\xb5\xeb\xc7\xe1\xe5\xb4\x0d\x30\x9b\x68\x03\x60\xeb\x1d\x6b\x61\xe4\x55\x59\x7e\x0e\x42\x34\xa7\x77\xc3\xd1\xf5\xf4\xc9\xc2\xb9\xeb\x87\x9e\xc8\x95\x86\x88\x7c\x09\x48\x60\x3a\x03\x01\xaf\x1e\xb9\x0d\x63\x37\x03\x31\x18\x74\x89\xf0\x58\xeb\x8b\xf8\xfa\x08\x75\xd4\xc0\x1e\x81\x67\x97\x06\xfb\xa1\x77\xe8\xfd\x2f\x00\x00\xff\xff\x8c\x09\x91\x2d\xa3\x0e\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 3747, mode: os.FileMode(420), modTime: time.Unix(1580056517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xd1\x52\xe3\x3a\x0c\x7d\xef\x57\x68\x60\x78\xe9\x34\x6d\xda\x50\x2e\x84\xa7\x7b\xe7\xfe\xc1\x2e\xfb\xae\xc4\x4a\xea\xc5\xb1\x33\xb6\x02\xed\x32\xfc\xfb\x4e\xe2\xa4\x4d\x4b\x02\x4b\xd9\x47\x9f\x4a\xc7\xd6\xd1\x89\xd4\xc5\x14\x14\x3a\x7e\x28\x05\x32\x41\xaa\xd0\x39\x80\xe9\x62\x52\xce\x0f\xb0\x80\x97\x09\x00\x40\x66\x34\x07\x4e\xfe\xa2\xf8\x3a\xbc\xba\x6f\xa0\x02\x6d\x2e\x75\x90\x28\x93\x3e\x06\xa4\x45\x0c\x58\xb1\x19\xf8\xcd\x31\x5a\xee\xff\x5a\x1a\x27\x59\x1a\x1d\x03\x26\xce\xa8\x8a\xc9\xe3\x56\xe6\x1b\x8e\x21\x2a\xb7\xfe\x9c\x18\x66\x53\xc4\xb0\xac\x81\xd7\xc9\x44\xc8\xa7\x4b\xc7\xc8\x95\x0b\x12\xb4\xf0\xee\x33\xe1\x9f\xf5\x55\x93\x34\x2f\x64\x6a\xcd\x50\xb0\x90\xae\x54\xb8\x8b\x41\x1b\x4d\x3e\x56\x7c\x26\xd8\x15\xa8\xd4\x9f\xc5\x4e\x16\x53\x28\xc8\x39\xcc\x3b\xa1\x1b\x9d\x3b\xe8\xf4\xf1\x37\xe7\x6a\x1c\xce\xd7\x54\x1c\x95\x7d\x7c\xc5\x3b\x25\x7f\x14\x58\x97\xc0\x92\x55\xaf\x80\xb9\x3f\xbf\x7c\xc1\x0e\x03\x5d\xed\x93\x1e\x39\xe0\xa4\xc1\xcb\xb0\x53\x49\x51\xd6\xb7\xcd\x90\xbd\xda\x02\x1c\x31\x4b\x9d\x83\xa0\x0c\x2b\xc5\x0d\x1d\x64\x58\x48\xb5\x6b\x3a\x32\x83\xc4\x88\xdd\x0c\x18\x93\xfa\x0d\xcd\x6d\xfe\xe7\x18\x2e\xfe\xa7\x9f\xf8\x54\xc1\x37\xd4\xee\x62\x06\x3f\xc8\x0a\xd4\x38\x03\x87\xda\x05\x8e\xac\xcc\xee\xdb\x5b\x12\xb3\x85\xd4\x28\x63\xbd\x54\xe4\xc5\xca\x2d\x91\xee\xea\xc2\xf4\x31\xb7\xa6\xd2\x22\x68\x02\xe3\xcb\x28\x4a\xd3\x28\xf2\x2d\xb1\x24\x66\x30\xd7\xa6\xfd\x32\xc7\x52\xd2\x34\x0c\xc3\xd0\xa7\x60\x91\x90\x1d\x8d\xcc\xb2\xdb\x7d\x64\x6e\x69\x37\x1a\x88\xcb\x3b\xba\x4b\xf7\x72\xd5\x85\xd4\x62\x1f\xd5\xb1\x55\x68\x07\x3c\xbb\xaa\x8d\x57\x43\x1b\x6a\x3e\xe3\xf5\x32\xec\x1a\xf2\x2c\x05\x6f\x3a\xa0\xf1\xdc\x30\xc5\xd2\xbb\xb7\x47\xb2\x5a\x5f\x8f\x92\x9c\xcd\xd1\x02\xde\xfc\x24\x64\x55\x0c\xb0\x2c\x57\xa7\x3c\xcb\xd5\xcd\x28\xcf\x57\x68\x5a\xa0\x79\x8e\x1f\x29\xa7\x34\xe1\xfc\xf6\x84\xe4\x66\x35\xca\x71\x2e\x85\x3f\xf7\x26\xc2\xc7\x14\x51\x38\x46\x71\x2e\x43\xb4\xef\xae\x9f\x08\x6f\x15\x3d\x21\x80\x7d\xc6\xfe\xc3\xeb\x59\xb5\x3e\x7b\x06\xef\x6f\x78\xde\xc8\x6e\xd9\x64\xca\x20\xc7\xf5\xe8\x38\x9e\x51\x7e\xe2\xec\xc5\x69\x61\xbf\x9a\x56\x6f\x47\x8c\x25\x85\x2c\x9f\x5a\x52\xa6\x2d\x07\xa8\x64\xae\x63\x48\x49\x33\x59\x5f\x4d\x22\xf3\xe0\xf0\x18\xcf\xd9\x1b\x81\xcd\x7a\xc0\xed\xf7\xff\x1e\x8e\xb6\x83\x47\xc6\x06\xf2\x62\x0a\xb4\x2d\xa5\xa5\x7f\x33\x26\xdb\x4f\xec\xc3\xef\x64\x4b\x9d\x99\x76\xd2\xd5\x62\xf5\x8e\x63\x9a\x95\x28\x84\xd4\x79\xe0\x07\xee\xba\xeb\x95\xcf\xec\xb6\x5f\x5f\x03\x2f\xef\x21\x66\x33\x10\xd3\x48\x7b\x58\x31\xc6\x28\x96\x65\x7f\xc9\xb4\xc8\x67\x36\xc2\xdf\xff\x6f\xe2\xfd\xd9\x5e\xf1\x3a\xf9\x1d\x00\x00\xff\xff\xe7\x87\xbc\xcd\x3c\x09\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 2364, mode: os.FileMode(420), modTime: time.Unix(1580044304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
