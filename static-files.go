// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x6f\xdb\x38\x13\x7d\xf7\xaf\x98\xf2\xa1\x96\x6a\x5b\x76\xfa\xa1\xdf\x43\x1c\xb5\x68\xb2\x05\xda\xdd\x26\x29\x92\x14\x7d\x28\x8a\x05\x2d\x8d\x64\xae\x69\x52\x20\x29\x5f\xd2\xfa\xbf\x2f\x78\x91\x25\xe7\x52\x04\x68\xb7\x0f\x8d\x4d\x0e\xcf\x9c\x19\xce\x9c\xa1\xc7\x63\xb8\x42\x2e\x69\x0e\xac\x00\x85\xa3\x15\xd3\xcc\x30\x51\x42\xad\xed\xff\x33\x9a\x2d\xc6\x85\x54\x6b\xaa\x72\x98\xd5\xc6\x48\xa1\x93\x1e\x2b\x20\xba\x36\x8a\x89\x32\x5a\x33\x91\xcb\x75\x52\xa1\x2a\xa4\x5a\x52\x91\x61\x52\xa2\x79\x27\x8c\x62\xa8\x4f\xb7\x37\xdb\x0a\x23\x22\xe8\x8a\x95\xd4\x30\x29\x48\xfc\x75\xf2\x2d\x31\xdb\x0a\x63\x48\xd3\x14\x88\x75\xf0\x77\x70\x40\xe2\xef\x3d\x00\x2e\x33\x67\x9a\x28\xc7\x2b\x8a\xa7\xbd\x5d\xaf\xd7\x73\x44\x4b\xa6\x0d\x2a\x58\x33\x33\x87\x99\xdc\x00\xae\x50\x18\xd0\xb2\x56\x19\xf6\x38\x36\x1f\x21\x05\x81\x6b\x78\x67\x77\xaf\xdd\x4a\x44\xc6\xce\x56\x8f\x49\x3c\xed\x79\xab\x44\x8a\x25\x6a\x4d\x4b\x6b\x5f\xd4\x22\xb3\x5e\x23\x67\x16\x83\x65\x02\x01\x3f\x85\x3f\xaf\x2f\x2f\x92\x8a\x2a\x8d\x7e\x3f\xc9\xa9\xa1\xf1\xd4\xd9\xe8\x35\x33\xd9\x3c\xac\xfb\xc8\xfc\x61\x80\x8c\x6a\x04\xb2\x40\xac\x28\x67\x2b\x24\xc7\x61\x1d\x60\xbf\x66\xc3\xdb\xaf\xce\x14\xd2\xc5\xfe\xbb\x3f\x5d\x57\x39\x35\x78\x2a\x37\x9d\xd3\x36\x52\x43\x55\x89\xe6\x54\x6e\x20\x85\x5c\x66\xf5\xd2\xba\xb7\xa9\xe7\x68\x3f\x9e\x6e\x3f\xe4\x81\x13\xcb\xbb\x3e\xec\xdd\xb5\x67\x9f\xa5\x29\x88\x9a\xf3\x96\xb3\xf3\x3c\xa7\xa2\xc4\xb7\x1c\x95\xf9\x88\x2b\xe4\xed\x81\xa1\x4f\x49\xa2\x0d\x35\xb5\x6e\xbe\x71\xaa\xcd\xb9\x4f\x65\x48\x8a\xfd\xb7\x3b\x74\xea\x4d\x97\x74\x73\x73\xfa\xd9\xf9\x25\xe4\xd0\xab\x8d\x4a\xc9\x35\xa4\x6d\x6c\x9d\x80\xf4\xe9\xf6\x8c\x53\xad\x2f\xe8\x12\x23\xe2\x61\x5c\x35\x75\x10\x94\x5c\x1f\x9e\xb8\xa1\xa5\xb3\xef\x9b\xbc\xef\x2a\x8f\x09\x81\xea\xfd\xcd\xf9\x47\x48\xa1\x4b\x68\xda\x41\xb9\x47\xd6\x15\xea\xc4\xb2\xb5\x0e\xb4\xd9\x72\x4c\x72\xa6\x2b\x4e\xb7\x90\x02\x11\x52\x20\xd9\x01\x72\x8d\x8f\x58\x18\x3a\xe3\x38\x52\x72\x4d\x76\x3f\xcf\x0e\x6e\x2a\xa6\xf0\x6d\x61\x8b\xfc\x57\x53\xd4\xc1\xfa\x1d\x79\xea\xc0\x3d\x9c\xac\x2e\xf7\xff\x3a\x63\x0f\x35\x4a\x8e\x1c\xef\x36\xca\x7e\xed\xc1\x56\x78\x08\xc5\x8b\xce\x27\x5a\x76\xbb\xf5\x9e\x24\xf5\x3c\x9f\xdd\xd4\x0b\x93\xed\x24\x23\x25\x37\xac\xea\x35\x42\x62\xf5\xe9\xbd\x5c\xa1\x8a\x0c\xab\x9a\x5b\x6c\x1b\xf7\x27\x5d\x4b\x02\x14\xf1\x6e\xbc\xfd\xc1\x8d\x58\x3f\x9d\xad\x4e\xde\x66\x5c\x66\x0b\xe2\x04\xb3\x4b\xe4\xb2\x36\xd1\x6f\xe6\x40\xc8\x23\x14\xe6\x2c\xcf\x51\x90\x46\xb4\x6d\x6e\x32\xce\xb2\xc5\x01\xa1\x33\xbb\x12\xb1\xbc\x21\x15\xc6\xc8\x3e\xd1\x73\x85\x85\x05\x1b\xcf\xe4\x66\x4c\x60\x00\x2c\xef\x8c\x81\xa5\x5c\xa1\x45\x69\x21\xdb\x8b\x6e\x30\x9f\x14\xa6\xab\x87\x7d\x10\x15\x55\x28\xcc\x85\xcc\x31\x51\xce\xc7\xd9\x9c\xf1\x3c\x88\x5f\x3b\x86\xf6\xda\xed\x26\x8e\xd5\xbe\xbf\xe8\xb4\xa5\xd2\x91\xf6\x3d\x91\xcc\x84\x91\xf4\x07\x35\x18\xc5\x96\xc6\x0d\x5b\xa2\x2b\x24\xdb\x41\x01\x05\x9e\x3f\x87\x28\x7c\x1c\xc0\xff\x27\x93\xc9\x24\x86\x13\x7b\x3a\x86\xef\xf7\xab\x10\x6c\x6f\x04\xf3\x14\x32\xf3\xd4\xa8\x89\x57\xef\xd1\x8c\x2a\xe2\xe2\x7f\x44\xef\x87\x40\x4a\x85\x28\xc8\xd0\x0a\xd1\xd4\x71\x8d\xec\x84\x93\x05\x2c\xa8\x17\xa8\x5a\xe4\x58\x30\x81\xb9\x6d\x76\xc8\x38\x52\x65\x23\x93\xb5\x89\x16\x34\x9e\xc2\xce\x1e\x5b\x58\x7e\xda\xc7\x6c\x77\xdc\x95\xef\x27\x6e\xdc\x2a\xdc\xe3\x44\x14\xe6\x96\xc6\xbb\xab\xab\xcb\xab\x63\xb8\x90\x6d\x9a\x35\x68\x26\x32\x04\x5b\x25\xcb\xad\x4b\xab\xcf\x49\x0c\x03\x20\x49\xa8\xe0\xdd\x10\x5e\xc1\x0b\x38\xb2\x29\x6d\x2e\xf2\x93\x62\xc2\x80\x61\x4b\x04\x26\x60\xb9\x85\x4a\x61\x81\x4a\x61\x0e\xee\x31\x63\xda\x4b\x0d\xc0\xa6\xdb\x44\x41\x07\xdd\x40\x85\x67\xf7\xe7\xa8\xea\xde\xb9\x09\x34\x82\xe8\x3d\x6c\xd4\xe8\x8a\xdb\x40\x53\x2b\x01\x2a\x31\xf2\xc3\xf5\x65\x78\x6d\xb5\xd4\x69\x0e\x14\xb4\x5b\x6d\x59\x56\x34\x8f\xc4\x10\xd6\x2c\x37\xf3\x21\xdc\x7a\x32\xb7\x90\xc2\x2d\xfc\xf8\x01\xfd\x49\xdf\x32\x16\xd6\x23\x0c\xa0\xef\xbe\x05\x37\x22\xe1\x28\x4a\x33\x87\xd7\xa9\x3f\x0e\x6f\x40\xc0\xb1\xa3\xf6\x56\x29\xba\x8d\xfc\xea\xa8\xb5\x1c\xc0\x51\x9c\xfc\x23\x99\x88\x6e\x6d\xa6\xc5\xbe\x3f\xce\xdc\x25\x02\xb5\xb7\x08\xdc\x5e\x23\xc8\x02\xe8\x61\xc3\x3e\x7a\xd3\xcd\xcb\x22\x3c\xcd\x9a\x84\xba\x2e\xf9\x4a\xe8\x72\x86\x8a\x0c\x9b\xba\xb4\x7f\xb7\x64\x48\x84\xfc\xec\x9e\x49\x64\xe8\x0a\xc5\xce\xaf\x1c\x37\x97\x45\xe4\xd1\xfc\x5b\x73\x74\x64\x4b\xd4\xaf\x58\x6d\x71\x67\x43\xb6\x83\x02\x64\x76\x7c\x7e\x64\xda\x04\x01\x88\x1a\x87\x9d\x4e\xf0\x2e\xa1\xe3\xd3\x57\x67\x78\xf9\xdc\x43\xa2\x79\xde\xd0\x38\xb0\x78\xf4\x69\xe3\x03\x27\xf7\xe6\x70\xd8\x78\x12\x88\xed\x00\x4f\x2f\x7f\x00\xc8\x17\xf3\xd3\xe8\x54\x0a\x57\x4c\xd6\x3a\xbc\xef\xf4\x3d\xb8\x50\xca\xe4\xa4\xe6\xaf\x3b\x3d\xe8\xba\xef\xd8\x75\xa5\x8f\x3e\x31\xf2\x73\x55\xa1\x3a\xa3\x3a\xec\x42\xe4\xec\xc3\x1b\x7c\x00\x24\x3e\x19\x7b\x90\x80\xf9\x6b\xd4\x9a\x7a\x3c\xa7\x0b\x84\x19\x2b\xdd\x2f\x06\x23\xa1\x60\x06\xa8\x86\x25\x15\x5b\xbb\x5c\xa2\x36\x76\x0b\xb5\x5d\x5d\x33\xce\x9d\x85\x99\x23\x64\xb5\xb2\x13\xa1\x99\x4e\x6d\xf5\x2a\x56\xce\xcd\x35\xbb\xc5\x53\x56\xda\xa1\xd3\x95\x05\xba\xa2\x8c\xdb\xe7\xcb\x17\xd7\x31\x29\x9c\x53\x33\x4f\x0a\x2e\xa5\x8a\x9a\x9f\x4b\x8e\xa3\xdf\x1f\xfd\x6f\x12\xc3\x18\x5e\x1d\xbd\x8c\xe1\x85\xfd\x33\xdd\x23\xb9\x96\xf3\x2f\xfc\xe8\x0e\xea\xeb\xd4\x9f\x78\x73\xc7\xdd\xf1\x1e\xe0\x31\xf1\xef\xcf\x58\x39\x9a\xc9\x4d\x3f\x0e\xaf\xae\x75\xa0\xb9\xf7\x36\x00\x52\x6d\x48\x4b\xa3\xa8\x39\xff\x12\x36\x51\x3f\x3c\x57\x0e\x2e\xa6\x6f\x4f\x38\xb8\x7e\xa8\xb1\x42\x2a\x88\x2c\x16\x83\x14\x26\x53\x60\x70\x72\x07\x36\xa8\xca\x14\xd8\x60\xd0\x15\xd1\x43\xab\xaf\xec\xdb\x1d\xd6\xd1\x9e\xf6\x08\x5e\xc6\x07\xdc\x77\xbd\x5d\xef\xdf\x00\x00\x00\xff\xff\x2d\xed\x55\x7b\xdf\x0e\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 3807, mode: os.FileMode(420), modTime: time.Unix(1700428608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xd1\x72\xa3\x3a\x0c\x7d\xcf\x57\x68\xda\xe9\x4b\x26\x24\x24\x69\x7a\x5b\xfa\x74\xef\xdc\x3f\xd8\xed\xbe\x0b\x2c\x88\xb7\xc6\x66\x6c\x91\x26\xdb\xe9\xbf\xef\x80\x21\x25\x14\xda\x6d\xba\x8f\x3e\x48\xc7\xd2\x91\x2c\xb1\x98\x82\x42\xc7\x0f\x85\x40\x26\x48\x14\x3a\x07\x30\x5d\x4c\x8a\xf9\x2b\x2c\xe0\x79\x02\x00\x90\x1a\xcd\x81\x93\xbf\x28\xba\x0e\xaf\xee\x6b\x28\x47\x9b\x49\x1d\xc4\xca\x24\x8f\x01\x69\x11\x01\x96\x6c\x06\xbe\x39\x46\xcb\xdd\xaf\x85\x71\x92\xa5\xd1\x11\x60\xec\x8c\x2a\x99\x3c\x6e\x65\xb6\xe5\x08\xd6\xc5\xde\x9f\x63\xc3\x6c\xf2\x08\x96\x15\xf0\x32\x99\x08\xb9\xbb\x74\x8c\x5c\xba\x20\x46\x0b\xef\x86\x09\xff\x6c\xae\x6a\xa7\x79\x2e\x13\x6b\x86\x8c\x85\x74\x85\xc2\x43\x04\xda\x68\xf2\xb6\xe2\x33\xc6\x2e\x47\xa5\xfe\xcc\x76\xb2\x98\x42\x4e\xce\x61\xd6\x0a\x5d\xeb\xdc\x42\xfd\xe0\x6f\xce\xd5\x38\x9c\x6f\x28\x3f\x49\xfb\xf4\x8a\x77\x52\xfe\xc8\xb0\x4a\x81\x25\xab\x4e\x02\x73\x7f\x7e\xfe\x42\x3b\x0c\x54\xb5\x4b\x7a\xd2\x01\xbd\x02\x2f\xc3\x56\x25\x45\x69\xb7\x6d\x86\xda\xab\x49\xc0\x11\xb3\xd4\x19\x08\x4a\xb1\x54\x5c\xd3\x41\x8a\xb9\x54\x87\xba\x22\x33\x88\x8d\x38\xcc\x80\x31\xae\x62\xa8\x6f\xf3\x9f\x23\xb8\xf8\x9f\x7e\xe2\xae\x84\x6f\xa8\xdd\xc5\x0c\x7e\x90\x15\xa8\x71\x06\x0e\xb5\x0b\x1c\x59\x99\xde\x37\xb7\xc4\x66\x0f\x89\x51\xc6\x7a\xa9\xc8\x8b\x95\x59\x22\xdd\xe6\x85\xc9\x63\x66\x4d\xa9\x45\x50\x1b\x46\x97\xeb\x75\x92\xac\xd7\xbe\x24\x96\xc4\x0c\xe6\xda\x34\x2f\x73\xcc\x25\x49\xc2\x30\x0c\xbd\x0b\xe6\x31\xd9\x51\xcb\x34\xbd\x3d\x5a\x66\x96\x0e\xa3\x86\xb8\xbc\xa3\xbb\xe4\x28\x57\x95\x48\x25\xf6\x49\x1e\x7b\x85\x76\xa0\x67\x57\x55\xe3\x55\xd0\x96\xea\x67\xbc\x59\x86\x6d\x41\x9e\xa4\xe0\x6d\x0b\xd4\x3d\x37\x4c\xb1\xf4\xdd\xdb\x21\x59\x6d\xae\x47\x49\xce\xe6\x68\x00\xdf\xfc\x24\x64\x99\x0f\xb0\x2c\x57\x7d\x9e\xe5\xea\x66\x94\xe7\x2b\x34\x0d\x50\x87\xe3\x47\x4a\x9f\x26\x9c\xdf\xf6\x48\x6e\x56\xa3\x1c\xe7\x52\xf8\x73\x67\x22\x7c\x4c\xb1\x0e\xc7\x28\xce\x65\x58\x1f\xab\xeb\x27\xc2\x5b\x45\x7b\x04\x70\xf4\x38\x3e\xbc\x4e\xab\x56\x67\xcf\xe0\xfb\x1b\x9e\xb6\xb2\x5d\x36\xa9\x32\xc8\x51\x35\x3a\x4e\x67\x94\x9f\x38\x47\x71\x1a\xd8\xaf\xa6\xd5\xdb\x11\x63\x49\x21\xcb\x5d\x43\xca\xb4\xe7\x00\x95\xcc\x74\x04\x09\x69\x26\xeb\xb3\x89\x65\x16\xbc\x06\xe3\x39\x3b\x23\xb0\x5e\x0f\xb8\xff\xfe\xdf\xc3\xc9\x76\xf0\xc8\xd8\x40\x5e\x4c\x81\xf6\x85\xb4\xf4\x6f\xca\x64\xbb\x8e\x5d\xf8\x1d\x6f\xa9\x53\xd3\x4c\xba\x4a\xac\xce\x71\x4c\xb3\x02\x85\x90\x3a\x0b\xfc\xc0\xdd\xb4\xb5\xf2\x9e\xed\xf6\xeb\x6a\xe0\xe5\x7d\xb5\xd9\x0e\xd8\xd4\xd2\x7a\xfe\x1d\x59\x96\x09\xaa\xf6\x13\x9b\xa2\xe3\x5d\xb6\x6d\xdd\x86\x21\xb5\x92\x9a\x8e\xbb\xaf\x57\x32\x36\xc5\x5b\xb0\x5d\x28\x6d\xd7\x54\x4b\xcd\x18\xc5\xb2\xe8\xae\xb5\x06\xf9\xcc\x0e\xfa\xfb\x7f\x43\xfe\x45\x34\x57\xbc\x4c\x7e\x07\x00\x00\xff\xff\x8b\xbb\xec\x97\xae\x09\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 2478, mode: os.FileMode(420), modTime: time.Unix(1700425573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
