// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\xc5\x64\x4a\x32\x92\x29\xa5\x3b\xed\x83\x65\xa5\x13\x7b\x33\xd3\xee\x26\x71\x27\x76\xa6\x0f\x99\xcc\x06\x22\x8f\x28\x44\x14\xc0\x01\xa0\x9b\x5d\xfd\xf7\x9d\x03\x80\x17\xa9\x52\xeb\x6d\xbb\xf5\x83\x45\xe2\x5c\x71\xf0\x9d\x0b\x38\x7c\x0e\x5f\xcc\x5c\x48\x0b\x68\xd6\xa8\x8d\x50\xf2\x12\xbe\x83\xe7\xc3\x5e\x6f\x38\x84\xf7\x58\x2a\x9e\x83\x98\x81\xc6\x8b\xb5\x30\xc2\x0a\x59\xc0\xca\xd0\xff\x29\xcf\x16\xc3\x99\xd2\x1b\xae\x73\x98\xae\xac\x55\xd2\xa4\x3d\x31\x83\xf8\xce\x6a\x21\x8b\x78\x23\x64\xae\x36\x69\x85\x7a\xa6\xf4\x92\xcb\x0c\xd3\x02\xed\x6b\x69\xb5\x40\x73\xbd\xbb\xdf\x55\x18\x33\xc9\xd7\xa2\xe0\x56\x28\xc9\x92\x8f\xa3\x4f\xa9\xdd\x55\x98\xc0\x64\x32\x01\x46\x06\xfe\x13\x0c\xb0\xe4\xb1\x07\x50\xaa\xcc\xb1\xa6\xda\xf9\x15\x27\xe3\xde\xbe\x17\x1c\x2d\x84\xb1\xa8\x61\x23\xec\x1c\xa6\x6a\x0b\xb8\x46\x69\xc1\xa8\x95\xce\xb0\x57\x62\xfd\x08\x13\x90\xb8\x81\xd7\x44\xbd\x73\x2b\x31\x1b\x3a\x5e\x33\x64\xc9\xb8\xe7\xb9\x52\x25\x97\x68\x0c\x2f\x88\x7f\xb6\x92\x19\x59\x8d\x1d\x5b\x02\xe4\x89\xd7\x3e\x81\x7f\xdd\xdd\xbe\x4b\x2b\xae\x0d\x7a\x6a\x9a\x73\xcb\x93\x71\x0f\xc0\x6c\x84\xcd\xe6\x61\xd5\xef\x8a\x04\x01\x32\x6e\x10\xd8\x02\xb1\xe2\xa5\x58\x23\xbb\x74\xab\x00\xcd\x0a\x6d\x2b\xac\x4d\x35\xf2\x45\x78\xf3\x72\xab\x2a\xe7\x16\xaf\xd5\xb6\x91\xa3\x88\x43\x88\x75\x13\xa0\x8a\xdb\xb9\xe4\x4b\xf4\x91\x1c\x32\xf8\xe5\x97\xdf\xe6\xf9\x3c\x9c\xaa\xed\xf0\xd9\xa3\xf7\x57\xe4\xfb\xcf\xb5\xbf\xf4\xd7\x58\x0d\x31\x18\x07\xca\xfe\xbc\xa3\x39\x96\xf8\xf7\x3b\xda\x58\x8d\x6b\xfa\x53\x7c\xcd\x34\xfe\xa1\xa0\x76\x2d\x37\x3a\x82\x65\x3e\xb3\xa8\x07\x1e\x28\xe9\x54\x6d\x9f\xe2\x87\x87\xf5\x4f\xbc\x68\x51\x71\x02\xf2\xa4\x62\x3f\xf6\xb8\xbf\x56\x5b\xb0\x4a\x95\x56\x54\xbd\x1a\xa7\x04\xff\x1f\xd4\x1a\x75\x6c\x45\xe5\x5d\x24\xfc\x5b\xae\x0b\x24\xcc\xe6\x2a\x5b\x2d\xc9\x2b\xca\xc6\x12\xe9\xf1\x7a\xf7\x63\x1e\xb3\xa0\x88\x39\x1b\x9e\x3d\x15\x52\xa2\xfe\xe1\xfe\xed\x1b\x98\x80\x15\x55\x87\x92\x0b\x53\x95\x7c\x07\x94\xa9\xa5\xca\x16\xcc\x27\x63\xd7\x8b\xdb\x95\x8d\xff\x4a\x07\x18\x3b\x6d\x7f\x2e\xf2\x1c\x25\x6b\xaa\x01\x45\x25\x2b\x45\xb6\x38\xf0\xe6\x86\x56\x62\x91\x7b\x8f\x8e\x0f\x77\xae\x71\x46\xba\x1c\xbc\x18\xf4\x41\xe4\x8d\xbe\x1b\x77\xb6\xa4\xa3\x55\xd8\x9e\x77\x38\x69\x3a\xe3\x76\xaf\xc2\x96\x48\xce\x12\x90\xa6\x6a\x5b\x7b\xfb\x8e\x2f\x9b\x42\xe0\x78\x60\x02\x47\x64\x77\xc0\x80\xa5\xc1\x13\x7c\xb2\x66\xe8\x05\x43\xb9\x58\xdf\x28\x69\x7d\x35\xfa\xec\xf8\xaf\x72\xb1\x06\x25\x5d\x00\x26\x51\xb3\x71\x3b\x17\x86\xf2\x21\x02\x25\x97\x6a\x65\x90\x20\xe2\xe8\x1e\x2c\xec\xd9\x63\x6d\x61\xcf\x3a\x5c\x2b\xeb\x98\xdc\x59\x46\x20\xf2\x49\xe4\x19\x45\xbe\x8f\x20\x2b\xb9\x31\xf5\x8a\xb1\xdc\xae\xcc\x1e\xc2\x9b\x78\xc0\x3d\x39\x1d\xbd\x6c\x92\xe4\xaa\xaa\x25\xdc\xa6\xa2\x97\xcf\x1e\xdd\xc3\xfe\x6a\x58\x9d\xe2\x0a\x45\x98\xf8\x48\x65\xc9\x8d\x7d\xeb\x97\xce\x49\x10\xcb\x07\x57\xad\xf2\xae\x94\x5f\x3a\x6b\x86\x6f\xef\xaf\x3f\xd4\xfc\xfe\xed\x1c\x2f\x6e\x2b\xa1\xf1\x15\x9d\x79\x2d\xd0\x59\x6a\xa5\xae\x86\xb9\x58\xd3\xe3\xe7\x71\x7d\x56\x95\xc6\x0c\x73\x21\x0b\xc2\xe7\xf9\x34\x70\x78\x72\x29\xd0\x15\x48\x85\x34\xa8\xed\xab\xfc\x0b\xcf\x50\x5a\xca\x88\x98\x39\xd6\xd7\x32\x67\x83\x0e\x10\xba\x5d\x71\xa9\xd6\x47\xb8\x6d\x2b\x64\x9d\x09\x4f\xca\xcd\x50\x48\x43\xee\x55\x5c\xa3\xb4\xef\x54\x8e\xa9\x76\x36\x6e\xe6\xa2\xcc\x63\x4f\x6d\xed\xfb\xa8\x1f\xda\x3f\x6e\x25\x47\x2e\xfc\x76\x68\x3a\x45\x3d\xe4\x56\x2b\xf5\xd5\x64\x02\x72\x55\x96\x4d\x9f\x9d\x73\x59\xe0\xab\x12\xb5\x7d\x83\x6b\x2c\x5b\xd6\xba\x2a\x7b\xbc\xd6\x6f\x1d\x70\x25\x4d\x8a\x91\x09\x4f\xf6\xa8\xa8\x95\x93\xc3\x5a\x6d\xa8\x28\xd6\x5a\x3b\xbe\x9a\xeb\xdd\x0d\xa1\x85\xd2\x39\x66\x5e\xd2\x8d\x37\xbe\x07\x68\xb5\x39\x64\xbe\xe7\x85\x63\x8d\x6c\x1e\xb9\x29\xa8\x5b\xf4\xba\xe6\xbd\xfc\xb1\x53\xbe\x1f\x8d\x58\x02\x8f\xa4\xda\xd8\x5d\x89\xdd\xf2\x28\x95\x44\x36\xae\x6b\xca\x49\x16\xcb\xa7\x25\x5e\x68\xb5\x61\xe3\xfd\xaf\xf7\xde\x01\xf8\x1f\x09\x40\x47\xfc\x4f\x46\xa1\xa3\xe9\x38\x14\x1d\xd2\xff\x23\x1e\x01\xd1\xcd\x90\xe6\x46\x4a\x82\xcc\xbf\xf9\xb8\x05\x77\x67\x86\x6b\x70\x9d\xd9\x30\x73\xfe\x93\x5b\x8c\x13\xda\xf3\xbd\x58\xa2\xef\xe4\x6e\xce\xf0\x6a\xe0\xeb\xaf\x21\x0e\x8f\x7d\xf8\x6e\x34\x1a\x8d\x12\xb8\x22\xf1\x04\x1e\x4f\xcc\x01\xe4\x57\x60\x9f\x40\x66\xc7\x4f\xee\xb2\x1e\xf6\x17\x53\xae\x0f\x1a\xad\xab\x6f\x6f\x84\xb1\x21\xa5\x63\xc6\x97\x53\xd4\x6c\xc0\x0a\x8d\x28\xfd\xef\x8e\x0d\x98\x54\x3e\xaf\xd9\x80\x69\xcc\xcf\xe8\xe0\x79\x1e\x07\xc1\x2e\xc3\xd9\x1c\xf1\x89\xc7\x7e\x75\xee\xbe\xe5\x8b\x59\x4c\x23\xb4\x9a\xc1\x82\xbb\x44\x67\x2b\x99\xe3\x4c\x48\xb2\x0f\x8f\x90\x95\xc8\x35\x45\x55\xad\x6c\xbc\xe0\xc9\x18\x28\x3a\x0b\x8a\x8c\xf1\xe1\x26\x82\x43\x4c\x33\xcd\x27\xf5\xec\xf6\x57\xec\xff\xa4\x1e\x17\x83\x86\xfb\x98\xef\x7f\x0f\xc5\xeb\xf7\xef\x6f\xdf\x5f\xc2\x3b\xd5\xe2\xcc\x80\x11\x32\x43\xa0\x81\x65\xb9\x73\xb8\xf2\x98\x48\xa0\x0f\x2c\x65\xde\xe6\x7e\x00\xdf\xc2\x73\x78\x31\x1a\x8d\x7a\x00\x6d\x7d\xfe\x49\xd3\xc5\xcf\x8a\x25\x82\x90\xb0\xdc\x51\xc3\x99\xa1\xd6\x98\x83\xbb\xb2\xd9\x16\xd9\x41\x79\xa7\x5e\xeb\x1a\xbf\x16\xbe\x3a\xac\xbc\xba\x0b\x78\x7f\x59\x38\x18\x68\x0e\xe8\xa1\xd6\x02\x68\xb4\x2b\x2d\x41\xa7\x56\xfd\x78\x77\x1b\xee\x90\x1d\x5f\x79\x0e\x1c\x8c\x5b\x6e\xdd\xaa\x78\x1e\xcb\x01\x6c\x44\x6e\xe7\x03\x78\xf0\x1e\x3c\xc0\x04\x1e\xe8\x22\x11\x8d\x22\xd2\x2e\xc9\x1e\xf4\x21\x72\x6f\xc1\x8e\x4c\x4b\x94\x85\x9d\xc3\xcb\x89\x17\x87\xef\x41\xc2\xa5\x73\xec\x95\xd6\x7c\x17\xfb\xd5\x8b\x96\xb3\x0f\x2f\x92\xf4\x8b\x12\x32\x7e\xa0\xf0\xca\x76\x3e\x74\xad\x06\x38\xf5\x1a\x28\xa9\xd9\x80\x9a\x01\x3f\x1a\x18\x4f\xf7\xa3\x01\xd4\x6d\x28\x1c\xbc\xdf\x83\x2b\x0c\x1f\x9f\x08\x41\xc2\x49\x8e\xdb\xdb\x59\xec\x75\xf9\x0b\xf4\xc5\x0b\x4a\x0d\xbf\x42\xf0\x71\xb2\xae\x6c\xfc\x1e\xe2\xa1\xb6\x17\x84\x06\xd0\xb1\x08\xbf\x93\xf5\xc1\x85\x3f\x93\xf4\x81\xf0\x04\x15\x9d\x71\xef\x84\x9a\x5d\x5b\x68\xdd\xfc\x15\xda\xbb\x69\xba\xd6\x59\xbd\x95\xc6\xb5\x50\x2b\x53\x4b\xb0\xa6\x5a\xfb\x3a\x14\x37\xba\x3e\x8e\x3e\x11\xfe\xa3\xa6\x20\x45\x09\x55\xf2\x63\x7a\x37\x3f\xba\xb4\x53\x63\x5d\xe4\xc6\xba\x29\x16\x42\x46\x03\x60\x57\xa5\x78\xd9\xc9\x6f\x97\xd9\x97\x2e\xe3\x7d\xa8\x53\xab\x3e\x54\x15\xea\x1b\x6e\x02\x15\x62\xc7\x1f\xbe\x60\xf4\x81\x25\x57\x43\x52\x52\x5f\x1e\x3d\x6a\xdf\xf2\x05\xc2\x54\x14\xee\x73\x89\x55\x30\x13\x16\xb8\x81\x25\x97\x3b\x5a\x2e\xd0\x58\x22\xa1\xa1\xd5\x8d\x28\x4b\xc7\x61\xe7\x08\xd9\x4a\xd3\xfc\x57\xdf\xa1\x5a\x8c\x6b\x51\xcc\xed\x9d\x78\xc0\x6b\x41\x33\x6b\xa7\x0b\xf2\x35\x17\x25\x35\xd5\x9f\x5d\x56\x4d\xe0\x2d\xb7\xf3\x74\x56\x2a\xa5\xe3\xfa\x4b\x91\x3b\x3b\x4f\xbf\xf8\xc7\x28\x81\x21\x7c\xfb\xe2\x9b\x04\x9e\xd3\x4f\x7d\x86\x2e\x29\xfd\x90\x18\x1f\xe9\x7c\x39\xf1\xfc\xdf\x1f\x19\xbb\x0c\xe2\xe7\x1a\x62\x34\x15\xc5\x05\xdd\x53\x92\x30\x07\x6c\x82\x8b\x8d\xad\x3e\xb0\x6a\xcb\x6a\x17\x66\xab\xb2\xfc\x39\x90\x1c\x96\x4e\x28\x3e\x40\x53\x44\x12\x4e\x59\xe4\x4e\x60\xa6\x34\xc4\xa4\x49\xc0\x04\x46\x63\x10\x70\x75\xa4\x34\x54\x9c\x31\x88\x7e\xbf\x46\xcd\x21\xc7\x47\xf1\xe9\xc8\xdb\xb8\x71\xf7\x02\xbe\x49\x3a\x3e\xd3\x81\xff\x37\x00\x00\xff\xff\x6a\x54\x7e\xbb\xe7\x13\x00\x00")

func bindataScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_bindataScriptsJs,
		"/scripts.js",
	)
}



func bindataScriptsJs() (*asset, error) {
	bytes, err := bindataScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/scripts.js",
		size: 5095,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1717432632, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStandardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x93\xdb\x28\x10\xbd\xeb\x57\x74\x25\x95\xcb\x94\xf1\x48\x76\xec\x4d\x34\xa7\xdd\xda\x7f\xb0\x9b\xbd\x23\xd1\x92\xd9\x41\xa0\x82\x96\x3f\x36\x35\xff\x7d\x4b\x42\xb2\xb1\x6c\xc5\x63\x27\x47\x1e\x8f\x07\xfd\x68\xba\x79\x7e\x02\x87\x44\x52\x97\x20\xb0\xe0\x8d\x22\x28\x8c\x26\x28\x78\x25\xd5\x01\x9e\x9e\xa3\x7a\x06\x99\x11\x87\x19\x10\xcf\x14\xc2\xf7\x08\x3a\x06\xf3\x8c\x14\x3e\xfc\x89\xff\xf2\x6d\x03\x7f\x71\xed\x3e\xcc\xe0\x1f\xb4\x82\x6b\x3e\x03\xc7\xb5\x63\x0e\xad\x2c\x5e\xa2\xb7\x28\x7a\x7e\x82\x8d\x14\x08\x2e\xb7\x46\x29\xc8\xb8\x75\xad\x7a\x9a\xb2\x1d\x66\xaf\x92\x98\x9f\xc8\xb8\xed\xb6\x10\xd2\xd5\x8a\x1f\x52\xd0\x46\x63\xbb\xbe\x3d\x43\x37\xc3\x2a\xc7\xcc\x16\x6d\xa1\xcc\x8e\x39\x3a\x28\xf4\xa4\x97\x08\xe0\xa8\xc1\x76\x52\xd0\x66\x98\xf0\xdb\x2b\xee\xe8\x5b\x2d\x38\x21\xe4\x8a\x3b\x07\x5d\x74\xf3\x13\x2c\x3a\xfd\x3e\x3c\x27\xff\xc3\xf4\x73\xfc\xe9\xa5\x83\x2a\x6e\x4b\xa9\x59\xa6\x4c\xfe\xca\x50\x8b\x14\x78\x43\xe6\xca\x9c\x23\x6e\x29\x9c\xad\x8d\x93\x24\x8d\x4e\x81\x67\xce\xa8\x86\xd0\xe3\x56\x96\x1b\x4a\x61\x59\xef\xfd\x38\x33\x44\xa6\x4a\x21\x69\x81\xb7\x28\x12\x72\xfb\xd1\x11\xa7\xc6\xb1\xd6\x93\x1f\x1e\x13\x7e\x5b\x7d\xea\x16\xcd\x85\xa1\x6b\xd4\x33\x37\x3d\xb3\x92\xb9\x35\xef\xe4\x8a\x7b\xc8\xae\xe2\x4a\xbd\x8f\xdb\xde\x4a\x85\xce\xf1\x72\xb8\x92\xee\x46\x06\x68\x1c\xe6\xfa\xd1\xdb\x88\xe7\x2b\xac\x02\x83\xce\x37\x98\x36\xe7\x26\x4f\xbc\x93\xd8\x06\x4a\x92\x54\x10\xe6\xdc\x8f\xbf\xff\x44\x7a\x1d\xe3\x09\xa5\x2e\x37\x1f\x67\x52\xc8\x3e\xcb\xba\x51\x52\x25\xf1\xe0\xb7\xc2\x22\x4c\xd5\x6b\x29\xdd\x07\x99\x99\x3d\xe4\x46\x19\xeb\x03\x45\x1f\x6a\x69\x11\xf5\xb0\x23\xcf\x5f\x4b\x6b\x1a\x2d\x58\x47\x4c\x3f\x2e\x97\x79\xbe\x5c\xfa\x70\x2c\x8a\x19\xcc\xb5\xe9\xdf\xe9\xd4\x92\x3c\x8f\xe3\x38\xf6\x4b\x78\x95\xa1\x9d\x64\x16\xc5\x97\x23\xb3\xb4\x78\x98\x24\xf2\xe4\x2b\x7e\xcd\xcf\x02\x69\x6d\x38\x8b\x63\xaf\xb8\xbd\x92\x97\x8b\x36\xb9\x5a\x68\x83\xdd\xa3\x5e\x25\xf1\x60\x95\x2f\x43\x01\x30\x54\xae\xb4\xad\x86\x02\x75\x7f\x8b\xd7\x85\x13\x9f\xb7\x81\xf4\x62\xf5\xf9\x4e\xe9\x87\x95\x03\x60\xe2\xd0\x15\x0a\xd9\x54\x57\xb4\x93\xc5\x58\x3d\x59\xac\xef\x54\xff\x19\xf1\x00\x98\x38\xba\x2f\x52\x63\xf1\x78\xfe\x65\x24\xbd\x5e\xdc\xa9\xfc\xa8\xf0\x69\x3c\x65\x76\x57\x69\x6e\x0b\x2f\xe3\xfb\x84\x1f\xd5\x5d\xde\x4a\x69\x43\x97\x7d\x2a\x9e\xaf\x47\xb2\x90\x8c\xd2\x2e\x00\x26\x1c\xee\x4a\xd9\x65\x62\x8c\x85\x6f\x1c\xf0\x58\xad\x82\xf7\xdd\x8e\xbd\xae\x2f\x0a\xb0\xdb\xc8\xa1\x5f\x17\xca\x70\x4a\xdb\x4a\x78\x5e\x96\x7d\x01\x3d\x9a\xdc\xc3\xbe\xbb\x2f\x2e\x2b\xa6\x45\xc5\x49\x6e\x7b\x51\xc2\x3d\x31\xae\x64\xa9\x53\xc8\x51\x13\x5a\x1f\x63\x26\x4b\x76\x3a\x8c\xd7\x0c\xaa\x7e\xd7\x37\xf9\xfe\xef\x3f\xbe\x9d\xb5\x4d\x8f\x4c\xb5\x81\xe7\x27\xc0\x7d\x2d\x2d\xfe\x5e\x10\xda\x70\x61\x08\xff\x60\xb5\xd4\x85\xe9\x3f\x81\xad\x59\xc1\x70\xca\xb3\x9a\x0b\x21\x75\xc9\x7c\xff\x58\xf5\x3f\x9b\x7e\xe5\xf0\x2d\x08\x3d\xf0\xf6\x9e\x38\x9b\x2b\x9c\xce\x5a\xaf\xbf\x45\x4b\x32\xe7\x6a\x98\x22\x53\x07\xab\x9b\xe1\x1d\x2a\xe9\xc8\xff\x14\x19\x1d\xea\xe0\xbb\x78\x3a\xa1\xd4\x4a\x6a\x3c\xfe\x17\x46\xb7\x49\xa6\xbe\x04\x87\xd6\x19\xf7\x61\xb5\x2d\xde\x18\x45\xb2\x0e\x9b\x7c\x8f\xdc\xd3\x6d\x7f\xfd\x5f\x73\x78\x59\xdd\x16\x6f\xd1\xff\x01\x00\x00\xff\xff\xc9\xae\x65\x30\xf4\x0b\x00\x00")

func bindataStandardCssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStandardCss,
		"/standard.css",
	)
}



func bindataStandardCss() (*asset, error) {
	bytes, err := bindataStandardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/standard.css",
		size: 3060,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1742567535, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/scripts.js":   bindataScriptsJs,
	"/standard.css": bindataStandardCss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"scripts.js": {Func: bindataScriptsJs, Children: map[string]*bintree{}},
		"standard.css": {Func: bindataStandardCss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
