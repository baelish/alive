// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4b\x6f\x1b\x37\x10\xbe\xef\xaf\x98\xf0\x62\x32\x5e\x6d\x64\x17\xbe\x58\xd8\x04\xb1\xeb\x22\x2d\xfc\x28\x6c\x17\x45\x11\xf4\x40\x2d\x47\x2b\xd6\x14\x29\x90\x5c\xbd\x1c\xfd\xf7\x82\xcb\x7d\x48\x82\x65\xe4\x24\x71\xe6\x9b\x6f\x86\xdf\xcc\x70\x17\xdc\x82\x33\x95\x2d\x10\x72\xd0\xb8\x84\x9b\x05\x6a\xff\x54\x5b\x28\xf9\x84\xe1\xe4\x3e\x11\x36\x4a\x22\x2a\x33\x7a\x86\xce\xf1\x32\xe0\x27\x95\x2e\xbc\x34\x9a\xd6\x30\x06\xaf\x09\x00\x40\xa0\xac\x0d\x90\xc3\x1f\x4f\x0f\xf7\xd9\x9c\x5b\x87\x11\x93\x09\xee\x39\xab\x61\x6e\x29\x7d\x31\x6d\xcc\x7e\x3d\xc7\x36\x1e\xa0\xe0\x0e\x81\xbc\x20\xce\xb9\x92\x0b\x24\x97\x8d\x1d\xa0\xb3\x51\x96\x74\xc6\xb1\x45\xfe\x32\x4a\xf6\x82\xab\xb9\xe0\x1e\xaf\xcc\x6a\x27\x38\x14\xe6\xb9\x2d\xd1\x5f\x99\x15\xe4\x20\x4c\x51\xcd\x42\xf6\x12\xfd\x8d\xc2\xf0\xf7\x6a\xfd\xbb\x68\x4a\x92\x82\x8d\xba\xd0\x62\xca\x75\x89\x5f\x15\x5a\x7f\x8b\x0b\x54\xb4\xe3\x49\xe3\x5d\x33\xe7\xb9\xaf\x5c\x7b\x52\xdc\xf9\xbb\xa8\x13\x1b\xbd\x5f\xa9\x40\x85\x87\x95\x76\xb6\xbe\x96\xf7\x49\x2c\x2a\xc3\xc5\x9f\xbc\xdc\x15\x4b\x99\x82\x87\xf6\x64\xd1\x4b\xa3\xee\xdb\x64\x3b\x4a\x92\xa4\xed\x1d\x8c\xcd\xea\x5a\xc9\xe2\x85\x4a\x11\x3a\xb0\xdd\x71\xf5\x65\x44\xdf\xae\x84\xef\xe8\x17\xaa\x85\x06\x16\x9a\x8f\xda\xdf\x1b\x81\x99\xc5\x99\x59\xe0\xf5\x54\x2a\xd1\xe8\xc7\xf6\xd2\xed\x34\xf7\xe7\x93\x91\x28\xfc\x60\xcc\x2d\x09\x69\x8f\x74\x2a\x05\x52\x5a\x44\x4d\x52\x20\x35\x4e\x4e\x68\x18\x3a\x33\x81\x17\x0e\x1f\xf2\x1c\x48\xa5\x05\x4e\xa4\x46\x41\x18\xbc\x42\xa1\x90\xdb\x67\x39\x43\x53\x79\xfa\xc2\x19\x6c\x13\x08\xd0\x1c\x1c\xfa\xd6\xde\x2d\x00\x7b\x3d\x9e\xd7\xa2\x08\x59\x6f\x1e\x1f\x1f\x1e\x2f\xe1\xde\xf4\xf7\x74\x30\x31\x16\x2e\x5c\x46\xd8\x36\x85\x0b\xf8\x08\x67\xc3\xe1\xb0\x16\xa5\x57\x65\xb6\x0e\xd9\x68\xb7\x5e\x72\x02\x14\x3c\x7c\xc8\x41\x57\x4a\x41\xbf\x35\x00\xb6\xd9\xe1\x5f\xb9\x0f\x01\xb1\xdd\x80\xca\xe1\x31\x50\x3b\x12\xb5\x03\x7d\x65\x35\xd8\xa0\xf0\x6f\x95\x52\xff\x20\xb7\x94\xc1\x29\x90\x01\x81\x53\x98\x73\x41\x6b\xdf\x9d\xd1\x7e\x5a\x3b\xce\xd2\xf3\xce\xdf\xf1\x77\xb8\x98\xa0\x81\x3c\xef\x51\x7c\x33\x95\x75\x9d\xef\xf2\xcd\xf0\x3b\xa9\x2b\x8f\xfb\xa8\xde\xfb\x84\x85\xd1\x22\x7a\xf7\xf5\x0a\x10\x9d\xc2\x52\x0a\x3f\x4d\x61\x13\xf5\xd9\x40\x0e\x1b\xf8\xf1\x03\x4e\x86\x27\x61\xab\x75\x10\x01\x4e\xe1\xa4\x3e\x35\x37\xd7\x99\x42\x5d\xfa\x29\x7c\xce\x63\x38\x7c\x01\x0d\x97\xb5\x5a\x5f\xad\xe5\x6b\x1a\xad\x83\x1e\x79\x0a\x67\x2c\xfb\xcf\x48\x4d\x37\xa1\x48\x3d\xda\xaf\xe5\xe8\x50\xb4\xaf\x45\xf3\x96\xee\xf5\xf6\x3b\xe1\xb3\x31\x5a\x92\xb6\x13\x1b\x7e\xd7\x24\x25\xda\xfc\x55\xbf\x6a\x24\xad\x67\xea\xdf\x4c\x6a\x81\xab\x87\x09\x8d\x6c\x0c\xf2\x1c\x06\x67\x61\x78\xa3\x01\x72\x88\xa1\x4d\x83\x9b\x8d\x2c\x14\x77\xee\x56\x3a\xdf\x2c\x24\x6d\xf3\xed\xac\x48\xcc\x08\x3b\x29\xe3\x1c\xb3\xb7\x89\xb8\x10\x6d\x11\xbb\x80\x7e\x55\xdd\xd5\xfa\x3a\xa0\xef\xf9\x0c\x29\x69\x6e\x4d\xd8\xf7\x61\xb8\x84\x46\xfb\xed\xf9\xee\x16\xf2\x56\x8e\x9f\xe1\x08\x2f\x6c\xac\x4d\xbc\xc1\x13\x77\xe6\x60\x32\xac\x2c\xa7\xfe\x49\x6e\xf0\x4a\x96\xe1\x51\xdb\xfd\x60\xf1\x05\x97\x8a\x8f\x15\xfe\x5d\xb7\x38\x87\x3b\xee\xa7\xd9\x44\x19\x63\x29\x5d\x4a\x2d\xcc\x32\x66\x88\xfe\xc1\x2f\x43\x06\x9f\xe0\xe2\xec\x9c\xc1\xc7\xf0\x53\x13\xd5\xe3\x11\xbf\x2d\xf4\x80\xf0\x73\x1e\xc1\x5f\x0e\x32\x5d\xb6\xb1\xc7\xde\xb7\x93\xb1\x2c\x07\x63\xb3\x3a\x61\x99\xf3\x6b\x85\xd9\xb2\x29\xb0\x4b\x76\x0a\x64\xbe\x22\xef\x93\xf4\x8f\xe4\x21\x0f\xed\x89\x06\xe7\xc0\x5a\xb6\x6d\xf2\x7f\x00\x00\x00\xff\xff\xfb\x59\x5f\x4c\x1a\x08\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 2074, mode: os.FileMode(420), modTime: time.Unix(1563559270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x72\xda\x3c\x10\xc7\xef\x3c\x85\x26\x99\xef\x86\x19\x1b\x07\xf2\x45\xdc\x3a\x7d\x83\x36\xbd\xaf\xad\xb5\xd9\x46\x96\x18\x69\x4d\xa0\x99\xbc\x7b\x07\x2c\xb0\xa9\x0d\xa6\x33\xbd\x59\xab\xfd\xff\xfe\xeb\xdd\xd5\x46\x7c\x14\xd6\x70\x54\x40\x45\x7a\x2f\xc5\xc3\x57\xfc\x09\xdb\x5a\x7c\x03\xe3\x1f\xa6\xe2\x07\x3a\x05\x06\xa6\xc2\x83\xf1\x91\x47\x47\xc5\xea\x73\x32\x51\xb4\x9d\x95\x0e\xd1\x88\x8f\x89\x10\x42\x64\x90\xbf\x95\xce\xd6\x46\x45\xb9\xd5\xd6\xc9\xc7\x34\xcd\xf3\x34\x5d\x4d\x42\xb2\x43\x35\x15\x87\x0f\x63\x5f\x37\x0a\x18\xaf\x0a\xf3\x3c\x8e\xe3\xf8\x2c\x84\x2a\x43\x77\x35\xb9\x28\xfe\xef\x26\x97\x0e\xf7\x57\x73\x21\x79\xc1\x97\xfc\x9c\xbb\xd3\xe0\xca\x53\x19\xef\xa4\x78\x2d\x17\x49\xbc\xd9\xad\x8e\x81\x35\x52\xb9\xe6\x6e\xe4\xd8\x25\x4f\xbf\x50\xce\xb1\x3a\x53\xd4\x3d\x94\xf9\xe2\xa9\x4f\x49\x66\x8b\x0e\xa7\x8f\xe9\x88\xee\xc7\xa8\x0a\x15\xd5\xd5\x08\x28\x99\x2f\x87\x40\xc9\xbc\x8b\x1a\x20\x75\x74\x7f\x43\x52\xbe\x02\xad\x47\x48\xcb\x79\x1f\x14\xcf\x9e\xbb\x9c\x3e\xa6\x15\xdd\x4f\x51\x15\xe5\xce\xde\xc6\xa4\x03\x53\x8f\x2f\x1a\xdd\x87\xa4\x7f\x4e\x7d\x1c\xe2\x19\xb8\xf6\x81\x12\x54\x62\x48\x96\xb4\xa2\xc7\x46\x14\x65\xe0\xc4\x66\xc6\xc4\xfa\xb4\x36\x6d\xba\x48\xe2\xf8\xbf\x86\xb1\xb1\x9e\x98\xac\x91\x02\x32\x6f\x75\xcd\xd8\xc4\x35\x16\x07\xaf\xe6\x90\x59\x66\x5b\x49\x91\x0c\x9b\x68\xf0\xdc\x3c\x5a\xd5\xb7\x7a\x5e\x8c\x38\xb9\xf0\x5b\x57\xac\x66\x99\xdd\x05\x6a\xf3\x4e\xc5\xfb\x9a\x4e\xda\x42\x5b\x60\x79\xa8\xb5\x39\x57\xe0\x4a\x32\x51\x80\x9c\xa7\x16\xc2\x8d\xd3\x39\xda\x16\xe4\x50\x03\xd3\x36\x40\x19\x77\x1c\x81\xa6\xd2\x48\x91\xa3\x61\x74\x6d\x2d\x54\x46\x6d\x3d\x0d\x56\x0a\xa8\xd9\x1e\x53\x2e\xfb\x7d\x2a\x46\xdb\xfc\x2d\xf2\x0c\x8e\xa5\x38\x35\xe3\xe2\x0e\x8d\xba\x80\x54\xe8\x3d\x94\xfd\xb1\x2d\xe3\x21\x75\x20\x87\xcd\x19\x87\xc3\xee\xfb\x97\xd7\x1e\xfb\xe9\x16\xbb\x91\xdf\x42\x1f\xee\xb6\xe4\x29\x23\x4d\xbc\x97\x62\x4d\x4a\xa1\x09\x96\xb7\xf6\xe3\x1f\xf8\x5e\x5b\xac\xce\x2a\x5d\xee\xd9\xe7\xe4\x77\x00\x00\x00\xff\xff\x02\x18\xf8\x8c\xd5\x06\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1749, mode: os.FileMode(420), modTime: time.Unix(1563559427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
