// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\xe5\x8b\xa9\x46\x51\xec\x6c\x7b\xb1\xa1\x16\x75\x9b\xa1\x03\x92\x74\x48\x32\x0c\x83\xe1\x07\x5a\x3c\xcb\x5c\x69\xd2\x20\x29\xff\x4a\xfd\xbf\x0f\x24\x65\xd9\x0a\x92\xa1\x4f\x36\xef\x3e\x7e\xdf\xf1\x3b\xf2\xb4\x66\x06\x9c\x58\xa2\xae\x9d\x85\x02\x26\xd3\x24\xf1\x21\xab\x6b\x53\x22\x14\xa0\x70\x03\x37\x6b\x54\xee\x31\x44\x28\xb9\x42\xbf\xb2\x57\x24\x1d\x25\x11\x95\x6b\xb5\x44\x6b\x59\xe5\xf1\xf3\x5a\x95\x4e\x68\x45\x03\x2c\x85\xe7\x04\x00\xc0\x53\x86\xc0\x17\x74\x4c\x48\xaf\x14\x96\x39\x67\x8e\xe5\x76\x25\x85\xa3\xbd\xac\x97\x06\xb0\xdd\x08\x57\x2e\xe8\x39\x7e\xd2\x9f\x1e\xa9\x00\x4a\x66\x11\x48\xbd\xe2\xcc\xe1\x58\x6f\xc9\xb0\x89\x47\x19\xc7\x4c\x85\x6e\xac\xb7\x50\x00\xd7\x65\xbd\xf4\x32\x15\xba\x1b\x89\xfe\xef\x78\xf7\x07\xef\x52\x0f\xa6\xe9\xa8\x65\x28\x17\x4c\x55\xf8\x49\xa2\x71\xb7\xb8\x46\x49\x5b\xba\xac\x73\x80\xc9\xf5\xf4\x45\xe0\x97\x73\x9a\x99\x41\xf6\x7d\xd4\xa9\xd7\xa0\xd4\x8c\xff\xc9\x2a\x3c\x2b\x58\xea\x92\x79\xb7\xf2\x98\xa5\xd1\x80\x43\x72\x18\x25\x49\x72\xb4\x12\x66\x7a\xfb\x59\x8a\xf2\x3b\x15\xdc\xbb\x70\x38\xcf\x2d\x77\x4f\x62\x89\xb4\x75\x5a\xcc\x81\x82\x83\x77\x05\xa8\x5a\x4a\x38\xb9\x06\x60\x9a\x76\x7e\x61\xce\x6f\x88\x52\x80\xd2\xe2\x5b\xa0\x63\x39\x21\x81\xae\x36\x0a\x8c\xf7\xf2\xf7\x5a\xca\x7f\x90\x19\x9a\xc2\x05\x90\x4b\x02\x17\xb0\x62\x9c\x86\xdc\x9d\x56\x6e\x11\x12\x83\xec\xba\xcd\xb7\xfc\x2d\x2e\x0a\x34\x90\xa7\x0e\xc5\x57\x5d\x1b\xdb\xe6\x86\xaf\x6e\xbf\x13\xaa\x76\xd8\x45\x9d\xb2\x8f\x58\x6a\xc5\x63\xb6\xeb\x97\x87\xa8\x0c\x36\x82\xbb\x45\x06\xfb\xe8\xcf\x1e\x0a\xd8\xc3\x8f\x1f\xd0\xeb\xf7\x7c\xd7\x94\x37\x01\x2e\xa0\x17\x56\xcd\xc9\x55\x2e\x51\x55\x6e\x01\x1f\x8a\xb8\x1d\x3e\x82\x82\x61\x70\xeb\x93\x31\x6c\x47\x63\xf4\xf2\x84\xbc\x80\x41\x9a\xff\xab\x85\xa2\x7b\x5f\xa4\x1a\x75\x6b\x79\xe3\xb2\x65\x20\xfd\x2a\x83\xe6\x55\x75\x5a\x3b\x21\x6c\x39\x43\x43\x32\x52\x19\x44\x15\x7f\x77\x24\x23\x06\x39\x99\xe6\x42\x71\xdc\x7e\x9b\xd3\xc0\x90\x42\x51\xc0\xe5\x20\x85\xe7\xc8\x08\x05\x44\x74\xd3\xd2\x28\x97\x97\x92\x59\x7b\x2b\xac\xcb\x0d\x2e\xf5\x1a\xe9\x51\x02\x8e\x1a\xcd\xb6\x0c\x82\x4a\xfa\xfa\x66\xc6\x79\x23\x7b\x9e\x3f\xbd\x3c\x3b\xde\x7d\xf6\xe0\x7b\xb6\x44\x4a\x9a\xb3\x91\x74\xd2\xf7\x55\x2b\x34\x5f\x9f\xee\x6e\xa1\x38\x1e\xfa\x67\x38\x24\xb3\xee\xaf\x30\x06\xf8\x2b\x3c\xf1\x61\xbc\x68\xbf\x11\xd5\xc2\x3d\x8a\x3d\x8e\x45\x35\xd6\x5b\x7a\x3e\xa0\xd8\x9a\x09\xc9\x66\x12\xff\x0e\x7d\x2c\xe0\x8e\xb9\x45\x3e\x97\x5a\x1b\xba\x11\x8a\xeb\x4d\x14\x88\xe9\x2b\xf8\x6d\x70\x9d\xc2\x7b\xff\x13\x28\x42\xf7\xe3\xdc\xa1\x2f\xa8\x3e\x14\x30\xe8\x5f\xff\x9a\xc2\xc7\x17\x22\x43\x1f\x0e\xbb\xdf\x1a\x55\xbd\x99\xa8\x2e\x67\x7a\xdb\x4b\x73\xeb\x76\x12\xf3\x4d\x53\x5c\x2b\x77\x01\x64\xb5\x25\xdd\x63\x32\x7f\xa7\xee\x75\x34\x87\x0a\x9e\x85\x19\x7f\xba\x48\xd4\xed\x56\xa8\xe7\xed\xe4\x9f\x08\x3e\x85\x77\x45\x01\xa4\x56\x1c\xe7\x42\x79\x47\xe1\x19\x4a\x89\xcc\x3c\x45\x10\x3d\x07\xa7\x87\x51\xd2\x9d\xb8\xff\x33\x6e\x05\x6f\xae\xc4\xb9\x5a\x01\x16\xdd\x91\xba\xfd\x6a\xa4\xcf\x6f\x3e\x8a\x70\xf7\x32\x20\x37\x0f\x0f\xdf\x1e\x86\x70\xaf\x21\x7e\x02\x2c\xcc\xb5\x01\xff\xfc\x3d\xbf\xb7\xc3\xe6\x24\x3d\xc4\x23\xc3\x7b\x18\xf4\xfb\x7d\x7f\x0b\xfe\x0b\x00\x00\xff\xff\xe4\xab\x50\x04\xea\x06\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 1770, mode: os.FileMode(420), modTime: time.Unix(1554230210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\xcd\x6e\xdb\x30\x0c\x07\xf0\x7b\x9e\x42\xe8\xb0\x5b\x1d\xd8\x71\x93\xad\xca\x6d\xd8\x1b\x6c\xdd\x9d\x96\x68\x87\xab\x3e\x02\x89\x49\x93\x15\x7b\xf7\x61\xb1\x6a\x3b\x73\xbe\x06\xf4\x68\xe9\xcf\x9f\x05\x91\xd0\x5a\xbc\xd6\xde\x71\x56\x83\x25\xb3\x97\xe2\xee\x2b\xfe\x84\xed\x46\x7c\x03\x17\xef\xee\xc5\x0f\x0c\x1a\x1c\xdc\x8b\x08\x2e\x66\x11\x03\xd5\xcb\xdf\x93\x89\xa6\xed\xb4\x09\x88\x4e\xbc\x4e\x84\x10\xa2\x02\xf5\xdc\x04\xbf\x71\x3a\x53\xde\xf8\x20\x3f\x94\xa5\x52\x65\xb9\x9c\xa4\x70\x40\x7d\x36\xaa\x54\x9e\xe7\x79\x17\x05\x5b\x61\x38\x1b\xae\xeb\xcf\xc3\x70\x13\x70\x7f\x36\x0b\xc5\x23\x3e\xaa\x2e\xbb\x33\x10\x1a\x4c\xe9\x17\xd2\xbc\x92\xf3\x22\x5f\xef\x96\x87\x85\x15\x52\xb3\xe2\xe1\xca\xe1\x5e\x22\xfd\x42\x39\x43\xdb\x29\xfa\x16\x65\x36\x7f\x18\x2b\xc5\x74\x3e\x70\xc6\xcc\xa0\xe8\x76\x46\x5b\xd4\xb4\xb1\x57\xa0\x62\xb6\x38\x05\x15\xb3\x21\x75\x42\x1a\xd4\xfd\x8f\xa4\xa3\x05\x63\xae\x48\x8b\xd9\x18\xca\xa7\x9f\x86\xce\x98\xe9\x8b\x6e\x57\xb4\x25\x15\xfc\x65\xa6\x3c\xd1\xf5\xfc\xe8\xa2\xc7\x48\xf9\x6f\xd7\xaf\x23\x95\xdf\x25\xa2\x1d\x51\xf1\xb2\x22\xc6\x54\x63\x3c\xb0\x34\x58\x73\xfb\x6d\x21\x34\xe4\xb2\xca\x33\x7b\x2b\xbb\x03\xa7\xe5\xd0\x0e\xc8\xdb\xea\xda\x47\x62\xf2\x4e\x8a\x80\x06\x98\xb6\x09\x65\xdc\x71\x06\x86\x1a\x27\x85\x42\xc7\x18\xfa\xb3\x50\x93\xf5\xe7\x69\x59\x29\x60\xc3\xfe\x10\x59\x4f\x99\xd8\xe0\xd1\x76\x56\x19\xaf\x9e\xb3\xc8\x10\x58\x8a\xf9\xc7\xe5\x78\x0f\x9d\x3e\x42\x2c\xc6\x08\xdd\xa0\xf7\xf7\xb2\xc8\x4f\x55\x27\x39\x5d\xda\x75\x1c\x76\xdf\xbf\x3c\x8d\xec\x87\x4b\x76\x5b\x7e\x89\xfe\xbb\xb7\xa5\x48\x15\x19\xe2\xbd\x14\x2b\xd2\x1a\x5d\xfa\xa5\x81\xc8\x4f\x6b\x0d\xdc\x3d\x68\xef\xfa\xdf\xbe\x8f\x50\x45\x6f\x36\x6f\xc3\x91\xa6\x40\x14\xed\x67\xdb\x7d\x71\x78\x5f\xff\x04\x00\x00\xff\xff\xb0\x6e\xfb\xea\xc2\x05\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1474, mode: os.FileMode(420), modTime: time.Unix(1554230271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
