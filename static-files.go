// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\xf2\xc5\x52\x6d\xcb\x4e\x87\xec\x21\x9e\x52\x34\x5d\x87\x6e\x6d\x92\x21\x49\x51\x0c\x45\x31\xd0\xe6\x49\xe6\x4c\x93\x02\x49\xf9\x4f\x56\x7f\xf7\x81\xa4\x24\xcb\x8e\xdd\x15\x58\xd7\x87\xc6\xe6\xdd\xfd\xee\xc7\xfb\x4b\x0f\x87\x70\x87\x42\x51\x06\x3c\x03\x8d\x83\x25\x37\xdc\x72\x99\x43\x69\xdc\xff\x13\x3a\x9d\x0f\x33\xa5\x57\x54\x33\x98\x94\xd6\x2a\x69\x92\x0e\xcf\x20\xba\xb7\x9a\xcb\x3c\x5a\x71\xc9\xd4\x2a\x29\x50\x67\x4a\x2f\xa8\x9c\x62\x92\xa3\x7d\x23\xad\xe6\x68\xae\x36\x0f\x9b\x02\x23\x22\xe9\x92\xe7\xd4\x72\x25\x49\xfc\x69\xf4\x39\xb1\x9b\x02\x63\x48\xd3\x14\x88\x73\xf0\x67\xe5\x80\xc4\x7f\x77\x00\x84\x9a\x7a\xd5\x44\x7b\x5e\x51\x3c\xee\x6c\x3b\x1d\x81\x16\x16\xdc\x18\x64\xef\xa8\x81\x14\x46\x9d\x8e\xa7\x9e\x73\x63\x51\xc3\x8a\xdb\x19\x4c\xd4\x1a\x70\x89\xd2\x82\x51\xa5\x9e\xa2\x37\x0a\x1f\x21\x05\x89\x2b\x78\xe3\xa4\xf7\xfe\x24\x22\x43\xaf\x6b\x86\x24\x1e\x77\x82\x56\xa2\xe4\x02\x8d\xa1\xb9\xd3\xcf\x4a\x39\x75\x3c\x22\xaf\x16\x83\xe3\x06\x15\x7e\x0a\xbf\xdd\xdf\xde\x24\x05\xd5\x06\x83\x3c\x61\xd4\xd2\x78\xec\x75\xcc\x8a\xdb\xe9\xac\x3a\x0f\x77\x0d\xc6\x00\x53\x6a\x10\xc8\x1c\xb1\xa0\x82\x2f\x91\x5c\x54\xe7\x00\xcd\x99\xbb\x70\x73\x3a\xd1\x48\xe7\xcd\xf7\x60\x5d\x16\x8c\x5a\xbc\x52\xeb\x96\xb5\xbb\xa9\xa5\x3a\x47\x7b\xa5\xd6\x90\x02\x53\xd3\x72\xe1\xdc\xbb\x64\x08\x74\x1f\xaf\x36\xbf\xb2\x8a\x13\x67\x6d\x1f\x2e\x9b\x3b\xdb\x67\x69\x0a\xb2\x14\x62\xc7\xd9\x7b\x9e\x51\x99\xe3\x2b\x81\xda\xbe\xc7\x25\x8a\x9d\x41\x3f\x84\x24\x31\x96\xda\xd2\xd4\xdf\x04\x35\xf6\x3a\x84\xb2\x0a\x8a\xfb\xb7\xdd\x77\x1a\x54\x17\x74\xfd\x70\xf5\xc1\xfb\x25\x64\xdf\xab\xbb\x95\x56\x2b\x48\x77\x77\x6b\x5d\xc8\x5c\x6d\x5e\x0b\x6a\xcc\x0d\x5d\x60\x44\x02\x8c\xaf\xaf\x16\x82\x56\xab\x7d\x8b\x07\x9a\x7b\xfd\xae\x65\x5d\x5f\x8b\x5c\x4a\xd4\x6f\x1f\xae\xdf\x43\x0a\x6d\x42\xe3\x16\xca\x13\xb2\xbe\x74\x47\x8e\xad\x73\x60\xec\x46\x60\xc2\xb8\x29\x04\xdd\x40\x0a\x44\x2a\x89\x64\x0b\x28\x0c\x9e\xd0\xb0\x74\x22\x70\xa0\xd5\x8a\x6c\xbf\x1e\x1d\x5c\x17\x5c\xe3\xab\xcc\x15\xf9\x7f\x0d\x51\x0b\xeb\x7b\xc4\xa9\x05\x77\x3c\x58\x6d\xee\xff\x77\xc4\x8e\x35\x0a\x43\x81\x87\x8d\xd2\x9c\x1d\x6d\x85\x63\x28\x61\x0c\xfd\x4e\xf3\x76\xb7\x3e\x19\x52\x9d\xc0\x67\x3b\xee\x74\xea\xc1\xe1\xe6\xd1\x5b\xb5\x44\x1d\x59\x5e\xd4\x59\xdb\x35\xea\x57\xba\x94\x58\xa5\x84\xe5\x05\x09\xb0\x41\x7f\x2f\x03\x96\x17\x6d\x51\x2b\x4e\x13\xa1\xa6\x73\xe2\x46\xe6\x1e\x91\xdb\xd2\x46\xdf\x99\x03\x21\x27\x28\xcc\x38\x63\x28\x9f\x72\x78\x2d\xf8\x74\x1e\x71\x56\xf3\xa8\x76\x47\x13\xcb\x99\xc6\xcc\xd9\x0f\x27\x6a\x3d\x24\xd0\x03\xce\xc6\xfb\x20\xbb\xec\xd5\x28\xdf\x74\x17\x9f\xe4\x86\x69\x41\x35\x4a\x7b\xa3\x18\x26\x1a\x17\x6a\x89\xaf\x67\x5c\xb0\x6a\xa2\xc5\x07\x1e\x5b\x63\xf9\xdb\xfd\x91\x30\x0c\x07\x13\xaa\x89\xf7\x7c\x62\x7c\xf6\x81\xe4\x1a\x51\x92\xbe\xeb\x6b\xa7\xc8\xb3\xc8\x2d\x0c\x95\xc1\x9c\x86\x7e\x2f\x25\xc3\x8c\x4b\x64\xae\x77\x60\x2a\x90\xea\x07\xbe\x40\x55\xda\x68\x4e\xe3\x31\x6c\x9d\xd9\x9c\x42\x0a\x06\x6d\x2d\xf1\xe1\x6d\x16\x58\x5c\x0f\x8c\x66\x81\xf6\x7a\x75\xc7\xba\x6e\xdd\xed\xd5\x4b\x38\x07\xe7\xe6\xe9\x0e\x0e\x7e\x6a\x8b\x48\xaa\x55\x14\xc3\x00\xdc\x9c\x7f\x47\x63\xb8\x84\x1f\x47\xff\x6a\x19\x94\xdd\x2a\x76\xd6\xf5\xe9\xe9\xd8\x68\x64\x2e\x32\x6f\xee\xee\x6e\xef\x2e\xe0\x46\xed\x92\x61\x20\x53\x1a\xce\x4d\x42\x2a\x98\x30\x13\xfa\x70\x0e\xcf\xe1\x6c\x34\x1a\x75\x00\x0e\x33\xb9\xd8\xb8\xe8\x44\xb6\xdd\x05\xd5\xe0\xf2\x1b\x10\x9e\x3d\x5d\x7c\xba\x7a\x37\xfc\x4c\xad\xb3\x0c\xae\xaa\x29\x75\x5c\x29\x6e\xd1\xd1\x68\x4b\x2d\x41\xbb\xf2\xf8\xa5\x14\xe2\x0f\xa4\x3a\x8a\xa1\x07\x64\xe0\xaa\xbb\xa0\x2c\xf2\xb2\x6b\x25\xed\xcc\x0b\xce\xfa\x2f\x1a\x79\x83\xdf\xe8\x05\x07\x95\xca\xc3\x1e\xc4\x5b\x55\x6a\xd3\xc8\x2e\x8e\x9a\x5f\x73\x59\x5a\xdc\xd7\xda\x49\xef\x71\xaa\x24\x0b\xd2\xfd\xc0\x39\x15\xd9\x87\x15\x67\x76\xd6\x87\xc7\x10\x9f\x47\x48\xe1\x11\xbe\x7c\x81\xee\xa8\xeb\x82\x28\x5d\x10\xa0\x07\x5d\xff\xad\xba\xb9\x4c\x04\xca\xdc\xce\xe0\x32\x0d\xe6\xf0\x12\x24\x5c\xf8\x68\xbd\xd2\x9a\x6e\xa2\x70\x3a\xd8\x69\xf6\xe0\x2c\x4e\xfe\x52\x5c\x46\x8f\x8e\xa4\x3c\x48\xe2\xc9\x62\xa9\x9f\x1f\xd5\xfb\xad\x4e\xa2\xcb\x2c\x7c\x22\x74\x31\x41\x4d\xfa\x75\xb7\xb9\xbf\x1b\xd2\x27\x52\x7d\xf0\x6f\x29\xd2\xf7\xb5\xe6\x96\x1c\xc3\xf5\x6d\x16\x05\xb4\xf0\x44\x1d\x9c\xb9\xba\x0e\x27\x6e\x3a\x79\xdb\x2a\xc3\xd5\x44\x99\xba\x1d\xfb\x9e\x1b\x5b\x0d\x94\xa8\x76\xd8\xea\xef\xe0\x12\x5a\x3e\x43\x81\x57\x05\xfc\x04\x89\x32\x56\xd3\xd8\xd3\x38\xf9\xfe\x09\x17\x27\x4f\x96\x75\x25\xf8\x26\x10\xd7\xa1\x81\x1e\x3b\x02\x14\x1a\xe8\xa0\x3a\x34\xcf\x67\xf6\x9e\x3f\xe2\x15\xcf\xdd\x60\x6e\xb7\x17\x5d\x52\x2e\xdc\xde\xfe\xe8\xd3\x9c\xc2\x35\xb5\xb3\x24\x13\x4a\xe9\xa8\xfe\xe5\xe0\x3d\x04\xf9\xe0\x87\x51\x0c\x43\x38\x3f\x7b\x11\xc3\x73\xf7\x67\xdc\x20\xf9\x3a\x09\x4f\xdb\xe8\x00\xf5\x32\x0d\x16\x2f\x0f\xdc\x5d\x34\x00\xa7\xc6\x74\x77\xc2\xf3\xc1\x44\xad\xbb\x71\xf5\xdc\x58\x55\x34\x1b\x6f\x3d\x20\xc5\x9a\xec\x68\x64\xa5\x10\x1f\x2b\x21\x9a\xe3\x1b\x60\x2f\xa2\x5d\x67\xe1\xe1\xba\x55\x1a\xdd\xe0\x8a\x1c\x16\x77\xbf\x62\xc6\xc0\xe1\xa7\x03\xd8\xaa\x15\xc6\xc0\x7b\xbd\xf6\x30\xda\xd7\xfa\xc4\x3f\x1f\xb0\x8e\x1a\xda\x03\x08\x1d\xde\x70\xdf\x76\xb6\x9d\x7f\x02\x00\x00\xff\xff\x90\x0a\x4c\x72\xea\x0d\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 3562, mode: os.FileMode(420), modTime: time.Unix(1580051376, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xd1\x52\xe3\x3a\x0c\x7d\xef\x57\x68\x60\x78\xe9\x34\x6d\xda\x50\x2e\x84\xa7\x7b\xe7\xfe\xc1\x2e\xfb\xae\xc4\x4a\xea\xc5\xb1\x33\xb6\x02\xed\x32\xfc\xfb\x4e\xe2\xa4\x4d\x4b\x02\x4b\xd9\x47\x9f\x4a\xc7\xd6\xd1\x89\xd4\xc5\x14\x14\x3a\x7e\x28\x05\x32\x41\xaa\xd0\x39\x80\xe9\x62\x52\xce\x0f\xb0\x80\x97\x09\x00\x40\x66\x34\x07\x4e\xfe\xa2\xf8\x3a\xbc\xba\x6f\xa0\x02\x6d\x2e\x75\x90\x28\x93\x3e\x06\xa4\x45\x0c\x58\xb1\x19\xf8\xcd\x31\x5a\xee\xff\x5a\x1a\x27\x59\x1a\x1d\x03\x26\xce\xa8\x8a\xc9\xe3\x56\xe6\x1b\x8e\x21\x2a\xb7\xfe\x9c\x18\x66\x53\xc4\xb0\xac\x81\xd7\xc9\x44\xc8\xa7\x4b\xc7\xc8\x95\x0b\x12\xb4\xf0\xee\x33\xe1\x9f\xf5\x55\x93\x34\x2f\x64\x6a\xcd\x50\xb0\x90\xae\x54\xb8\x8b\x41\x1b\x4d\x3e\x56\x7c\x26\xd8\x15\xa8\xd4\x9f\xc5\x4e\x16\x53\x28\xc8\x39\xcc\x3b\xa1\x1b\x9d\x3b\xe8\xf4\xf1\x37\xe7\x6a\x1c\xce\xd7\x54\x1c\x95\x7d\x7c\xc5\x3b\x25\x7f\x14\x58\x97\xc0\x92\x55\xaf\x80\xb9\x3f\xbf\x7c\xc1\x0e\x03\x5d\xed\x93\x1e\x39\xe0\xa4\xc1\xcb\xb0\x53\x49\x51\xd6\xb7\xcd\x90\xbd\xda\x02\x1c\x31\x4b\x9d\x83\xa0\x0c\x2b\xc5\x0d\x1d\x64\x58\x48\xb5\x6b\x3a\x32\x83\xc4\x88\xdd\x0c\x18\x93\xfa\x0d\xcd\x6d\xfe\xe7\x18\x2e\xfe\xa7\x9f\xf8\x54\xc1\x37\xd4\xee\x62\x06\x3f\xc8\x0a\xd4\x38\x03\x87\xda\x05\x8e\xac\xcc\xee\xdb\x5b\x12\xb3\x85\xd4\x28\x63\xbd\x54\xe4\xc5\xca\x2d\x91\xee\xea\xc2\xf4\x31\xb7\xa6\xd2\x22\x68\x02\xe3\xcb\x28\x4a\xd3\x28\xf2\x2d\xb1\x24\x66\x30\xd7\xa6\xfd\x32\xc7\x52\xd2\x34\x0c\xc3\xd0\xa7\x60\x91\x90\x1d\x8d\xcc\xb2\xdb\x7d\x64\x6e\x69\x37\x1a\x88\xcb\x3b\xba\x4b\xf7\x72\xd5\x85\xd4\x62\x1f\xd5\xb1\x55\x68\x07\x3c\xbb\xaa\x8d\x57\x43\x1b\x6a\x3e\xe3\xf5\x32\xec\x1a\xf2\x2c\x05\x6f\x3a\xa0\xf1\xdc\x30\xc5\xd2\xbb\xb7\x47\xb2\x5a\x5f\x8f\x92\x9c\xcd\xd1\x02\xde\xfc\x24\x64\x55\x0c\xb0\x2c\x57\xa7\x3c\xcb\xd5\xcd\x28\xcf\x57\x68\x5a\xa0\x79\x8e\x1f\x29\xa7\x34\xe1\xfc\xf6\x84\xe4\x66\x35\xca\x71\x2e\x85\x3f\xf7\x26\xc2\xc7\x14\x51\x38\x46\x71\x2e\x43\xb4\xef\xae\x9f\x08\x6f\x15\x3d\x21\x80\x7d\xc6\xfe\xc3\xeb\x59\xb5\x3e\x7b\x06\xef\x6f\x78\xde\xc8\x6e\xd9\x64\xca\x20\xc7\xf5\xe8\x38\x9e\x51\x7e\xe2\xec\xc5\x69\x61\xbf\x9a\x56\x6f\x47\x8c\x25\x85\x2c\x9f\x5a\x52\xa6\x2d\x07\xa8\x64\xae\x63\x48\x49\x33\x59\x5f\x4d\x22\xf3\xe0\xf0\x18\xcf\xd9\x1b\x81\xcd\x7a\xc0\xed\xf7\xff\x1e\x8e\xb6\x83\x47\xc6\x06\xf2\x62\x0a\xb4\x2d\xa5\xa5\x7f\x33\x26\xdb\x4f\xec\xc3\xef\x64\x4b\x9d\x99\x76\xd2\xd5\x62\xf5\x8e\x63\x9a\x95\x28\x84\xd4\x79\xe0\x07\xee\xba\xeb\x95\xcf\xec\xb6\x5f\x5f\x03\x2f\xef\x21\x66\x33\x10\xd3\x48\x7b\x58\x31\xc6\x28\x96\x65\x7f\xc9\xb4\xc8\x67\x36\xc2\xdf\xff\x6f\xe2\xfd\xd9\x5e\xf1\x3a\xf9\x1d\x00\x00\xff\xff\xe7\x87\xbc\xcd\x3c\x09\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 2364, mode: os.FileMode(420), modTime: time.Unix(1580044304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
