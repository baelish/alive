// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4b\x6f\x1b\x37\x10\xbe\xef\xaf\x98\xf0\x62\x32\x5e\x6d\x64\x17\xbe\x58\xd8\x04\xb1\xeb\x22\x2d\xfc\x28\x6c\x17\x45\x11\xf4\x40\x2d\x47\x2b\xd6\x14\x29\x90\x5c\xbd\x1c\xfd\xf7\x82\xcb\x7d\x48\x82\x65\xe4\x24\x71\xe6\x9b\xef\x1b\xce\x83\xbb\xe0\x16\x9c\xa9\x6c\x81\x90\x83\xc6\x25\xdc\x2c\x50\xfb\xa7\xda\x42\xc9\x27\x0c\x27\xf7\x89\xb0\x51\x12\x51\x99\xd1\x33\x74\x8e\x97\x01\x3f\xa9\x74\xe1\xa5\xd1\xb4\x86\x31\x78\x4d\x00\x00\x02\x65\x6d\x80\x1c\xfe\x78\x7a\xb8\xcf\xe6\xdc\x3a\x8c\x98\x4c\x70\xcf\x59\x0d\x73\x4b\xe9\x8b\x69\x63\xf6\xeb\x39\xb6\xf1\x00\x05\x77\x08\xe4\x05\x71\xce\x95\x5c\x20\xb9\x6c\xec\x00\x9d\x8d\xb2\xa4\x33\x8e\x2d\xf2\x97\x51\xb2\x17\x5c\xcd\x05\xf7\x78\x65\x56\x3b\xc1\x21\x31\xcf\x6d\x89\xfe\xca\xac\x20\x07\x61\x8a\x6a\x16\xd4\x4b\xf4\x37\x0a\xc3\xdf\xab\xf5\xef\xa2\x49\x49\x0a\x36\xea\x42\x8b\x29\xd7\x25\x7e\x55\x68\xfd\x2d\x2e\x50\xd1\x8e\x27\x8d\x77\xcd\x0a\xa3\x8c\x6d\x0f\x8a\x3b\x7f\x17\xcb\xc4\x46\xef\x27\x2a\x50\xe1\x61\xa2\x9d\xad\x4f\xe5\x7d\x12\x8b\xca\x70\xf1\x27\x2f\x77\x6b\xa5\x4c\xc1\x43\x77\xb2\xe8\xa5\xb1\xec\xdb\x64\x3b\x4a\x92\xa4\x6d\x1d\x8c\xcd\xea\x5a\xc9\xe2\x85\x4a\x11\x1a\xb0\xdd\x71\xf5\x69\x44\xdf\x6e\x05\xdf\x29\x5f\xc8\x16\x1a\x58\xe8\x3d\x6a\x7f\x6f\x04\x66\x16\x67\x66\x81\xd7\x53\xa9\x44\x53\x3e\xb6\x27\xb7\xd3\xdb\x9f\x17\x23\xce\x73\x5f\xb9\xc1\x98\x5b\x12\x64\x8f\x34\x2a\x05\x52\x5a\x44\x4d\x52\x20\x35\x4e\x4e\x68\x98\x39\x33\x81\x17\x0e\x1f\xf2\x1c\x48\xa5\x05\x4e\xa4\x46\x41\x18\xbc\x42\xa1\x90\xdb\x67\x39\x43\x53\x79\xfa\xc2\x19\x6c\x13\x08\xd0\x1c\x1c\xfa\xd6\xde\xcd\x3f\x7b\x3d\xae\x6b\x51\x04\xd5\x9b\xc7\xc7\x87\xc7\x4b\xb8\x37\xfd\x3d\x1d\x4c\x8c\x85\x0b\x97\x11\xb6\x4d\xe1\x02\x3e\xc2\xd9\x70\x38\xac\x8b\xd2\x57\x65\xb6\x0e\x6a\xb4\xdb\x2e\x39\x01\x0a\x1e\x3e\xe4\xa0\x2b\xa5\xa0\x5f\x1a\x00\xdb\xac\xf0\xaf\xdc\x87\x80\xd8\x6e\x40\xe5\xf0\x18\xa8\x1d\x89\xda\x81\xbe\xb2\x1a\x6c\xa8\xf0\x6f\x95\x52\xff\x20\xb7\x94\xc1\x29\x90\x01\x81\x53\x98\x73\x41\x6b\xdf\x9d\xd1\x7e\x5a\x3b\xce\xd2\xf3\xce\xdf\xf1\x77\xb8\x28\xd0\x40\x9e\xf7\x28\xbe\x99\xca\xba\xce\x77\xf9\x66\xf8\x9d\xd4\x95\xc7\x7d\x54\xef\x7d\xc2\xc2\x68\x11\xbd\xfb\xf5\x0a\x10\x9d\xc2\x52\x0a\x3f\x4d\x61\x13\xeb\xb3\x81\x1c\x36\xf0\xe3\x07\x9c\x0c\x4f\xc2\x52\xeb\x50\x04\x38\x85\x93\xfa\xd4\xdc\x5c\x67\x0a\x75\xe9\xa7\xf0\x39\x8f\xe1\xf0\x05\x34\x5c\xd6\xd5\xfa\x6a\x2d\x5f\xd3\x68\x1d\xf4\xc8\x53\x38\x63\xd9\x7f\x46\x6a\xba\x09\x49\xea\xd1\x7e\x2e\x47\x87\x42\x85\x53\x0a\xcd\x4b\xba\xd7\xda\xef\x84\xcf\xc6\x68\x49\xda\x0e\x6c\xf8\x5d\x93\xb4\x9e\xa3\x7f\x33\xa9\x05\xae\x1e\x26\xb4\x66\x60\x90\xe7\x30\x38\x0b\xf3\x5a\x9f\x21\x87\x88\x6e\x5a\xda\xec\x60\xa1\xb8\x73\xb7\xd2\xf9\x66\x05\x69\x2b\xb1\xb3\x14\x51\x24\x4e\x2b\x7b\x3b\x98\x0b\xd1\xc8\xee\xfa\xfb\x7d\x74\x57\xeb\xeb\x00\xbe\xe7\x33\xa4\xa4\xb9\x1b\x61\xdf\x87\x21\x6b\x8d\xf6\xdb\xf3\xdd\x2d\xe4\xed\xa5\x7f\x86\x23\x3c\xa3\x7f\xd5\x0f\xb9\x78\x83\x27\x2e\xc6\x41\xfb\xad\x2c\xa7\xfe\x49\x6e\xf0\x4a\x96\xe1\xe5\xda\xfd\x28\xf1\x05\x97\x8a\x8f\x15\xfe\x5d\xf7\x31\x87\x3b\xee\xa7\xd9\x44\x19\x63\x29\x5d\x4a\x2d\xcc\x32\x2a\x44\xff\xe0\x97\x21\x83\x4f\x70\x71\x76\xce\xe0\x63\xf8\xa9\x89\xea\x19\x88\xdf\x0f\x7a\x40\xf8\x39\x8f\xe0\x2f\x07\x4a\x97\x6d\xec\xb1\x47\xec\x64\x2c\xcb\xc1\xd8\xac\x4e\x58\xe6\xfc\x5a\x61\xb6\x6c\x12\xec\xc4\x4e\x81\xcc\x57\xe4\x7d\x92\xfe\x25\x3c\xe4\xa1\x3d\xd1\xe0\x1c\x58\xcb\xb6\x4d\xfe\x0f\x00\x00\xff\xff\xf2\xe5\x36\x3a\xfe\x07\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 2046, mode: os.FileMode(420), modTime: time.Unix(1563130305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x72\x9b\x30\x10\xc6\xef\x7e\x0a\x4d\x32\xbd\x05\x0f\x98\xd8\x69\xe4\x5b\xa7\x6f\xd0\xa6\xf7\x05\x2d\x78\x1b\x21\x79\xa4\xc5\xb1\x9b\xc9\xbb\x77\x6c\x64\xc0\x05\xff\xe9\x4c\x8e\x2c\xdf\xf7\xfb\x96\xdd\x65\x2d\xde\x0b\x6b\x38\x2a\xa0\x22\xbd\x93\xe2\xee\x3b\xfe\x86\x4d\x2d\x7e\x80\xf1\x77\x0f\xe2\x17\x3a\x05\x06\x1e\x84\x07\xe3\x23\x8f\x8e\x8a\xe5\xc7\x64\xa2\x68\x33\x2d\x1d\xa2\x11\xef\x13\x21\x84\xc8\x20\x7f\x2d\x9d\xad\x8d\x8a\x72\xab\xad\x93\xf7\x69\x9a\xe7\x69\xba\x9c\x04\xb1\x43\x75\x56\x9a\xe7\x71\x1c\xc7\xad\x14\xaa\x0c\xdd\x59\x71\x51\x7c\xed\x8b\x4b\x87\xbb\xb3\x5a\x48\x9e\xf1\x39\x6f\xb5\x5b\x0d\xae\xc4\xa0\x7e\x23\xc5\x2b\x39\x4f\xe2\xf5\x76\x79\x28\xac\x90\xca\x15\xf7\x2b\x87\xb9\x78\xfa\x83\x72\x86\x55\x4b\x51\xb7\x50\x66\xf3\xc7\x21\x25\x99\xce\x7b\x9c\x21\xa6\x67\xba\x1d\xa3\x2a\x54\x54\x57\x57\x40\xc9\x6c\x31\x06\x4a\x66\x7d\xd4\x08\xa9\xe7\xfb\x1f\x92\xf2\x15\x68\x7d\x85\xb4\x98\x0d\x41\xf1\xf4\xa9\xcf\x19\x62\x3a\xd3\xed\x14\x55\x51\xee\xec\x65\x4c\x3a\xb2\xf5\xf8\x64\xd0\x43\x48\xfa\xef\xd6\xaf\x43\x3c\x03\xd7\x3e\x50\x82\x4b\x8c\xd9\x92\xce\x74\xdf\x98\xa2\x0c\x9c\x58\x4f\x99\x58\x1f\xcf\xa6\x93\x8b\x24\x8e\xbf\x34\x8c\xb5\xf5\xc4\x64\x8d\x14\x90\x79\xab\x6b\xc6\xa6\xae\xb1\xd8\x67\x35\x0f\x99\x65\xb6\x95\x14\xc9\x78\x88\x06\xcf\x2f\x6b\x05\xdc\xfe\xb5\xbd\xa8\xa7\xf9\x95\x24\x17\x3e\xeb\x4c\xd4\x34\xb3\xdb\x40\x6d\xfe\x53\xf1\xb6\xa2\xa3\xb7\xd0\x16\x58\xee\x7b\x6d\x9e\x2b\x70\x25\x99\x28\x40\xda\xad\x85\x72\x93\xd4\x56\xbb\x86\x1c\x6a\x60\xda\x04\x28\xe3\x96\x23\xd0\x54\x1a\x29\x72\x34\x8c\xae\xeb\x85\xca\xa8\xeb\xa7\xc1\x4a\x01\x35\xdb\x83\xe4\x74\xde\xc7\x66\xb4\xcd\x5f\x23\xcf\xe0\x58\x8a\xe3\x30\x4e\xde\xa1\x51\x27\x90\x0a\xbd\x87\x72\xb8\xb6\x45\x3c\xe6\x0e\xe4\x70\x39\xd7\xe1\xb0\xfd\xf9\xed\x65\xc0\x7e\xbc\xc4\x6e\xec\x97\xd0\xfb\x77\x1b\xf2\x94\x91\x26\xde\x49\xb1\x22\xa5\xd0\x84\xc8\x4b\xf7\xf1\x09\xb9\xe7\x0e\xab\x77\x4a\xa7\x77\xf6\x31\xf9\x1b\x00\x00\xff\xff\x64\x2f\xe5\xf4\xc7\x06\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1555877026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
