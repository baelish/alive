// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static-source/scripts.js (2.237kB)
// static-source/standard.css (2.05kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x5b\x6f\xdb\x38\x13\x7d\xd7\xaf\x98\xf2\xc5\x54\x2d\x2b\x4e\x3f\xe4\x25\xfe\xd4\xa2\xc9\x66\xd1\x5d\xe4\xb2\x48\xb2\x28\x16\x41\x1f\x68\x71\x24\x73\x43\x93\x06\x49\xf9\x92\xd4\xff\x7d\x41\x51\x17\xdb\x88\x83\x3e\x25\x9a\x39\x73\x66\x78\xe6\xe2\x25\x33\x60\x75\x65\x72\x84\x0c\x14\xae\xe0\x6a\x89\xca\x3d\xd4\x16\x4a\x4e\xd0\x7f\xd9\x13\x12\x4f\xa2\x80\x4a\xb5\x9a\xa3\xb5\xac\xf4\xf8\xa2\x52\xb9\x13\x5a\xd1\x1a\x16\xc3\x6b\x04\x00\xe0\x29\x6b\x03\x64\xf0\xe7\xc3\xdd\x6d\xba\x60\xc6\x62\xc0\xa4\x9c\x39\x16\xd7\x30\xbb\x12\x2e\x9f\x35\x66\xb7\x59\x60\x1b\x0f\x90\x33\x8b\x40\x9e\x11\x17\x4c\x8a\x25\x92\xf3\xc6\x0e\xd0\xd9\x68\x1c\x75\xc6\xa9\x41\xf6\x3c\x89\xf6\x82\xab\x05\x67\x0e\x2f\xf4\x7a\x27\xd8\x17\xe6\x98\x29\xd1\x5d\xe8\x35\x64\xc0\x75\x5e\xcd\x7d\xf6\x12\xdd\x95\x44\xff\xef\xc5\xe6\x0f\xde\x94\x24\x78\x3c\xe9\x42\xf3\x19\x53\x25\x7e\x95\x68\xdc\x35\x2e\x51\xd2\x8e\x27\x09\x6f\x4d\xad\x63\xae\xb2\xed\x97\x64\xd6\xdd\x04\x9d\xe2\xc9\xfb\x95\x72\x94\x78\x58\x69\x67\xeb\x6b\x79\x9f\xc4\xa0\xd4\x8c\xff\xc5\xca\x5d\xb1\xa4\xce\x99\x6f\x4f\x1a\xbc\x34\xe8\xbe\x8d\xb6\x93\x28\x8a\xda\xde\xc1\x54\xaf\x2f\xa5\xc8\x9f\xa9\xe0\x6d\x07\x56\x42\x71\xbd\x4a\xbb\xf8\x99\xc1\x02\x32\x20\x27\x53\xbd\x3e\x21\x30\x04\xc1\xa3\xed\x0e\x45\x5f\x6e\xcb\xd1\x4b\xfd\x8e\xce\xfe\x55\xd0\xc0\xfc\x90\xa0\x72\xb7\x9a\x63\x6a\x70\xae\x97\x78\x39\x13\x92\x37\x3a\xc7\x7b\xe9\x76\x86\xe0\xd7\x93\x91\xd0\xa0\xd1\x94\x19\xe2\xd3\x1e\xe9\x68\x02\xa4\x34\x88\x8a\x24\x40\x6a\x9c\x28\xa8\x1f\x4e\x5d\xc0\x33\x83\x0f\x59\x06\xa4\x52\x1c\x0b\xa1\x90\x93\x18\x5e\x21\x97\xc8\xcc\xa3\x98\xa3\xae\x1c\x7d\x66\x31\x6c\x23\xf0\xd0\x0c\x2c\xba\xd6\xde\x2d\x4a\xfc\x7a\x3c\xaf\x41\xee\xb3\x5e\xdd\xdf\xdf\xdd\x9f\xc3\xad\xee\xdf\x69\xa1\xd0\x06\xce\x6c\x4a\xe2\x6d\x02\x67\xf0\x11\x4e\xc7\xe3\x71\x2d\x4a\xaf\xca\x7c\xe3\xb3\xd1\x6e\x0d\x45\x01\x14\x1c\x7c\xc8\x40\x55\x52\x42\xbf\x5d\x00\xa6\xd9\xf5\xdf\x98\xf3\x01\x61\x2c\x00\xa5\xc5\x63\xa0\x76\x74\x6a\x07\xba\xca\x28\x30\x5e\xe1\xdf\x2b\x29\xff\x41\x66\x68\x0c\x43\x20\x23\x3f\x1b\x0b\xc6\x69\xed\xbb\xd1\xca\xcd\x6a\xc7\x69\xf2\xa9\xf3\x77\xfc\x1d\x2e\x24\x68\x20\x8f\x7b\x14\xdf\x74\x65\x6c\xe7\x3b\x7f\x33\xfc\x46\xa8\xca\xe1\x3e\xaa\xf7\x3e\x60\xae\x15\x0f\xde\x7d\xbd\x3c\x44\x25\xb0\x12\xdc\xcd\x12\x78\x09\xfa\xbc\x40\x06\x2f\xf0\xf3\x27\x0c\xc6\x03\xbf\xfd\xca\x8b\x00\x43\x18\xd4\x5f\xcd\xcb\x55\x2a\x51\x95\x6e\x06\x9f\xb3\x10\x0e\x5f\x40\xc1\x79\xad\xd6\x57\x63\xd8\x86\x06\xeb\xa8\x47\x0e\xe1\x34\x4e\xff\xd5\x42\xd1\x17\x5f\xa4\x9a\xec\xd7\x72\x74\x28\xda\xab\xd2\xdc\xdc\xbd\xde\x3e\x11\x36\x9f\xa2\x21\x49\x3b\xb1\xfe\xef\x86\x24\x44\xe9\xbf\xeb\xeb\x47\x92\x7a\xa6\x7e\xa4\x42\x71\x5c\xdf\x15\x34\xb0\xc5\x90\x65\x30\x3a\xf5\xc3\x1b\x0c\x7e\xb5\xeb\xd0\xa6\xc1\xcd\x46\xe6\x92\x59\x7b\x2d\xac\x6b\x16\x92\xb6\xf9\x76\x56\x24\x64\x84\x9d\x94\x61\x8e\xe3\xb7\x89\x18\xe7\x6d\x11\xbb\x80\x7e\x55\xed\xc5\xe6\xd2\xa3\x6f\xd9\x1c\x29\x69\x5e\x4d\xe2\xa7\xb1\x7f\x84\x42\xf3\xed\xf1\xe6\x1a\xb2\x56\x8e\x5f\xe1\xf0\x97\x38\xd4\xc6\xdf\xe0\x09\x3b\x73\x30\x19\x46\x94\x33\xf7\x20\x5e\xf0\x42\x94\xfe\xa8\xb5\xaa\x4b\x74\xc0\x96\x4c\x48\x36\x95\xf8\xbd\x6e\x71\x06\x37\xcc\xcd\xd2\x42\x6a\x6d\x28\x6d\xee\x66\x9d\x21\xf8\x47\xff\x1b\xc7\x70\x02\x67\xa7\x9f\x62\xf8\xe8\xff\x4c\x3a\xa6\x7a\x46\xc2\x0f\x11\x3d\x60\xfd\x9c\x85\x88\x2f\x07\xe9\xce\x3b\x82\x63\x57\x6e\x30\x15\xe5\x68\xaa\xd7\x83\x38\xb5\x6e\x23\x31\x5d\x35\x65\x76\xd9\x86\x40\x16\x6b\xd2\x97\x51\x54\x52\x7e\x6f\x9c\x68\xdf\x3e\xa0\x7b\x8a\x0e\x7c\x44\x4d\x37\x68\x7e\x20\xfd\x71\xa2\x9e\x4b\x40\x06\xe3\x09\x08\xf8\xff\x01\x6d\xb3\x06\x13\x10\xc3\xe1\xee\x21\xda\x47\x3d\x89\x1f\x07\x55\xd3\xae\xec\x11\x84\xed\xee\x6a\xdf\x46\xdb\xe8\xbf\x00\x00\x00\xff\xff\x3f\x00\x2f\x69\xbd\x08\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 2237, mode: os.FileMode(0644), modTime: time.Unix(1578645947, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x5c, 0x2b, 0xbc, 0x8a, 0xb4, 0xd5, 0x44, 0xc3, 0x8a, 0x7b, 0xc9, 0x5f, 0x95, 0x80, 0x99, 0xbe, 0xfc, 0x51, 0x86, 0xd6, 0x8b, 0x1d, 0xfd, 0xd3, 0xd2, 0xe3, 0xa1, 0xd0, 0xd1, 0x99, 0x35}}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdd\x72\x9b\x30\x10\x85\xef\x79\x0a\x4d\x32\xbd\x33\x0c\x98\xd8\x69\xf0\x5d\xa7\x6f\xd0\xa6\xf7\x0b\x5a\xb0\x1a\xfd\x30\x92\x70\xec\x66\xfc\xee\x1d\x5b\xe2\xc7\x01\x6c\x77\xa6\x77\x46\x9c\xf3\xed\x7a\xf7\x88\x9a\x7c\x94\x4a\xda\xb0\x04\xc1\xf8\x21\x23\x0f\xdf\xf1\x37\xec\x1a\xf2\x03\xa4\x79\x58\x90\x5f\xa8\x29\x48\x58\x10\x03\xd2\x84\x06\x35\x2b\x37\xc7\x20\xa0\x6c\x17\x55\x1a\x51\x92\x8f\x80\x10\x42\x72\x28\xde\x2a\xad\x1a\x49\xc3\x42\x71\xa5\xb3\xc7\x34\x2d\x8a\x34\xdd\x04\x5e\xac\x91\x2e\xc8\xe9\x87\x54\xaf\x35\x05\x8b\xb3\xc6\xa2\x88\xe3\x38\xee\x8c\x20\x72\xd4\xb3\xe2\xb2\xfc\x3a\x14\x57\x1a\x0f\xb3\x5a\x48\x5e\xf0\xa5\xe8\xb4\x7b\x0e\xba\x6a\xdb\x78\x67\xd4\x6e\xb3\x55\x12\xd7\xfb\xcd\xf9\x60\x8b\xac\xda\xda\xe1\xc9\x79\x4a\x86\xfd\xc1\x6c\x89\xa2\xa3\xd0\x7b\x28\xcb\xd5\xd3\x98\x92\x44\xab\x01\x67\x8c\x19\x98\xee\xc7\x50\x81\x94\x35\xe2\x06\x28\x59\xae\xa7\x40\xc9\x72\x88\x9a\x20\x0d\x7c\xff\x42\xa2\x46\x00\xe7\x37\x48\xeb\xe5\x18\x14\x47\xcf\x43\xce\x18\xd3\x9b\xee\xa7\x50\xc1\x0a\xad\xae\x63\xd2\x89\xad\xc7\x17\x83\x1e\x43\xd2\xcf\x5b\xbf\x0d\x31\x16\x6c\x63\x3c\xc5\xbb\xc8\x94\x2d\xe9\x4d\x8f\xce\x14\xe6\xa0\x49\x1d\x59\x66\x79\x1b\x9b\x5e\x4e\x92\x38\xfe\xe2\x18\xb5\x32\xcc\x32\x25\x33\x02\xb9\x51\xbc\xb1\xe8\xce\x39\x96\xa7\x5a\xee\x21\x57\xd6\x2a\x91\x91\x64\xba\x08\x07\x63\xdd\xa5\xa5\xe3\x52\xcf\xab\x1b\x95\xb4\xff\x5b\x33\xa5\xa2\x5c\xed\x3d\xd5\xdd\x53\xf2\xbe\x65\xad\xb7\xe4\x0a\x6c\x76\xea\xd5\x3d\x0b\xd0\x15\x93\xa1\x87\x74\x5b\xf3\xc7\xae\x52\x77\xda\x37\xa4\x91\x83\x65\x3b\x0f\xb5\xb8\xb7\x21\x70\x56\xc9\x8c\x14\x28\x2d\xea\xbe\x17\x56\x85\x7d\x3f\x0e\x9b\x11\x68\xac\x3a\x4b\x2e\xe7\xdd\x36\xc3\x55\xf1\x16\x1a\x0b\xda\x66\xa4\x1d\xc6\xc5\x3b\x94\xd4\x41\x1c\x43\xa0\x31\x50\x8d\xb7\xb6\x8e\xa7\xcc\x1e\xec\x83\x33\xcf\xf6\x0d\x0a\xd8\xff\xfc\xf6\x3a\x62\x3f\x5d\x63\x3b\xfb\x35\xf4\xe9\x1d\x65\xa6\xe6\x70\xc8\x88\x54\x12\x7d\xb5\x6b\xc9\xf8\x0f\x25\xe7\x22\x35\x08\xd1\x65\xc2\x8e\x41\x10\x31\x59\x2a\x62\x21\xef\xf6\x54\x03\xa5\x4c\x56\xa1\x8b\xfc\xaa\x8d\xc7\x65\xda\x8e\xad\x71\xeb\x5d\xc3\x94\x9c\x0b\x9c\x35\xee\xda\x7f\x5a\xe1\x78\x32\xed\x47\xe6\xb6\xd0\xeb\xc6\x83\xbc\x02\xbd\x4b\xec\x3e\x96\xf7\x68\xff\x06\x00\x00\xff\xff\x08\xd1\xd0\x19\x02\x08\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 2050, mode: os.FileMode(0644), modTime: time.Unix(1578663801, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xc, 0x91, 0x48, 0x9b, 0x23, 0x1b, 0x25, 0x4a, 0xf2, 0x96, 0xd, 0x1b, 0xef, 0x92, 0x3c, 0xcd, 0x56, 0xa1, 0x10, 0xe, 0x2d, 0xc2, 0xaa, 0x3d, 0xce, 0xc1, 0x6d, 0x58, 0x33, 0x5e, 0xb2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
