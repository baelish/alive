// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataScriptsjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\xe5\x8b\xa9\x5a\x51\xec\x6c" +
	"\x7b\xb1\xa1\x16\x75\x9b\xa1\x03\x92\x74\x48\x32\x0c\x83\xe1\x07\x5a\x3c\xcb\x5c\x69\xd2\x20\x29\xff\x4a\xfd\xbf" +
	"\x0f\x24\x65\xc5\x0a\x92\xa1\x4f\x32\x79\xdf\x7d\x1f\xef\x3b\xf2\xbc\x61\x06\x9c\x58\xa1\xae\x9d\x85\x02\xa6\xb3" +
	"\x24\xf1\x5b\x56\xd7\xa6\x44\x28\x40\xe1\x16\xae\x37\xa8\xdc\x43\xd8\xa1\xe4\x12\xfd\xca\x5e\x92\x74\x9c\x44\x54" +
	"\xae\xd5\x0a\xad\x65\x95\xc7\x2f\x6a\x55\x3a\xa1\x15\x0d\xb0\x14\x9e\x12\x00\x00\x4f\x19\x36\xbe\xa0\x63\x42\x7a" +
	"\xa5\xb0\xcc\x39\x73\x2c\xb7\x6b\x29\x1c\xed\x65\xbd\x34\x80\xed\x56\xb8\x72\x49\xcf\xf1\xd3\xc1\xec\x44\x05\x50" +
	"\x32\x8b\x40\xea\x35\x67\x0e\x27\x7a\x47\x46\xcd\x7e\x94\x71\xcc\x54\xe8\x26\x7a\x07\x05\x70\x5d\xd6\x2b\x2f\x53" +
	"\xa1\xbb\x96\xe8\x7f\x4e\xf6\x7f\xf0\x2e\xf5\x70\x96\x8e\x5b\x86\x72\xc9\x54\x85\x9f\x24\x1a\x77\x83\x1b\x94\xb4" +
	"\xa5\xcb\x3a\x05\x4c\xaf\x66\x2f\x36\x7e\x39\xa7\x99\x1b\x64\xdf\xc7\x9d\xf3\x1a\x94\x9a\xf1\x3f\x59\x85\x67\x07" +
	"\x96\xba\x64\xde\xad\x3c\x46\x69\x34\xe0\x98\x1c\xc7\x49\x92\x9c\xac\x84\xb9\xde\x7d\x96\xa2\xfc\x4e\x05\xf7\x2e" +
	"\x1c\xcf\x63\xab\xfd\xa3\x58\x21\x6d\x9d\x16\x0b\xa0\xe0\xe0\x5d\x01\xaa\x96\x12\x9e\x5d\x03\x30\x4d\x3b\xbf\x30" +
	"\xe7\x13\xa2\x14\xa0\xb4\xf8\x16\xe8\x74\x9c\x10\x40\x57\x1b\x05\xc6\x7b\xf9\x7b\x2d\xe5\x3f\xc8\x0c\x4d\xa1\x0f" +
	"\xe4\x82\x40\x1f\xd6\x8c\xd3\x10\xbb\xd5\xca\x2d\x43\x60\x98\x5d\xb5\xf1\x96\xbf\xc5\x45\x81\x06\xf2\xd8\xa1\xf8" +
	"\xaa\x6b\x63\xdb\xd8\xc8\xc7\x22\xb5\x50\xb5\x43\xeb\xc9\x5b\xbe\x18\x6e\x53\x1f\xb0\xd4\x8a\xc7\xe4\xae\x51\x1e" +
	"\xa2\x32\xd8\x0a\xee\x96\x19\x1c\xa2\x31\x07\x28\xe0\x00\x3f\x7e\x40\x6f\xd0\xf3\xed\x52\xbe\x7a\xe8\x43\x2f\xac" +
	"\x9a\x92\x55\x2e\x51\x55\x6e\x09\x1f\x8a\x98\x0e\x1f\x41\xc1\x28\xd8\xf4\xc9\x18\xb6\xa7\x71\xf7\xe2\x19\xd9\x87" +
	"\x61\x9a\xff\xab\x85\xa2\x07\x5f\x83\x1a\x77\xcf\xf2\xc6\x2d\xcb\x40\xfa\x55\x06\xcd\x73\xea\xf4\x74\x4a\xd8\x6a" +
	"\x8e\x86\x64\xa4\x32\x88\x2a\x7e\xf7\x24\x23\x06\x39\x99\xe5\x42\x71\xdc\x7d\x5b\xd0\xc0\x90\x42\x51\xc0\xc5\x30" +
	"\x85\xa7\xc8\x08\x05\x44\x74\xd3\xcb\x28\x97\x97\x92\x59\x7b\x23\xac\xcb\x0d\xae\xf4\x06\xe9\x49\x02\x4e\x1a\x4d" +
	"\x5a\x06\x41\x25\x7d\x3d\x99\x71\xde\xc8\x9e\xc7\x9f\x9f\x9c\x9d\xec\x3f\x7b\xf0\x1d\x5b\x21\x25\x4d\x6d\x24\x9d" +
	"\x0e\xfc\xa9\x15\x9a\xaf\x8f\xb7\x37\x50\x9c\x8a\xfe\x19\x0e\xc9\xac\xfb\x2b\xbc\x7f\xfe\x0a\x4f\x7c\x11\x2f\xda" +
	"\x6f\x44\xb5\x74\x0f\xe2\x80\x13\x51\x4d\xf4\x8e\x9e\x4f\x26\xb6\x61\x42\xb2\xb9\xc4\xbf\x43\x1f\x0b\xb8\x65\x6e" +
	"\x99\x2f\xa4\xd6\x86\x6e\x85\xe2\x7a\x1b\x05\x62\xf8\x12\x7e\x1b\x5e\xa5\xf0\xde\x7f\x02\x45\xe8\x7e\x1c\x38\xf4" +
	"\x05\xd5\x87\x02\x86\x83\xab\x5f\x53\xf8\xf8\x42\x64\xe4\xb7\x43\xf6\x5b\x33\xaa\x37\x17\xd5\xc5\x5c\xef\x7a\x69" +
	"\x6e\xdd\x5e\x62\xbe\x6d\x0e\xd7\xca\xf5\x81\xac\x77\xa4\x5b\x26\xf3\x77\xea\x4e\x47\x73\xa8\xe0\x59\x18\xee\xcf" +
	"\x17\x89\xba\xfd\x1a\xf5\xa2\x1d\xf9\x53\xc1\x67\xf0\xae\x28\x80\xd4\x8a\xe3\x42\x28\xef\x28\x3c\x41\x29\x91\x99" +
	"\xc7\x08\xa2\xe7\xe0\xf4\x38\x4e\xba\xa3\xf6\x7f\xe6\xac\xe0\xcd\x95\x38\x57\x2b\xc0\xa2\x3b\x51\xb7\x7f\x17\xe9" +
	"\xd3\x9b\x8f\x22\xdc\xbd\x0c\xc8\xf5\xfd\xfd\xb7\xfb\x11\xdc\x69\x88\xb3\xdf\xc2\x42\x1b\xf0\xcf\xdf\xf3\x7b\x3b" +
	"\x6c\x4e\xd2\x63\x2c\x19\xde\xc3\x70\x30\x18\xf8\x5b\xf0\x5f\x00\x00\x00\xff\xff\x97\xf7\xb2\x40\xe3\x06\x00\x00" +
	"")

func bindataScriptsjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataScriptsjs,
		"/scripts.js",
	)
}



func bindataScriptsjs() (*asset, error) {
	bytes, err := bindataScriptsjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/scripts.js",
		size: 1763,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554022178, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStandardcss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\x4b\x6e\xdb\x30\x10\x06\xe0\xbd\x4f\x41\xa0\xe8\x52\x86\x1e\xb1" +
	"\xdb\xd0\xbb\x9e\xa1\x39\xc0\x88\x1c\x4b\x83\xf0\x61\x90\x63\x47\x69\xd1\xbb\x17\xb1\x68\x49\xae\xfc\x2a\x90\xa5" +
	"\xc8\x7f\x3e\x11\x9c\x01\x35\x1d\x96\x4d\x40\x74\xe2\xf7\x42\x08\x21\x6a\x50\xaf\x4d\xf0\x7b\xa7\x33\xe5\x8d\x0f" +
	"\xf2\x4b\x55\x29\x55\x55\x9b\xc5\x9f\xc5\xe2\x23\x1c\x50\x5f\x8d\x2a\x95\xe7\x79\x3e\x44\xc1\xd6\x18\xae\x86\xb7" +
	"\xdb\xef\xd3\x70\x13\xf0\xfd\x6a\x16\x8a\x67\x7c\x56\x43\xb6\x33\x10\x1a\x4c\xe9\x37\xd2\xdc\xca\x55\x91\xef\xba" +
	"\xcd\x71\xa1\x45\x6a\x5a\x9e\xae\x6c\xbd\xe3\x2c\xd2\x2f\x94\x25\xda\x41\xd1\x8f\x28\xe5\xea\x69\xae\x14\xcb\xd5" +
	"\xc4\x99\x33\x93\xa2\xc7\x19\x6d\x51\xd3\xde\xde\x81\x8a\x72\x7d\x09\x2a\xca\x29\x75\x41\x9a\xd4\xfd\x8f\xa4\xa3" +
	"\x05\x63\xee\x48\xeb\x72\x0e\xe5\xcb\x6f\x53\x67\xce\x8c\x45\x8f\x2b\xda\x92\x0a\xfe\x36\x53\x5d\xe8\x7a\x7e\x76" +
	"\xd1\x73\xa4\xfa\xb7\xeb\xf7\x91\xda\x77\x89\xe8\x47\x54\xbc\xb5\xc4\x98\x6a\x8c\x07\x96\x06\xb7\xdc\x7f\x5b\x08" +
	"\x0d\xb9\xac\xf6\xcc\xde\xca\xe1\xc0\x69\x39\xf4\x03\x72\x5a\xdd\xf9\x48\x4c\xde\x49\x11\xd0\x00\xd3\x21\xa1\x8c" +
	"\x1d\x67\x60\xa8\x71\x52\x28\x74\x8c\x61\x3c\x0b\x35\xd9\x78\x9e\x9e\x95\x02\xf6\xec\x8f\x91\xdd\x92\x89\x0d\x9e" +
	"\x6d\x67\xb5\xf1\xea\x35\x8b\x0c\x81\xa5\x58\x7d\xdd\xcc\xf7\xd0\xe9\x33\xc4\x62\x8c\x30\x0c\xfa\x78\x2f\xeb\xfc" +
	"\x52\x75\x92\xd3\xa5\xdd\xc7\xa1\xfb\xf9\xe3\x65\x66\x3f\xdd\xb2\xfb\xf2\x5b\xf4\xc7\xde\x81\x22\xd5\x64\x88\xdf" +
	"\xa5\x68\x49\x6b\x74\xe9\x97\x06\x22\xbf\xec\x34\xf0\xf0\xa0\x7d\xea\x7f\xc7\x3e\x42\x1d\xbd\xd9\x9f\x86\x23\x4d" +
	"\x81\x28\xfa\xcf\xbe\xfb\xe2\xf8\xbe\xfe\x0d\x00\x00\xff\xff\x96\xeb\xbe\x5b\x8c\x05\x00\x00")

func bindataStandardcssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStandardcss,
		"/standard.css",
	)
}



func bindataStandardcss() (*asset, error) {
	bytes, err := bindataStandardcssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/standard.css",
		size: 1420,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554021566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/scripts.js":   bindataScriptsjs,
	"/standard.css": bindataStandardcss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"scripts.js": {Func: bindataScriptsjs, Children: map[string]*bintree{}},
		"standard.css": {Func: bindataStandardcss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
