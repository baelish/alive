// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\xc5\x64\x4a\x32\x96\x29\xa5\x3b\xed\x83\x65\xb9\x13\xbb\x99\x69\x77\x13\xbb\x63\x3b\xd3\x87\x4c\x66\x03\x91\x47\x14\x62\x0a\xe0\x00\xd0\xcd\xae\xfe\xfb\xce\x01\xc0\x8b\x14\xa9\x75\x77\xb3\xbb\x79\x88\x49\xe0\x5c\x3e\x1e\x7c\xe7\x02\x0d\x5e\xc2\x67\x33\x13\xd2\x02\x9a\x25\x6a\x23\x94\x3c\x83\x1f\xe0\xe5\xa0\xd7\x1b\x0c\xe0\x16\x4b\xc5\x73\x10\x53\xd0\x78\xba\x14\x46\x58\x21\x0b\x58\x18\xfa\x7f\xc2\xb3\x87\xc1\x54\xe9\x15\xd7\x39\x4c\x16\xd6\x2a\x69\xd2\x9e\x98\x42\x7c\x67\xb5\x90\x45\xbc\x12\x32\x57\xab\xb4\x42\x3d\x55\x7a\xce\x65\x86\x69\x81\xf6\x8d\xb4\x5a\xa0\xb9\xdc\xdc\x6f\x2a\x8c\x99\xe4\x4b\x51\x70\x2b\x94\x64\xc9\x87\xe1\xc7\xd4\x6e\x2a\x4c\x60\x3c\x1e\x03\x23\x07\xff\x0c\x0e\x58\xf2\xd4\x03\x28\x55\xe6\x44\x53\xed\x70\xc5\xc9\xa8\xb7\xed\x05\xa0\x85\x30\x16\x35\xac\x84\x9d\xc1\x44\xad\x01\x97\x28\x2d\x18\xb5\xd0\x19\xf6\x4a\xac\x1f\x61\x0c\x12\x57\xf0\x86\x76\xef\xdc\x4a\xcc\x06\x4e\xd6\x0c\x58\x32\xea\x79\xa9\x54\xc9\x39\x1a\xc3\x0b\x92\x9f\x2e\x64\x46\x5e\x63\x27\x96\x00\x21\xf1\xd6\xc7\xf0\xf7\xbb\x9b\xeb\xb4\xe2\xda\xa0\xdf\x4d\x73\x6e\x79\x32\xea\x01\x98\x95\xb0\xd9\x2c\xac\xfa\xaf\x22\x45\x80\x8c\x1b\x04\xf6\x80\x58\xf1\x52\x2c\x91\x9d\xb9\x55\x80\x66\x85\x3e\x2b\xac\x4d\x34\xf2\x87\xf0\xe6\xf5\x16\x55\xce\x2d\x5e\xaa\x75\xa3\x47\x11\x87\x10\xeb\x26\x40\x15\xb7\x33\xc9\xe7\xe8\x23\x39\x60\xf0\xfb\xef\x7f\x2c\xf3\x69\x30\x51\xeb\xc1\x8b\x27\x8f\x57\xe4\xdb\x4f\x35\x5e\xfa\xd7\x78\x0d\x31\x18\x85\x9d\xed\x71\xa0\x39\x96\xf8\xbf\x07\xda\x78\x8d\xeb\xfd\xe7\x60\xcd\x34\xfe\x5b\x41\xed\x7a\x6e\x6c\x04\xcf\x7c\x6a\x51\xf7\x3d\x51\xd2\x89\x5a\x3f\x07\x87\xa7\xf5\xaf\xbc\x68\x59\x71\x80\xf2\x64\x62\x3b\xf2\xbc\xbf\x54\x6b\xb0\x4a\x95\x56\x54\xbd\x9a\xa7\x44\xff\x9f\xd5\x12\x75\x6c\x45\xe5\x21\x12\xff\x2d\xd7\x05\x12\x67\x73\x95\x2d\xe6\x84\x8a\xb2\xb1\x44\x7a\xbc\xdc\xfc\x92\xc7\x2c\x18\x62\xce\x87\x17\x4f\x85\x94\xa8\x7f\xbe\x7f\xf7\x16\xc6\x60\x45\xd5\xd9\xc9\x85\xa9\x4a\xbe\x01\xca\xd4\x52\x65\x0f\xcc\x27\x63\x17\xc5\xcd\xc2\xc6\x5f\x13\x00\x63\x87\xfd\xcf\x44\x9e\xa3\x64\x4d\x35\xa0\xa8\x64\xa5\xc8\x1e\x76\xd0\x5c\xd1\x4a\x2c\x72\x8f\x68\xff\x70\x67\x1a\xa7\x64\xcb\xd1\x8b\xc1\x09\x88\xbc\xb1\x77\xe5\xce\x96\x6c\xb4\x06\xdb\xf3\x0e\x27\x4d\x67\xdc\x7e\xab\xb0\x25\x12\x58\x22\xd2\x44\xad\x6b\xb4\xd7\x7c\xde\x14\x02\x27\x03\x63\xd8\xdb\x76\x07\x0c\x58\x1a\x3c\x20\x27\x6b\x81\x5e\x70\x94\x8b\xe5\x95\x92\xd6\x57\xa3\x4f\x4e\xfe\x3c\x17\x4b\x50\xd2\x05\x60\x1c\x35\x1f\x6e\x67\xc2\x50\x3e\x44\xa0\xe4\x5c\x2d\x0c\x12\x45\xdc\xbe\x27\x0b\x7b\xf1\x54\x7b\xd8\xb2\x8e\xd4\xc2\x3a\x21\x77\x96\x11\x88\x7c\x1c\x79\x41\x91\x6f\x23\xc8\x4a\x6e\x4c\xbd\x62\x2c\xb7\x0b\xb3\x85\xf0\x26\x1e\x71\x4b\xa0\xa3\x8b\x26\x49\xce\xab\x5a\xc3\x7d\x54\x74\xf1\xe2\xc9\x3d\x6c\xcf\x07\xd5\x21\xa9\x50\x84\x49\x8e\x4c\x96\xdc\xd8\x77\x7e\xe9\x98\x06\x89\xbc\x77\xd5\x2a\xef\x6a\xf9\xa5\xa3\x6e\xf8\xfa\xfe\xf2\x7d\x2d\xef\xdf\x8e\xc9\xe2\xba\x12\x1a\x5f\xd3\x99\xd7\x0a\x9d\xa5\x56\xeb\x7c\x90\x8b\x25\x3d\x7e\x1a\xd5\x67\x55\x69\xcc\x30\x17\xb2\x20\x7e\x1e\x4f\x03\xc7\x27\x97\x02\x5d\x85\x54\x48\x83\xda\xbe\xce\x3f\xf3\x0c\xa5\xa5\x8c\x88\x99\x13\x7d\x23\x73\xd6\xef\x10\xa1\xdb\x15\xe7\x6a\xb9\xc7\xdb\xb6\x42\xd6\x99\xf0\xac\xdc\x0c\x85\x34\xe4\x5e\xc5\x35\x4a\x7b\xad\x72\x4c\xb5\xf3\x71\x35\x13\x65\x1e\xfb\xdd\xd6\xbf\x8f\xfa\xae\xff\xfd\x56\xb2\x07\xe1\x8f\x43\xd3\x29\xea\x21\xb7\x5a\xad\x6f\xc6\x63\x90\x8b\xb2\x6c\xfa\xec\x8c\xcb\x02\x5f\x97\xa8\xed\x5b\x5c\x62\xd9\x8a\xd6\x55\xd9\xf3\xb5\x7e\xeb\x90\x2b\x69\x52\x8c\x5c\xf8\x6d\xcf\x8a\xda\xb8\x03\x4c\x25\xb1\xb6\xd9\x41\x6a\x2e\x37\x57\xc4\x15\x4a\xe6\x98\x79\x3d\x37\xdc\xf8\x0e\xe0\x50\xa7\x96\x17\xd7\x75\x2b\x89\xee\x6f\xa3\xb6\x95\xd8\x5d\x53\xf7\x5e\x30\x8e\xee\x7f\x8a\xdc\x84\xd4\x2d\x88\x5d\x68\xa3\x4e\xeb\xea\xae\xfb\x6e\x35\x34\x2c\x81\x27\xfa\xe6\x4d\x89\xdd\xda\x29\x95\x44\x36\xaa\x0b\xce\x01\x01\xcb\x27\x25\x9e\x6a\xb5\x62\xa3\xad\x73\xb1\x53\x9c\x08\xef\x31\x44\x5e\xfa\xcb\x50\x76\xf2\xe5\xaf\xc7\xb3\xa3\xfc\x5f\x0d\x6a\xc7\xcf\x97\x91\xed\x6c\xfe\x3f\xc2\xdb\x71\xdf\x89\x71\x48\xba\x66\x8e\x74\x53\x2f\xb1\xfa\x1f\x7c\xd4\xe6\x5f\x67\xcc\x6c\x52\x2f\xb3\x61\x2c\xfe\x89\x5b\x8c\x13\x8a\xd5\xbd\x98\xa3\x1f\x36\xdc\x28\xe4\xcd\xc0\xb7\xdf\x42\x1c\x1e\x4f\xe0\x87\xe1\x70\x38\x4c\xe0\x9c\xd4\x13\x78\x3a\x30\xaa\x10\xae\x20\x3e\x86\xcc\x8e\x9e\x3d\x08\xf8\xcc\x3c\x9d\x70\xbd\x33\x0b\xb8\x12\xfc\x56\x18\x1b\xaa\x4e\xcc\xf8\x7c\x82\x9a\xf5\x59\xa1\x11\xa5\xff\xbb\x61\x7d\x26\x95\x2f\x3d\xac\xcf\x34\xe6\x47\x6c\xf0\x3c\x8f\x83\x62\x57\xe0\x68\x22\xfb\xda\xc0\xbe\xe0\x8b\x9f\x4a\xc4\x34\xa6\x29\x5f\x4d\xe1\x81\xbb\x5a\xc4\x16\x32\xc7\xa9\x90\xe4\x1f\x9e\x20\x2b\x91\x6b\x8a\xaa\x5a\xd8\xf8\x81\x27\x23\x77\x6a\x0f\x14\x19\xe3\xc3\x4d\x1b\xee\x38\x9b\x0b\x47\xd2\x90\xe0\x2b\x7c\xff\x41\x3b\x2e\x06\x8d\xf4\xbe\xdc\x5f\x0f\xc5\x9b\xdb\xdb\x9b\xdb\x33\xb8\x56\x2d\xcf\x0c\x18\x21\x33\x04\x9a\xa9\xe6\x1b\xc7\x2b\xcf\x89\x04\x4e\x80\xa5\xcc\xfb\xdc\xf6\xe1\x7b\x78\x09\xaf\x86\xc3\x61\x0f\xa0\x6d\x21\xbf\x6a\xba\x9b\x5a\x31\x47\x10\x12\xe6\x1b\xea\x89\x53\xd4\x1a\x73\x70\xb7\x4a\xdb\x32\x3b\x18\xef\xb4\x14\x5d\xf3\xd7\xc2\x37\xbb\xcd\x41\x77\x09\xef\xef\x33\x3b\x79\xb7\xb3\x1f\xda\x01\x80\x46\xbb\xd0\x12\x74\x6a\xd5\x2f\x77\x37\xe1\x9a\xdb\xc1\xca\x73\xe0\x60\xdc\x72\x0b\xab\xe2\x79\x2c\xfb\xb0\x12\xb9\x9d\xf5\xe1\xd1\x23\x78\x84\x31\x3c\xd2\x5d\x27\x1a\x46\x64\x5d\x92\x3f\x38\x81\xc8\xbd\x05\x3f\x32\x2d\x51\x16\x76\x06\x17\x63\xaf\x0e\x3f\x82\x84\x33\x07\xec\xb5\xd6\x7c\x13\xfb\xd5\xd3\x56\xf2\x04\x5e\x25\xe9\x67\x25\x64\xfc\x48\xe1\x95\xed\x08\xeb\xba\x21\x70\x6a\x87\x50\x52\x3f\x04\x35\x05\xbe\x37\xd3\x1e\x6e\x99\x7d\xa8\x3b\x65\x38\x78\xff\x0d\xae\x30\x7c\x78\x26\x05\x89\x27\x39\xae\x6f\xa6\xb1\xb7\xe5\xef\xf8\xa7\xaf\x28\x35\xfc\x0a\xd1\xc7\xe9\xba\xb2\xf1\x67\x8c\x87\xda\x5f\x50\xea\x43\xc7\x23\xfc\x49\xd6\x07\x08\xff\x49\xd2\x87\x8d\x67\x98\xe8\x4c\xa4\x07\xcc\x6c\xda\x42\xeb\x46\xc4\x30\x81\x98\xa6\x17\x1e\xb5\x5b\x69\x5c\x0a\xb5\x30\xb5\x06\x6b\xaa\xb5\xaf\x43\x71\x63\xeb\xc3\xf0\x23\xf1\x3f\x6a\x0a\x52\x94\x50\x25\xdf\xdf\xef\xe6\x47\x77\xef\xd0\xe4\x19\xb9\xc9\x73\x82\x85\x90\x51\x1f\xd8\x79\x29\x2e\x3a\xf9\xed\x32\xfb\xcc\x65\xbc\x0f\x75\x6a\xd5\xfb\xaa\x42\x7d\xc5\x4d\xd8\x85\xd8\xc9\x87\x1f\x59\x4e\x80\x25\xe7\x03\x32\x52\xdf\x6f\x3d\x6b\xdf\xf1\x07\x84\x89\x28\xdc\x2f\x3a\x56\xc1\x54\x58\xe0\x06\xe6\x5c\x6e\x68\xb9\x40\x63\x69\x0b\x0d\xad\xae\x44\x59\x3a\x09\x3b\x43\xc8\x16\x9a\x46\xd4\xfa\x9a\xd7\x72\x5c\x8b\x62\x66\xef\xc4\x23\x5e\x0a\x1a\xab\x3b\x5d\x90\x2f\xb9\x28\xa9\x1b\xff\xe6\xb2\x6a\x0c\xef\xb8\x9d\xa5\xd3\x52\x29\x1d\xd7\x3f\x66\xb9\xb3\xf3\xfb\xa7\x7f\x1b\x26\x30\x80\xef\x5f\x7d\x97\xc0\x4b\xfa\x53\x9f\xa1\x4b\x4a\x3f\xc7\xc6\x7b\x36\x2f\xc6\x5e\xfe\xc7\x3d\x67\x67\x41\xfd\x58\x43\x8c\x26\xa2\x38\xa5\xab\x54\x12\x06\x88\x55\x80\xd8\xf8\x3a\x01\x56\xad\x59\x0d\x61\xba\x28\xcb\xdf\xc2\x96\xe3\xd2\x01\xc3\x3b\x6c\x8a\x48\xc3\x19\x8b\xdc\x09\x4c\x95\x86\x98\x2c\x09\x18\xc3\x70\x04\x02\xce\xf7\x8c\x86\x8a\x33\x02\x71\x72\x52\xb3\x66\x57\xe2\x83\xf8\xb8\x87\x36\x6e\xe0\x9e\xc2\x77\x49\x07\x33\x1d\xf8\xbf\x02\x00\x00\xff\xff\x89\xbf\x43\xc4\x8a\x14\x00\x00")

func bindataScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_bindataScriptsJs,
		"/scripts.js",
	)
}



func bindataScriptsJs() (*asset, error) {
	bytes, err := bindataScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/scripts.js",
		size: 5258,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1743784052, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStandardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x93\xdb\x28\x10\xbd\xeb\x57\x74\x25\x95\xcb\x94\xf1\x48\x76\xec\x4d\x34\xa7\xdd\xda\x7f\xb0\x9b\xbd\x23\xd1\x92\xd9\x41\xa0\x82\x96\x3f\x36\x35\xff\x7d\x4b\x42\xb2\xb1\x6c\xc5\x63\x27\x47\x1e\x8f\x07\xfd\x68\xba\x79\x7e\x02\x87\x44\x52\x97\x20\xb0\xe0\x8d\x22\x28\x8c\x26\x28\x78\x25\xd5\x01\x9e\x9e\xa3\x7a\x06\x99\x11\x87\x19\x10\xcf\x14\xc2\xf7\x08\x3a\x06\xf3\x8c\x14\x3e\xfc\x89\xff\xf2\x6d\x03\x7f\x71\xed\x3e\xcc\xe0\x1f\xb4\x82\x6b\x3e\x03\xc7\xb5\x63\x0e\xad\x2c\x5e\xa2\xb7\x28\x7a\x7e\x82\x8d\x14\x08\x2e\xb7\x46\x29\xc8\xb8\x75\xad\x7a\x9a\xb2\x1d\x66\xaf\x92\x98\x9f\xc8\xb8\xed\xb6\x10\xd2\xd5\x8a\x1f\x52\xd0\x46\x63\xbb\xbe\x3d\x43\x37\xc3\x2a\xc7\xcc\x16\x6d\xa1\xcc\x8e\x39\x3a\x28\xf4\xa4\x97\x08\xe0\xa8\xc1\x76\x52\xd0\x66\x98\xf0\xdb\x2b\xee\xe8\x5b\x2d\x38\x21\xe4\x8a\x3b\x07\x5d\x74\xf3\x13\x2c\x3a\xfd\x3e\x3c\x27\xff\xc3\xf4\x73\xfc\xe9\xa5\x83\x2a\x6e\x4b\xa9\x59\xa6\x4c\xfe\xca\x50\x8b\x14\x78\x43\xe6\xca\x9c\x23\x6e\x29\x9c\xad\x8d\x93\x24\x8d\x4e\x81\x67\xce\xa8\x86\xd0\xe3\x56\x96\x1b\x4a\x61\x59\xef\xfd\x38\x33\x44\xa6\x4a\x21\x69\x81\xb7\x28\x12\x72\xfb\xd1\x11\xa7\xc6\xb1\xd6\x93\x1f\x1e\x13\x7e\x5b\x7d\xea\x16\xcd\x85\xa1\x6b\xd4\x33\x37\x3d\xb3\x92\xb9\x35\xef\xe4\x8a\x7b\xc8\xae\xe2\x4a\xbd\x8f\xdb\xde\x4a\x85\xce\xf1\x72\xb8\x92\xee\x46\x06\x68\x1c\xe6\xfa\xd1\xdb\x88\xe7\x2b\xac\x02\x83\xce\x37\x98\x36\xe7\x26\x4f\xbc\x93\xd8\x06\x4a\x92\x54\x10\xe6\xdc\x8f\xbf\xff\x44\x7a\x1d\xe3\x09\xa5\x2e\x37\x1f\x67\x52\xc8\x3e\xcb\xba\x51\x52\x25\xf1\xe0\xb7\xc2\x22\x4c\xd5\x6b\x29\xdd\x07\x99\x99\x3d\xe4\x46\x19\xeb\x03\x45\x1f\x6a\x69\x11\xf5\xb0\x23\xcf\x5f\x4b\x6b\x1a\x2d\x58\x47\x4c\x3f\x2e\x97\x79\xbe\x5c\xfa\x70\x2c\x8a\x19\xcc\xb5\xe9\xdf\xe9\xd4\x92\x3c\x8f\xe3\x38\xf6\x4b\x78\x95\xa1\x9d\x64\x16\xc5\x97\x23\xb3\xb4\x78\x98\x24\xf2\xe4\x2b\x7e\xcd\xcf\x02\x69\x6d\x38\x8b\x63\xaf\xb8\xbd\x92\x97\x8b\x36\xb9\x5a\x68\x83\xdd\xa3\x5e\x25\xf1\x60\x95\x2f\x43\x01\x30\x54\xae\xb4\xad\x86\x02\x75\x7f\x8b\xd7\x85\x13\x9f\xb7\x81\xf4\x62\xf5\xf9\x4e\xe9\x87\x95\x03\x60\xe2\xd0\x15\x0a\xd9\x54\x57\xb4\x93\xc5\x58\x3d\x59\xac\xef\x54\xff\x19\xf1\x00\x98\x38\xba\x2f\x52\x63\xf1\x78\xfe\x65\x24\xbd\x5e\xdc\xa9\xfc\xa8\xf0\x69\x3c\x65\x76\x57\x69\x6e\x0b\x2f\xe3\xfb\x84\x1f\xd5\x5d\xde\x4a\x69\x43\x97\x7d\x2a\x9e\xaf\x47\xb2\x90\x8c\xd2\x2e\x00\x26\x1c\xee\x4a\xd9\x65\x62\x8c\x85\x6f\x1c\xf0\x58\xad\x82\xf7\xdd\x8e\xbd\xae\x2f\x0a\xb0\xdb\xc8\xa1\x5f\x17\xca\x70\x4a\xdb\x4a\x78\x5e\x96\x7d\x01\x3d\x9a\xdc\xc3\xbe\xbb\x2f\x2e\x2b\xa6\x45\xc5\x49\x6e\x7b\x51\xc2\x3d\x31\xae\x64\xa9\x53\xc8\x51\x13\x5a\x1f\x63\x26\x4b\x76\x3a\x8c\xd7\x0c\xaa\x7e\xd7\x37\xf9\xfe\xef\x3f\xbe\x9d\xb5\x4d\x8f\x4c\xb5\x81\xe7\x27\xc0\x7d\x2d\x2d\xfe\x5e\x10\xda\x70\x61\x08\xff\x60\xb5\xd4\x85\xe9\x3f\x81\xad\x59\xc1\x70\xca\xb3\x9a\x0b\x21\x75\xc9\x7c\xff\x58\xf5\x3f\x9b\x7e\xe5\xf0\x2d\x08\x3d\xf0\xf6\x9e\x38\x9b\x2b\x9c\xce\x5a\xaf\xbf\x45\x4b\x32\xe7\x6a\x98\x22\x53\x07\xab\x9b\xe1\x1d\x2a\xe9\xc8\xff\x14\x19\x1d\xea\xe0\xbb\x78\x3a\xa1\xd4\x4a\x6a\x3c\xfe\x17\x46\xb7\x49\xa6\xbe\x04\x87\xd6\x19\xf7\x61\xb5\x2d\xde\x18\x45\xb2\x0e\x9b\x7c\x8f\xdc\xd3\x6d\x7f\xfd\x5f\x73\x78\x59\xdd\x16\x6f\xd1\xff\x01\x00\x00\xff\xff\xc9\xae\x65\x30\xf4\x0b\x00\x00")

func bindataStandardCssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStandardCss,
		"/standard.css",
	)
}



func bindataStandardCss() (*asset, error) {
	bytes, err := bindataStandardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/standard.css",
		size: 3060,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1743762215, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/scripts.js":   bindataScriptsJs,
	"/standard.css": bindataStandardCss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"scripts.js": {Func: bindataScriptsJs, Children: map[string]*bintree{}},
		"standard.css": {Func: bindataStandardCss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
