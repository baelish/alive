// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static-source/scripts.js (2.28kB)
// static-source/standard.css (2.05kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4b\x6f\x1b\x37\x10\xbe\xef\xaf\x98\xf0\x22\x6e\x24\xad\xe5\x14\xb9\x58\xdd\x04\xb1\xeb\x22\x2d\xfc\x28\x6c\x17\x41\x61\xe4\x40\x89\xa3\x15\x6b\x8a\x14\x48\xae\x25\xd9\xd1\x7f\x2f\xf8\xd8\x5d\x49\xb5\x8d\xf8\xb2\x26\xe7\x9b\x07\xbf\xf9\x66\x24\xd1\x81\xd5\xb5\x99\x22\x94\xa0\x70\x05\xe7\x8f\xa8\xdc\x6d\xb8\xa1\xe4\x08\xfd\xc9\x1e\x91\x7c\x9c\x45\x54\xa1\xd5\x02\xad\x65\x95\xc7\xcf\x6a\x35\x75\x42\x2b\x1a\x60\x39\x3c\x67\x00\x00\xe1\x00\x25\xfc\x79\x7b\x7d\x55\x2c\x99\xb1\x18\xed\x05\x67\x8e\xe5\xe3\x80\xb1\x2b\xe1\xa6\xf3\x74\xef\x36\x4b\x6c\x9c\x01\xa6\xcc\x22\x90\x07\xc4\x25\x93\xe2\x11\xc9\x49\xba\x07\x68\xef\x68\x3e\xce\xda\xdb\x89\x41\xf6\xd0\x9e\xa3\x77\xbd\xe4\xcc\xe1\xa9\x5e\xef\x78\xfb\x97\x3a\x66\x2a\x74\xa7\x7a\x0d\x25\x70\x3d\xad\x17\x3e\x7d\x85\xee\x5c\xa2\xff\xf7\x74\xf3\x07\x4f\x35\x09\x9e\x2a\xf5\x7f\x62\x06\xb4\x73\x7d\x57\x96\xa0\x6a\x29\x73\x78\x86\xe9\x9c\xa9\x0a\xbf\x48\x34\xee\x02\x1f\x51\x76\xb0\x41\xe4\xa1\xb0\x8e\xb9\xda\x36\x27\xc9\xac\xbb\x8c\xfc\xe5\x63\xd8\xbe\xfd\x0a\x8e\x12\x0f\x5f\xd1\xde\xed\xd6\xf9\x66\x14\x83\x52\x33\xfe\x17\xab\x76\xa9\x94\x7a\xca\x7c\xe7\x8a\x68\xa5\x79\xb0\x6c\xb3\xed\x38\xcb\xb2\xa6\xad\x30\xd1\xeb\x33\x29\xa6\x0f\x54\xf0\xa6\x3f\x2b\xa1\xb8\x5e\x15\xad\xff\xdc\xe0\x0c\x4a\x20\x47\x13\xbd\x3e\x22\xd0\x07\xc1\xb3\xed\x4e\x88\xae\xde\x26\x46\xd7\x87\x37\x9a\x90\xe8\x8f\x38\x2f\x22\x54\xee\x4a\x73\x2c\x0c\x2e\xf4\x23\x9e\xcd\x85\xe4\x89\xeb\x7c\x2f\xdf\x8e\x46\x7e\x3e\x1b\x89\x4d\x1a\x4e\x98\x21\x21\xef\x2b\x6d\x1d\x00\xa9\x0c\xa2\x22\x03\x20\x11\x28\x66\xd4\xab\x57\xcf\xe0\x81\x05\x61\x90\x5a\x71\x9c\x09\x85\x9c\x04\x7d\x48\x64\xe6\x4e\x2c\x50\xd7\x8e\x3e\xb0\x1c\xb6\x19\x78\x68\x09\x16\x5d\x73\xdf\x8e\x51\xfe\xfc\x7a\x62\x83\xdc\xa7\x3d\xbf\xb9\xb9\xbe\x39\x81\x2b\xdd\xbd\xd4\xc2\x4c\x1b\xf8\x68\x0b\x92\x6f\x07\xf0\x11\xde\xc3\xf1\x68\x34\x0a\xb4\x74\xbc\x2c\x36\x3e\x1b\x6d\x87\xd4\xf3\x62\xa2\xc2\x83\xba\xe1\x5d\x2b\xea\x56\x24\x26\xad\x84\xdf\x98\xf3\x9e\x51\x22\x80\xd2\xe2\x6b\xa0\x46\x46\xc1\x80\xae\x36\x0a\x8c\x27\xfb\xf7\x5a\xca\x7f\x90\x19\x9a\x43\x1f\xc8\xd0\xeb\x64\xc9\x38\x0d\xb6\x4b\xad\xdc\x3c\x18\x8e\x07\x1f\x5a\x7b\x1b\xbf\xc5\xc5\x04\x09\x72\xb7\x17\xe2\xab\xae\x8d\x6d\x6d\x27\x2f\xba\x5f\x0a\x55\x3b\xdc\x47\x75\xd6\x5b\x9c\x6a\xc5\xa3\x75\x9f\x38\x0f\x51\x03\x58\x09\xee\xe6\x03\x78\x8a\xfc\x3c\x41\x09\x4f\xf0\xe3\x07\xf4\x46\x3d\x4f\xa2\xf2\x24\x40\x1f\x7a\xe1\x94\x5e\xae\x0a\x89\xaa\x72\x73\xf8\x54\x46\x77\xf8\x0c\x0a\x4e\x02\x5b\x5f\x8c\x61\x1b\x1a\x6f\x87\x1d\xb2\x0f\xc7\x79\xf1\xaf\x16\x8a\x3e\xf9\x22\xd5\x78\xbf\x96\x57\xd5\xd1\x2c\x99\xb4\x9a\x9b\x26\xfa\xce\xc2\x3d\x61\x8b\x09\x1a\x32\x68\xb4\xeb\xbf\x1b\x32\x20\x4a\xff\x1d\xd6\x24\x19\x04\x71\x7d\x2f\x84\xe2\xb8\xbe\x9e\xd1\x18\x2d\x87\xb2\x2c\x61\x78\xec\x65\x1c\x6f\xfc\x9c\x07\xdf\xd4\xe1\x34\x9d\x53\xc9\xac\xbd\x10\xd6\xa5\xe1\xa4\x4d\xc2\x9d\x69\x89\x29\x61\x27\x67\x54\x74\x5a\xb2\xff\x8b\xc4\x38\x6f\xca\xd8\x43\x74\x83\x6b\x4f\x37\x67\x1e\x7e\xc5\x16\x48\x49\x7a\x38\xc9\xef\x47\xfe\x1d\x0a\xcd\xd7\xbb\xcb\x0b\x28\x1b\x46\x7e\x2a\x88\x5f\xce\xb1\x3c\xfe\x42\xa0\x38\x40\x07\xea\x30\xa2\x9a\xbb\x5b\xf1\x84\xa7\xa2\xf2\x4b\x6e\x77\xbc\xd8\x23\x13\x92\x4d\x24\x7e\x0b\x6d\x2e\xe1\x92\xb9\x79\x31\x93\x5a\x1b\x4a\xd3\x1e\x0d\x19\xa2\x7d\xf8\xcb\x28\x87\x23\xf8\x78\xfc\x21\x87\xf7\xfe\x33\x6e\x23\x05\x9d\xc4\x5f\x2d\x7a\x10\xf5\x53\x19\x3d\x3e\x1f\xa4\x3b\x69\x03\xbc\xb6\xf4\x7a\x13\x51\x0d\x27\x7a\xdd\xcb\x0b\xeb\x36\x12\x8b\x55\x2a\xb3\xcd\xd6\x07\xb2\x5c\x93\xae\x8c\x59\x2d\xe5\xb7\x64\x44\xfb\xf2\x3e\xdd\x63\xb4\xe7\x3d\x42\xb8\x5e\x6a\xa3\xdf\x54\xd4\xc7\x12\x50\xc2\x68\x0c\x02\x7e\x3d\x08\x9b\x46\x61\x0c\xa2\xdf\xdf\x5d\x46\xfb\xa8\x7b\xf1\xfd\xa0\x6a\xda\x96\x3d\x84\x38\xe1\x6d\xed\xdb\x6c\x9b\xfd\x17\x00\x00\xff\xff\xaa\x97\x34\x9a\xe8\x08\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 2280, mode: os.FileMode(0644), modTime: time.Unix(1578679213, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xf9, 0x4d, 0xaa, 0x4c, 0xd, 0xb4, 0x68, 0x37, 0xa6, 0xf5, 0x36, 0xb5, 0xfb, 0xde, 0x90, 0x41, 0xeb, 0xee, 0xeb, 0xa5, 0xcd, 0x29, 0x92, 0xcb, 0x19, 0xa1, 0xc9, 0x2b, 0x31, 0xeb, 0xef}}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdd\x72\x9b\x30\x10\x85\xef\x79\x0a\x4d\x32\xbd\x33\x0c\x98\xd8\x69\xf0\x5d\xa7\x6f\xd0\xa6\xf7\x0b\x5a\xb0\x1a\xfd\x30\x92\x70\xec\x66\xfc\xee\x1d\x5b\xe2\xc7\x01\x6c\x77\xa6\x77\x46\x9c\xf3\xed\x7a\xf7\x88\x9a\x7c\x94\x4a\xda\xb0\x04\xc1\xf8\x21\x23\x0f\xdf\xf1\x37\xec\x1a\xf2\x03\xa4\x79\x58\x90\x5f\xa8\x29\x48\x58\x10\x03\xd2\x84\x06\x35\x2b\x37\xc7\x20\xa0\x6c\x17\x55\x1a\x51\x92\x8f\x80\x10\x42\x72\x28\xde\x2a\xad\x1a\x49\xc3\x42\x71\xa5\xb3\xc7\x34\x2d\x8a\x34\xdd\x04\x5e\xac\x91\x2e\xc8\xe9\x87\x54\xaf\x35\x05\x8b\xb3\xc6\xa2\x88\xe3\x38\xee\x8c\x20\x72\xd4\xb3\xe2\xb2\xfc\x3a\x14\x57\x1a\x0f\xb3\x5a\x48\x5e\xf0\xa5\xe8\xb4\x7b\x0e\xba\x6a\xdb\x78\x67\xd4\x6e\xb3\x55\x12\xd7\xfb\xcd\xf9\x60\x8b\xac\xda\xda\xe1\xc9\x79\x4a\x86\xfd\xc1\x6c\x89\xa2\xa3\xd0\x7b\x28\xcb\xd5\xd3\x98\x92\x44\xab\x01\x67\x8c\x19\x98\xee\xc7\x50\x81\x94\x35\xe2\x06\x28\x59\xae\xa7\x40\xc9\x72\x88\x9a\x20\x0d\x7c\xff\x42\xa2\x46\x00\xe7\x37\x48\xeb\xe5\x18\x14\x47\xcf\x43\xce\x18\xd3\x9b\xee\xa7\x50\xc1\x0a\xad\xae\x63\xd2\x89\xad\xc7\x17\x83\x1e\x43\xd2\xcf\x5b\xbf\x0d\x31\x16\x6c\x63\x3c\xc5\xbb\xc8\x94\x2d\xe9\x4d\x8f\xce\x14\xe6\xa0\x49\x1d\x59\x66\x79\x1b\x9b\x5e\x4e\x92\x38\xfe\xe2\x18\xb5\x32\xcc\x32\x25\x33\x02\xb9\x51\xbc\xb1\xe8\xce\x39\x96\xa7\x5a\xee\x21\x57\xd6\x2a\x91\x91\x64\xba\x08\x07\x63\xdd\xa5\xa5\xe3\x52\xcf\xab\x1b\x95\xb4\xff\x5b\x33\xa5\xa2\x5c\xed\x3d\xd5\xdd\x53\xf2\xbe\x65\xad\xb7\xe4\x0a\x6c\x76\xea\xd5\x3d\x0b\xd0\x15\x93\xa1\x87\x74\x5b\xf3\xc7\xae\x52\x77\xda\x37\xa4\x91\x83\x65\x3b\x0f\xb5\xb8\xb7\x21\x70\x56\xc9\x8c\x14\x28\x2d\xea\xbe\x17\x56\x85\x7d\x3f\x0e\x9b\x11\x68\xac\x3a\x4b\x2e\xe7\xdd\x36\xc3\x55\xf1\x16\x1a\x0b\xda\x66\xa4\x1d\xc6\xc5\x3b\x94\xd4\x41\x1c\x43\xa0\x31\x50\x8d\xb7\xb6\x8e\xa7\xcc\x1e\xec\x83\x33\xcf\xf6\x0d\x0a\xd8\xff\xfc\xf6\x3a\x62\x3f\x5d\x63\x3b\xfb\x35\xf4\xe9\x1d\x65\xa6\xe6\x70\xc8\x88\x54\x12\x7d\xb5\x6b\xc9\xf8\x0f\x25\xe7\x22\x35\x08\xd1\x65\xc2\x8e\x41\x10\x31\x59\x2a\x62\x21\xef\xf6\x54\x03\xa5\x4c\x56\xa1\x8b\xfc\xaa\x8d\xc7\x65\xda\x8e\xad\x71\xeb\x5d\xc3\x94\x9c\x0b\x9c\x35\xee\xda\x7f\x5a\xe1\x78\x32\xed\x47\xe6\xb6\xd0\xeb\xc6\x83\xbc\x02\xbd\x4b\xec\x3e\x96\xf7\x68\xff\x06\x00\x00\xff\xff\x08\xd1\xd0\x19\x02\x08\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 2050, mode: os.FileMode(0644), modTime: time.Unix(1578663801, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xc, 0x91, 0x48, 0x9b, 0x23, 0x1b, 0x25, 0x4a, 0xf2, 0x96, 0xd, 0x1b, 0xef, 0x92, 0x3c, 0xcd, 0x56, 0xa1, 0x10, 0xe, 0x2d, 0xc2, 0xaa, 0x3d, 0xce, 0xc1, 0x6d, 0x58, 0x33, 0x5e, 0xb2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
