// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdf\x6f\x1a\x39\x10\x7e\xe7\xaf\x98\xfa\x05\x6f\x59\x36\x90\xea\x5e\x40\xdb\xaa\xb4\x39\xf5\xa4\x24\x3d\x25\x39\x9d\x4e\x88\x07\xb3\x1e\x16\x5f\x8d\x8d\x6c\x2f\xbf\x52\xfe\xf7\x93\xed\x65\x61\xa3\xe4\xd4\x27\xb0\xe7\xf3\xf7\x8d\xbf\x19\xcf\x6e\x98\x01\x27\x56\xa8\x2b\x67\x21\x87\xe9\xac\xd3\xf1\x5b\x56\x57\xa6\x40\xc8\x41\xe1\x16\x6e\x36\xa8\xdc\x63\xd8\xa1\xe4\x0a\xfd\xca\x5e\x91\x64\xdc\x89\xa8\x4c\xab\x15\x5a\xcb\x4a\x8f\x5f\x54\xaa\x70\x42\x2b\x1a\x60\x09\x3c\x77\x00\x00\x3c\x65\xd8\xf8\x8a\x8e\x09\xe9\x95\xc2\x32\xe3\xcc\xb1\xcc\xae\xa5\x70\xb4\x9b\x76\x93\x00\xb6\x5b\xe1\x8a\x25\xbd\xc4\x4f\x07\xb3\x13\x15\x40\xc1\x2c\x02\xa9\xd6\x9c\x39\x9c\xe8\x1d\x19\xd5\xfb\x51\xc6\x31\x53\xa2\x9b\xe8\x1d\xe4\xc0\x75\x51\xad\xbc\x4c\x89\xee\x46\xa2\xff\x3b\xd9\xff\xc1\xdb\xd4\xc3\x59\x32\x6e\x18\x8a\x25\x53\x25\x7e\x96\x68\xdc\x2d\x6e\x50\xd2\x86\x2e\x6d\x5d\x60\x7a\x3d\x7b\xb1\xf1\xe1\x92\x66\x6e\x90\xfd\x18\xb7\xf2\x35\x28\x35\xe3\x7f\xb2\x12\x2f\x12\x96\xba\x60\xde\xad\x2c\x46\x69\x34\xe0\xd8\x39\x8e\x3b\x9d\xce\xc9\x4a\x98\xeb\xdd\x17\x29\x8a\x1f\x54\x70\xef\xc2\xf1\x32\xb6\xda\x3f\x89\x15\xd2\xc6\x69\xb1\x00\x0a\x0e\xde\xe5\xa0\x2a\x29\xe1\xec\x1a\x80\xa9\xcb\xf9\x95\x39\x7f\x20\x4a\x01\x4a\x8b\x6f\x81\x4e\xe9\x84\x00\xba\xca\x28\x30\xde\xcb\xdf\x2b\x29\xff\x41\x66\x68\x02\x3d\x20\x7d\x02\x3d\x58\x33\x4e\x43\xec\x4e\x2b\xb7\x0c\x81\x61\x7a\xdd\xc4\x1b\xfe\x06\x17\x05\x6a\xc8\x53\x8b\xe2\x9b\xae\x8c\x6d\x62\xa3\x57\x8f\xdf\x09\x55\x39\x6c\xa3\xce\xd1\x47\x2c\xb4\xe2\x31\xda\xf6\xcb\x43\x54\x0a\x5b\xc1\xdd\x32\x85\x43\xf4\xe7\x00\x39\x1c\xe0\xe7\x4f\xe8\x0e\xba\xbe\x6a\xca\x9b\x00\x3d\xe8\x86\x55\x7d\x73\x95\x49\x54\xa5\x5b\xc2\xc7\x3c\x1e\x87\x4f\xa0\x60\x14\xdc\xfa\x6c\x0c\xdb\xd3\xb8\xdb\x3f\x23\x7b\x30\x4c\xb2\x7f\xb5\x50\xf4\xe0\x93\x54\xe3\x76\x2e\x6f\x34\x5b\x0a\xd2\xaf\x52\xa8\x5f\x55\xab\xb4\x53\xc2\x56\x73\x34\x24\x25\xa5\x41\x54\xf1\x77\x4f\x52\x62\x90\x93\x59\x26\x14\xc7\xdd\xf7\x05\x0d\x0c\x09\xe4\x39\xf4\x87\x09\x3c\x47\x46\xc8\x21\xa2\xeb\x92\x46\xb9\xac\x90\xcc\xda\x5b\x61\x5d\x66\x70\xa5\x37\x48\x4f\x12\x70\xd2\xa8\x8f\xa5\x10\x54\x92\xd7\x0f\x33\xce\x6b\xd9\xcb\xf8\xf9\xe5\xd9\xc9\xfe\x8b\x07\xdf\xb3\x15\x52\x52\xdf\x8d\x24\xd3\x81\xcf\x5a\xa1\xf9\xf6\x74\x77\x0b\xf9\xe9\xd2\xbf\xc2\x21\x99\x75\x7f\x85\x31\xc0\x5f\xe1\x89\x0f\xe3\x45\xf9\x8d\x28\x97\xee\x51\x1c\x70\x22\xca\x89\xde\xd1\xcb\x01\xc5\x36\x4c\x48\x36\x97\xf8\x77\xa8\x63\x0e\x77\xcc\x2d\xb3\x85\xd4\xda\x50\xba\x15\x8a\xeb\x6d\x54\x88\xf1\xfe\x87\x41\x02\x57\xf0\xdb\xf0\x3a\x81\xf7\xfe\x27\x10\x85\x1e\x88\xd3\x87\xbe\x20\xfc\x98\x47\xf0\xa7\x17\x4a\xa3\xd3\xd9\xb7\xc6\x55\x77\x2e\xca\xfe\x5c\xef\xba\x49\x66\xdd\x5e\x62\xb6\xad\x13\x6c\xc4\x7a\x40\xd6\x3b\xd2\xbe\x2a\xf3\x7d\x75\xaf\xa3\x41\x54\xf0\x34\xcc\xf9\x73\x33\x51\xb7\x5f\xa3\x5e\x34\xd3\x7f\x2a\xf8\x0c\xde\xe5\x39\x90\x4a\x71\x5c\x08\xe5\x5d\x85\x67\x28\x24\x32\xf3\x14\x41\xf4\x12\x9c\x1c\xc7\x9d\xf6\xd4\xfd\x9f\x91\x2b\x78\xdd\x16\x97\x6a\x39\x58\x74\x27\xea\xe6\xcb\x91\x3c\xbf\xf9\x30\x42\xff\xa5\x40\x6e\x1e\x1e\xbe\x3f\x8c\xe0\x5e\x43\xfc\x0c\x58\x58\x68\x03\x7e\x04\x78\x7e\x6f\x87\xcd\x48\x72\x8c\x57\x86\xf7\x30\x1c\x0c\x06\xbe\x13\xfe\x0b\x00\x00\xff\xff\xf0\x3c\x1f\xc7\xee\x06\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 1774, mode: os.FileMode(420), modTime: time.Unix(1554493080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\xcd\x6e\xdb\x30\x0c\x07\xf0\x7b\x9e\x42\xe8\xb0\x5b\x1d\xd8\x71\x93\xad\xca\x6d\xd8\x1b\x6c\xdd\x9d\x96\x68\x87\xab\x3e\x02\x89\x49\x93\x15\x7b\xf7\x61\xb1\x6a\x3b\x73\xbe\x06\xf4\x68\xe9\xcf\x9f\x05\x91\xd0\x5a\xbc\xd6\xde\x71\x56\x83\x25\xb3\x97\xe2\xee\x2b\xfe\x84\xed\x46\x7c\x03\x17\xef\xee\xc5\x0f\x0c\x1a\x1c\xdc\x8b\x08\x2e\x66\x11\x03\xd5\xcb\xdf\x93\x89\xa6\xed\xb4\x09\x88\x4e\xbc\x4e\x84\x10\xa2\x02\xf5\xdc\x04\xbf\x71\x3a\x53\xde\xf8\x20\x3f\x94\xa5\x52\x65\xb9\x9c\xa4\x70\x40\x7d\x36\xaa\x54\x9e\xe7\x79\x17\x05\x5b\x61\x38\x1b\xae\xeb\xcf\xc3\x70\x13\x70\x7f\x36\x0b\xc5\x23\x3e\xaa\x2e\xbb\x33\x10\x1a\x4c\xe9\x17\xd2\xbc\x92\xf3\x22\x5f\xef\x96\x87\x85\x15\x52\xb3\xe2\xe1\xca\xe1\x5e\x22\xfd\x42\x39\x43\xdb\x29\xfa\x16\x65\x36\x7f\x18\x2b\xc5\x74\x3e\x70\xc6\xcc\xa0\xe8\x76\x46\x5b\xd4\xb4\xb1\x57\xa0\x62\xb6\x38\x05\x15\xb3\x21\x75\x42\x1a\xd4\xfd\x8f\xa4\xa3\x05\x63\xae\x48\x8b\xd9\x18\xca\xa7\x9f\x86\xce\x98\xe9\x8b\x6e\x57\xb4\x25\x15\xfc\x65\xa6\x3c\xd1\xf5\xfc\xe8\xa2\xc7\x48\xf9\x6f\xd7\xaf\x23\x95\xdf\x25\xa2\x1d\x51\xf1\xb2\x22\xc6\x54\x63\x3c\xb0\x34\x58\x73\xfb\x6d\x21\x34\xe4\xb2\xca\x33\x7b\x2b\xbb\x03\xa7\xe5\xd0\x0e\xc8\xdb\xea\xda\x47\x62\xf2\x4e\x8a\x80\x06\x98\xb6\x09\x65\xdc\x71\x06\x86\x1a\x27\x85\x42\xc7\x18\xfa\xb3\x50\x93\xf5\xe7\x69\x59\x29\x60\xc3\xfe\x10\x59\x4f\x99\xd8\xe0\xd1\x76\x56\x19\xaf\x9e\xb3\xc8\x10\x58\x8a\xf9\xc7\xe5\x78\x0f\x9d\x3e\x42\x2c\xc6\x08\xdd\xa0\xf7\xf7\xb2\xc8\x4f\x55\x27\x39\x5d\xda\x75\x1c\x76\xdf\xbf\x3c\x8d\xec\x87\x4b\x76\x5b\x7e\x89\xfe\xbb\xb7\xa5\x48\x15\x19\xe2\xbd\x14\x2b\xd2\x1a\x5d\xfa\xa5\x81\xc8\x4f\x6b\x0d\xdc\x3d\x68\xef\xfa\xdf\xbe\x8f\x50\x45\x6f\x36\x6f\xc3\x91\xa6\x40\x14\xed\x67\xdb\x7d\x71\x78\x5f\xff\x04\x00\x00\xff\xff\xb0\x6e\xfb\xea\xc2\x05\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1474, mode: os.FileMode(420), modTime: time.Unix(1554493075, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
