// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x5d\x6f\xdb\x36\x14\x7d\xd7\xaf\xb8\xe5\x8b\xa9\x5a\x56\xec\x74\x7b\xb1\xa1\x16\x75\x9b\xa1\x03\x92\x74\x48\x32\x0c\x83\xe1\x07\x5a\xba\x96\xb9\xd2\xa4\x41\x52\xfe\x4a\xfd\xdf\x07\x92\xb2\x6c\x19\x49\xd0\x27\x89\xbc\xe7\x9e\x73\xbf\x48\xae\x99\x06\xcb\x97\xa8\x2a\x6b\x20\x83\xc9\x34\x8a\xdc\x96\x51\x95\xce\x11\x32\x90\xb8\x81\x9b\x35\x4a\xfb\xe8\x77\x28\xb9\x42\xb7\x32\x57\x24\x1e\x45\x01\x95\x2a\xb9\x44\x63\x58\xe9\xf0\xf3\x4a\xe6\x96\x2b\x49\x3d\x2c\x86\xe7\x08\x00\xc0\x51\xfa\x8d\xaf\x68\x19\x17\x4e\xc9\x2f\xd3\x82\x59\x96\x9a\x95\xe0\x96\x76\x92\x4e\xec\xc1\x66\xc3\x6d\xbe\xa0\xe7\xf8\x49\x7f\x7a\xa4\x02\xc8\x99\x41\x20\xd5\xaa\x60\x16\xc7\x6a\x4b\x86\xf5\x7e\x90\xb1\x4c\x97\x68\xc7\x6a\x0b\x19\x14\x2a\xaf\x96\x4e\xa6\x44\x7b\x23\xd0\xfd\x8e\x77\x7f\x16\x6d\xea\xc1\x34\x1e\x35\x0c\xf9\x82\xc9\x12\x3f\x0b\xd4\xf6\x16\xd7\x28\x68\x43\x97\xb4\x12\x98\x5c\x4f\x2f\x36\x7e\x3b\xa7\x61\x8e\xe0\x5e\xfd\xed\x63\xbc\x94\xbb\x70\xfc\x30\x8d\xa3\xc6\x71\xa6\x91\xfd\x18\xb5\x12\xd5\x28\x14\x2b\xfe\x62\x25\x9e\x65\x2a\x54\xce\x5c\x99\xd3\x60\xa5\xa1\x72\x87\xe8\x30\x8a\xa2\xe8\xd8\x03\x98\xa9\xed\x17\xc1\xf3\x1f\x94\x17\xae\x7c\x87\x73\xdb\x72\xf7\xc4\x97\x48\x9b\x16\xf1\x39\x50\xb0\xf0\x2e\x03\x59\x09\x01\xa7\x72\x03\xe8\x7a\x0e\xbe\xba\x64\x6c\x2d\x05\x28\x0c\xbe\x06\x3a\x86\xe3\x0d\x68\x2b\x2d\x41\xbb\x26\xfc\x51\x09\xf1\x2f\x32\x4d\x63\xe8\x02\xe9\x11\xe8\xc2\x8a\x15\xd4\xdb\xee\x94\xb4\x0b\x6f\x18\x24\xd7\x8d\xbd\xe1\x6f\x70\x41\xa0\x86\x3c\xb5\x28\xbe\xa9\x4a\x9b\xc6\x36\x7c\xd1\xfd\x8e\xcb\xca\x62\x1b\x75\xb2\x3e\x62\xae\x64\x11\xac\xed\x7a\x39\x88\x4c\x60\xc3\x0b\xbb\x48\x60\x1f\xea\xb3\x87\x0c\xf6\xf0\xf3\x27\x74\xfa\x1d\xd7\x35\xe9\x8a\x00\x5d\xe8\xf8\x55\x9d\xb9\x4c\x05\xca\xd2\x2e\xe0\x63\x16\xdc\xe1\x13\x48\x18\xfa\x6a\x7d\xd6\x9a\xed\x68\xd8\xed\x9d\x90\x5d\x18\xc4\xe9\x7f\x8a\x4b\xba\x77\x41\xca\x51\x3b\x96\x57\xa6\x34\x01\xe1\x56\x09\xd4\xc7\xb1\xd5\xda\x09\x61\xcb\x19\x6a\x92\x90\x52\x23\xca\xf0\xdd\x91\x84\x68\x2c\xc8\x34\xe5\xb2\xc0\xed\xf7\x39\xf5\x0c\x31\x64\x19\xf4\x06\x31\x3c\x07\x46\xc8\x20\xa0\xeb\x96\x06\xb9\x34\x17\xcc\x98\x5b\x6e\x6c\xaa\x71\xa9\xd6\x48\x8f\x12\x70\xd4\xa8\xdd\x12\xf0\x2a\xf1\xcb\xce\xac\x28\x6a\xd9\x73\xfb\xe9\xc8\x9a\xf1\xee\x8b\x03\xdf\xb3\x25\x52\x52\xe7\x46\xe2\x49\xdf\x45\x2d\x51\x7f\x7b\xba\xbb\x85\xec\x98\xf4\xaf\x70\x08\x66\x6c\x38\x9b\xc5\x0b\x3c\xe1\x60\x5c\xb4\x5f\xf3\x72\x61\x1f\xf9\x1e\xc7\xbc\x1c\xab\x2d\x3d\xbf\xd9\xd8\x9a\x71\xc1\x66\x02\xff\xf1\x7d\xcc\xe0\x8e\xd9\x45\x3a\x17\x4a\x69\x4a\x37\x5c\x16\x6a\x13\x14\x82\xbd\xf7\xa1\x1f\xc3\x15\xfc\x3e\xb8\x8e\xe1\xbd\xfb\x78\x22\x3f\x03\xe1\xda\xa2\x17\x84\x1f\xb3\x00\xfe\x74\xa1\x34\x3c\xfa\xbe\x76\xcf\x75\x66\xbc\xec\xcd\xd4\xb6\x13\xa7\xc6\xee\x04\xa6\x9b\x3a\xc0\x46\xac\x0b\x64\xb5\x25\x6f\x93\x18\xcb\x6c\x65\x7a\x33\xa6\x2f\x79\xe8\x89\xa8\x77\x0d\xf1\x91\xad\x55\xb8\xf6\x55\xc8\x8b\xc4\x3f\x37\xa7\xd1\xa4\x76\xb7\x42\x35\x6f\x1e\xa1\x09\x2f\xa6\xf0\x2e\xcb\x80\x54\xb2\xc0\x39\x97\xae\x47\xf0\x0c\xb9\x40\xa6\x9f\x02\x88\x9e\x83\xe3\x7a\x28\x1d\x15\x5f\xa2\x1b\xdd\xbe\x73\xa8\x4f\xdf\x21\x6a\xbf\x0c\x6f\x3c\x0b\xbc\xa8\x27\xf0\x3c\x94\x0c\x0c\xda\xa3\x6e\xf3\xba\xc5\xcf\xaf\x9e\x41\x3f\xea\x09\x90\x9b\x87\x87\xef\x0f\x43\xb8\x57\x10\x9e\x2a\x03\x73\xa5\xc1\xdd\x36\x3e\xcc\x2e\x10\x93\x92\xf8\x10\xea\x01\xef\x61\xd0\xef\xf7\xdd\xd0\xfd\x1f\x00\x00\xff\xff\xf2\x3e\x77\x3d\x92\x07\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 1938, mode: os.FileMode(420), modTime: time.Unix(1560438566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x72\x9b\x30\x10\xc6\xef\x7e\x0a\x4d\x32\xbd\x05\x0f\x98\xd8\x69\xe4\x5b\xa7\x6f\xd0\xa6\xf7\x05\x2d\x78\x1b\x21\x79\xa4\xc5\xb1\x9b\xc9\xbb\x77\x6c\x64\xc0\x05\xff\xe9\x4c\x8e\x2c\xdf\xf7\xfb\x96\xdd\x65\x2d\xde\x0b\x6b\x38\x2a\xa0\x22\xbd\x93\xe2\xee\x3b\xfe\x86\x4d\x2d\x7e\x80\xf1\x77\x0f\xe2\x17\x3a\x05\x06\x1e\x84\x07\xe3\x23\x8f\x8e\x8a\xe5\xc7\x64\xa2\x68\x33\x2d\x1d\xa2\x11\xef\x13\x21\x84\xc8\x20\x7f\x2d\x9d\xad\x8d\x8a\x72\xab\xad\x93\xf7\x69\x9a\xe7\x69\xba\x9c\x04\xb1\x43\x75\x56\x9a\xe7\x71\x1c\xc7\xad\x14\xaa\x0c\xdd\x59\x71\x51\x7c\xed\x8b\x4b\x87\xbb\xb3\x5a\x48\x9e\xf1\x39\x6f\xb5\x5b\x0d\xae\xc4\xa0\x7e\x23\xc5\x2b\x39\x4f\xe2\xf5\x76\x79\x28\xac\x90\xca\x15\xf7\x2b\x87\xb9\x78\xfa\x83\x72\x86\x55\x4b\x51\xb7\x50\x66\xf3\xc7\x21\x25\x99\xce\x7b\x9c\x21\xa6\x67\xba\x1d\xa3\x2a\x54\x54\x57\x57\x40\xc9\x6c\x31\x06\x4a\x66\x7d\xd4\x08\xa9\xe7\xfb\x1f\x92\xf2\x15\x68\x7d\x85\xb4\x98\x0d\x41\xf1\xf4\xa9\xcf\x19\x62\x3a\xd3\xed\x14\x55\x51\xee\xec\x65\x4c\x3a\xb2\xf5\xf8\x64\xd0\x43\x48\xfa\xef\xd6\xaf\x43\x3c\x03\xd7\x3e\x50\x82\x4b\x8c\xd9\x92\xce\x74\xdf\x98\xa2\x0c\x9c\x58\x4f\x99\x58\x1f\xcf\xa6\x93\x8b\x24\x8e\xbf\x34\x8c\xb5\xf5\xc4\x64\x8d\x14\x90\x79\xab\x6b\xc6\xa6\xae\xb1\xd8\x67\x35\x0f\x99\x65\xb6\x95\x14\xc9\x78\x88\x06\xcf\x2f\x6b\x05\xdc\xfe\xb5\xbd\xa8\xa7\xf9\x95\x24\x17\x3e\xeb\x4c\xd4\x34\xb3\xdb\x40\x6d\xfe\x53\xf1\xb6\xa2\xa3\xb7\xd0\x16\x58\xee\x7b\x6d\x9e\x2b\x70\x25\x99\x28\x40\xda\xad\x85\x72\x93\xd4\x56\xbb\x86\x1c\x6a\x60\xda\x04\x28\xe3\x96\x23\xd0\x54\x1a\x29\x72\x34\x8c\xae\xeb\x85\xca\xa8\xeb\xa7\xc1\x4a\x01\x35\xdb\x83\xe4\x74\xde\xc7\x66\xb4\xcd\x5f\x23\xcf\xe0\x58\x8a\xe3\x30\x4e\xde\xa1\x51\x27\x90\x0a\xbd\x87\x72\xb8\xb6\x45\x3c\xe6\x0e\xe4\x70\x39\xd7\xe1\xb0\xfd\xf9\xed\x65\xc0\x7e\xbc\xc4\x6e\xec\x97\xd0\xfb\x77\x1b\xf2\x94\x91\x26\xde\x49\xb1\x22\xa5\xd0\x84\xc8\x4b\xf7\xf1\x09\xb9\xe7\x0e\xab\x77\x4a\xa7\x77\xf6\x31\xf9\x1b\x00\x00\xff\xff\x64\x2f\xe5\xf4\xc7\x06\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1555877026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
