// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x5d\x6f\x1a\x39\x14\x7d\xe7\x57\xdc\xfa\x05\x4f\x33\x4c\x20\xdd\x7d\x09\x9a\x54\xa5\xcd\xaa\x2b\x25\xe9\x2a\xc9\x6a\xb5\x42\x3c\x98\xf1\x65\xf0\xd6\xd8\xc8\xf6\xf0\x95\xf2\xdf\x57\xb6\x87\x81\x41\x49\x55\x5e\x06\xfb\x1e\x9f\x73\xbf\xec\xbb\x62\x06\x9c\x58\xa0\xae\x9c\x85\x1c\xc6\x93\x4e\xc7\x6f\x59\x5d\x99\x02\x21\x07\x85\x6b\xb8\x5d\xa1\x72\x4f\x61\x87\x92\x4b\xf4\x2b\x7b\x49\x92\x61\x27\xa2\x32\xad\x16\x68\x2d\x2b\x3d\x7e\x56\xa9\xc2\x09\xad\x68\x80\x25\xf0\xd2\x01\x00\xf0\x94\x61\xe3\x0b\x3a\x26\xa4\x57\x0a\xcb\x8c\x33\xc7\x32\xbb\x94\xc2\xd1\x6e\xda\x4d\x02\xd8\xae\x85\x2b\xe6\xf4\x14\x3f\xee\x4f\x0e\x54\x00\x05\xb3\x08\xa4\x5a\x72\xe6\x70\xa4\x37\xe4\xba\xde\x8f\x32\x8e\x99\x12\xdd\x48\x6f\x20\x07\xae\x8b\x6a\xe1\x65\x4a\x74\xb7\x12\xfd\xdf\xd1\xf6\x4f\xde\xa6\x1e\x4c\x92\x61\xc3\x50\xcc\x99\x2a\xf1\x93\x44\xe3\xee\x70\x85\x92\x36\x74\x69\x2b\x80\xf1\xd5\xe4\x6c\xe3\x37\x4f\xd3\xf0\x88\x19\xd0\xb6\xfd\xc3\x04\x6e\xa0\x0f\xc7\x30\xfc\x8f\x79\xa1\x07\xfd\x77\x88\xe5\xdc\xad\xf4\x9c\x20\x69\x4e\xee\x8f\x4a\x53\x83\xec\xfb\xb0\x95\x1a\x83\x52\x33\xfe\x17\x2b\xf1\x24\x37\x52\x17\xcc\x17\x26\x8b\x56\x1a\xc9\xf6\x9d\xfd\xb0\xd3\xe9\x1c\xaa\x06\x53\xbd\xf9\x2c\x45\xf1\x9d\x0a\xee\x3d\xdd\x9f\xda\x16\xdb\x67\xb1\x40\xda\x14\x35\xc4\xe8\xe0\x5d\x0e\xaa\x92\xb2\x15\x99\xa9\x3b\xe7\x8b\x0f\xcb\xd5\x52\x80\xd2\xe2\x5b\xa0\x83\x3b\xc1\x80\xae\x32\x0a\x8c\x2f\xdb\x1f\x95\x94\xff\x22\x33\x34\x81\x0b\x20\x3d\x02\x17\xb0\x64\x9c\x06\xdb\xbd\x56\x6e\x1e\x0c\x83\xf4\xaa\xb1\x37\xfc\x0d\x2e\x0a\xd4\x90\xe7\x16\xc5\x57\x5d\x19\xdb\xd8\xae\x5f\x3d\x7e\x2f\x54\xe5\xb0\x8d\x3a\x5a\x9f\xb0\xd0\x8a\x47\x6b\x3b\x5f\x1e\xa2\x52\x58\x0b\xee\xe6\x29\xec\x62\x7e\x76\x90\xc3\x0e\x7e\xfc\x80\x6e\xbf\xeb\xab\xa6\x7c\x12\xe0\x02\xba\x61\x55\x47\xae\x32\x89\xaa\x74\x73\xb8\xc9\xe3\x71\xf8\x08\x0a\xae\x43\xb6\x3e\x19\xc3\xb6\x34\xee\xf6\x8e\xc8\x0b\x18\x24\xd9\x7f\x5a\x28\xba\xf3\x4e\xaa\x61\xdb\x97\x37\xfa\x3a\x05\xe9\x57\x29\xd4\x17\xb8\x55\xda\x31\x61\x8b\x29\x1a\x92\x92\xd2\x20\xaa\xf8\xdd\x92\x94\x18\xe4\x64\x92\x09\xc5\x71\xf3\x6d\x46\x03\x43\x02\x79\x0e\xbd\x41\x02\x2f\x91\x11\x72\x88\xe8\xba\xa4\x51\x2e\x2b\x24\xb3\xf6\x4e\x58\x97\x19\x5c\xe8\x15\xd2\x83\x04\x1c\x34\xea\x63\x29\x04\x95\xe4\xf5\xc3\x8c\xf3\x5a\xf6\xd4\x7e\xbc\xe4\x76\xb4\xfd\xec\xc1\x0f\x6c\x81\x94\xd4\xb1\x91\x64\xdc\xf7\x5e\x2b\x34\x5f\x9f\xef\xef\x20\x3f\x04\xfd\x2b\x1c\x92\x59\x17\x6f\x29\x7f\x85\x27\x5e\x8c\xb3\xf2\x1b\x51\xce\xdd\x93\xd8\xe1\x48\x94\x23\xbd\xa1\xa7\x6f\x21\x5b\x31\x21\xd9\x54\xe2\x3f\xa1\x8e\x39\xdc\x33\x37\xcf\x66\x52\x6b\x43\xe9\x5a\x28\xae\xd7\x51\x21\xda\x7b\x1f\xfa\x09\x5c\xc2\xef\x83\xab\x04\xde\xfb\x4f\x20\x0a\x3d\x10\x1f\x3a\x7a\x46\x78\x93\x47\xf0\xc7\x33\xa5\xeb\xc3\xd9\xb7\x5e\xc6\xee\x54\x94\xbd\xa9\xde\x74\x93\xcc\xba\xad\xc4\x6c\x5d\x3b\xd8\x88\x5d\x00\x59\x6e\xc8\xcf\x49\xac\x63\xae\xb2\xbd\x29\x33\xe7\x3c\xf4\x48\xd4\xbb\x82\xe4\xc0\xd6\x4a\x5c\xfb\x51\x14\x3c\x0d\x03\xea\xd8\x9a\xd4\x6d\x97\xa8\x67\xcd\xd8\x1a\x0b\x3e\x81\x77\x79\x0e\xa4\x52\x1c\x67\x42\xf9\x1a\xc1\x0b\x14\x12\x99\x79\x8e\x20\x7a\x0a\x4e\xf6\xc3\x4e\x7b\x5c\xfc\x64\x56\x08\x5e\x37\xd9\xa9\x5a\x0e\x16\xdd\x81\xba\x19\x79\xc9\xcb\x9b\xd7\x2c\x74\x73\x0a\xe4\xf6\xf1\xf1\xdb\xe3\x35\x3c\x68\x88\xf3\xcb\xc2\x4c\x1b\xf0\x0f\x8a\xe7\xf7\xe9\xb0\x19\x49\xf6\x31\x64\x78\x0f\x83\x7e\xbf\xef\xfb\xea\xff\x00\x00\x00\xff\xff\xea\xfd\x58\xc5\xa7\x07\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 1959, mode: os.FileMode(420), modTime: time.Unix(1555872326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x72\x9b\x30\x10\xc6\xef\x7e\x0a\x4d\x32\xbd\x05\x0f\x98\xd8\x69\xe4\x5b\xa7\x6f\xd0\xa6\xf7\x05\x2d\x78\x1b\x21\x79\xa4\xc5\xb1\x9b\xc9\xbb\x77\x6c\x64\xc0\x05\xff\xe9\x4c\x8e\x2c\xdf\xf7\xfb\x96\xdd\x65\x2d\xde\x0b\x6b\x38\x2a\xa0\x22\xbd\x93\xe2\xee\x3b\xfe\x86\x4d\x2d\x7e\x80\xf1\x77\x0f\xe2\x17\x3a\x05\x06\x1e\x84\x07\xe3\x23\x8f\x8e\x8a\xe5\xc7\x64\xa2\x68\x33\x2d\x1d\xa2\x11\xef\x13\x21\x84\xc8\x20\x7f\x2d\x9d\xad\x8d\x8a\x72\xab\xad\x93\xf7\x69\x9a\xe7\x69\xba\x9c\x04\xb1\x43\x75\x56\x9a\xe7\x71\x1c\xc7\xad\x14\xaa\x0c\xdd\x59\x71\x51\x7c\xed\x8b\x4b\x87\xbb\xb3\x5a\x48\x9e\xf1\x39\x6f\xb5\x5b\x0d\xae\xc4\xa0\x7e\x23\xc5\x2b\x39\x4f\xe2\xf5\x76\x79\x28\xac\x90\xca\x15\xf7\x2b\x87\xb9\x78\xfa\x83\x72\x86\x55\x4b\x51\xb7\x50\x66\xf3\xc7\x21\x25\x99\xce\x7b\x9c\x21\xa6\x67\xba\x1d\xa3\x2a\x54\x54\x57\x57\x40\xc9\x6c\x31\x06\x4a\x66\x7d\xd4\x08\xa9\xe7\xfb\x1f\x92\xf2\x15\x68\x7d\x85\xb4\x98\x0d\x41\xf1\xf4\xa9\xcf\x19\x62\x3a\xd3\xed\x14\x55\x51\xee\xec\x65\x4c\x3a\xb2\xf5\xf8\x64\xd0\x43\x48\xfa\xef\xd6\xaf\x43\x3c\x03\xd7\x3e\x50\x82\x4b\x8c\xd9\x92\xce\x74\xdf\x98\xa2\x0c\x9c\x58\x4f\x99\x58\x1f\xcf\xa6\x93\x8b\x24\x8e\xbf\x34\x8c\xb5\xf5\xc4\x64\x8d\x14\x90\x79\xab\x6b\xc6\xa6\xae\xb1\xd8\x67\x35\x0f\x99\x65\xb6\x95\x14\xc9\x78\x88\x06\xcf\x2f\x6b\x05\xdc\xfe\xb5\xbd\xa8\xa7\xf9\x95\x24\x17\x3e\xeb\x4c\xd4\x34\xb3\xdb\x40\x6d\xfe\x53\xf1\xb6\xa2\xa3\xb7\xd0\x16\x58\xee\x7b\x6d\x9e\x2b\x70\x25\x99\x28\x40\xda\xad\x85\x72\x93\xd4\x56\xbb\x86\x1c\x6a\x60\xda\x04\x28\xe3\x96\x23\xd0\x54\x1a\x29\x72\x34\x8c\xae\xeb\x85\xca\xa8\xeb\xa7\xc1\x4a\x01\x35\xdb\x83\xe4\x74\xde\xc7\x66\xb4\xcd\x5f\x23\xcf\xe0\x58\x8a\xe3\x30\x4e\xde\xa1\x51\x27\x90\x0a\xbd\x87\x72\xb8\xb6\x45\x3c\xe6\x0e\xe4\x70\x39\xd7\xe1\xb0\xfd\xf9\xed\x65\xc0\x7e\xbc\xc4\x6e\xec\x97\xd0\xfb\x77\x1b\xf2\x94\x91\x26\xde\x49\xb1\x22\xa5\xd0\x84\xc8\x4b\xf7\xf1\x09\xb9\xe7\x0e\xab\x77\x4a\xa7\x77\xf6\x31\xf9\x1b\x00\x00\xff\xff\x64\x2f\xe5\xf4\xc7\x06\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1555866449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
