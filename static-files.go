// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x73\xdb\x36\x13\xbe\xf3\x57\x6c\x70\x11\x19\x49\x94\x9c\x77\xfc\x1e\xac\xd2\x99\x38\x4d\x27\x6d\x62\xbb\x63\xbb\x93\xe9\x64\x32\x1d\x88\x58\x52\xa8\x20\x80\x03\x80\xfa\x70\xa2\xff\xde\x01\x40\x52\x1f\x8e\x52\x1f\xaa\x83\x24\xee\x3e\xbb\xfb\x60\xbf\x88\xd1\x08\xee\x50\x28\xca\x80\x17\xa0\x71\xb8\xe4\x86\x5b\x2e\x4b\xa8\x8d\xfb\x9e\xd2\x7c\x3e\x2a\x94\x5e\x51\xcd\x60\x5a\x5b\xab\xa4\x49\x23\x5e\x40\x7c\x6f\x35\x97\x65\xbc\xe2\x92\xa9\x55\x5a\xa1\x2e\x94\x5e\x50\x99\x63\x5a\xa2\x7d\x27\xad\xe6\x68\xae\x36\x0f\x9b\x0a\x63\x22\xe9\x92\x97\xd4\x72\x25\x49\xf2\x79\xfc\x25\xb5\x9b\x0a\x13\xc8\xb2\x0c\x88\x0b\xf0\x57\x13\x80\x24\x5f\x23\x00\xa1\x72\x0f\x4d\xb5\xe7\x15\x27\x93\x68\x1b\x45\x02\x2d\x2c\xb8\x31\xc8\x3e\x50\x03\x19\x8c\xa3\xc8\x53\x2f\xb9\xb1\xa8\x61\xc5\xed\x0c\xa6\x6a\x0d\xb8\x44\x69\xc1\xa8\x5a\xe7\xe8\x8d\xc2\x5f\xc8\x40\xe2\x0a\xde\x39\xed\xbd\x97\xc4\x64\xe4\xb1\x66\x44\x92\x49\x14\x50\xa9\x92\x0b\x34\x86\x96\x0e\x5f\xd4\x32\x77\x3c\x62\x0f\x4b\xc0\x71\x83\xc6\x7f\x06\xbf\xdd\xdf\xde\xa4\x15\xd5\x06\x83\x3e\x65\xd4\xd2\x64\xe2\x31\x66\xc5\x6d\x3e\x6b\xe4\xe1\xac\xc1\x18\x20\xa7\x06\x81\xcc\x11\x2b\x2a\xf8\x12\xc9\x45\x23\x07\xe8\x64\xee\xc0\x9d\x74\xaa\x91\xce\xbb\xe7\x60\x5d\x57\x8c\x5a\xbc\x52\xeb\x3d\x6b\x77\x52\x4b\x75\x89\xf6\x4a\xad\x21\x03\xa6\xf2\x7a\xe1\xc2\xbb\x62\x08\x74\x7f\xaf\x36\xbf\xb2\x86\x13\x67\x0d\x53\xf7\x71\xc5\xdc\x99\xbe\xc8\x32\x90\xb5\x10\x09\x7c\x85\x7c\x46\x65\x89\x6f\x04\x6a\xfb\x11\x97\x28\x76\xb0\x41\xc8\x43\x6a\x2c\xb5\xb5\x69\x9f\x04\x35\xf6\x3a\xe4\x2f\x99\xc0\xf6\xc7\xa7\x60\x28\xf0\xf8\x14\x9d\x6c\x9f\xe7\x0f\xbd\x84\x1e\xf9\x9d\x96\xfb\xa9\x7c\xd2\x41\x5e\xb3\x8d\xb6\x93\x28\x6a\xab\xea\x9a\xe5\xbd\x5a\xa2\x8e\x2d\xaf\xda\xfa\xec\xb2\xf8\x83\x14\x12\xab\x94\xb0\xbc\x22\xc1\x6d\xc0\xa7\x5c\x4a\xd4\xef\x1f\xae\x3f\x42\x06\x96\x57\xfb\x2a\xc6\x4d\x25\xe8\x06\x5c\xb7\x0b\x95\xcf\x89\xeb\xe7\x03\x22\xb7\xb5\x8d\xff\x63\x0e\x84\x9c\xa0\x30\xe3\x8c\xa1\x7c\xca\xe1\xad\xe0\xf9\x3c\xe6\xac\xe5\xd1\x0c\x76\x97\xcb\x99\xc6\xc2\xd9\x8f\xa6\x6a\x3d\x22\xd0\x07\xce\x26\x87\x4e\x76\xd5\x6b\xbd\x3c\xeb\x2c\x4d\x33\x36\x4c\x2b\xaa\x51\xda\x1b\xc5\x30\xd5\xb8\x50\x4b\x7c\x3b\xe3\x82\x35\x9d\x97\x1c\x45\xdc\x9b\x99\xe7\xc7\x23\xa1\x69\x87\x53\xaa\x89\x8f\x7c\xa2\xcd\x07\x40\x4a\x8d\x28\xc9\x00\x48\x00\xf2\x22\x76\xd3\xac\x0a\x98\x53\x3f\x28\xa4\x96\x0c\x0b\x2e\x91\x11\x3f\x2f\x02\xa9\x7e\xe0\x0b\x54\xb5\x8d\xe7\xd4\xcd\x80\x33\x9b\x53\xc8\xc0\xa0\x6d\x35\x3e\xbd\xdd\x76\x49\xda\xd5\xd0\x6d\xb7\x7e\xbf\x1d\x4e\x37\x9a\xbb\xa5\x77\x09\xe7\xe0\xc2\x3c\x5d\x90\x21\x4e\x6b\x11\x4b\xb5\x8a\x13\x18\x82\x9b\xc7\x0f\x34\x81\x4b\xf8\xff\xf8\x5f\x2d\x03\xd8\xed\x49\x67\xdd\x4a\x4f\xe7\x46\x23\x73\x99\x79\x77\x77\x77\x7b\x77\x01\x37\x6a\x57\x0c\x03\x85\xd2\x70\x6e\x52\xd2\xb8\xd9\xfa\xef\x01\x9c\xc3\x4b\x38\x1b\x8f\xc7\x11\xc0\x71\x25\x17\x1b\x97\x9d\xd8\xee\x4f\x81\x0e\xd6\x7e\x3f\xc1\x8b\x6e\x2d\x75\x63\xae\x9b\xa5\xfe\x33\xb5\xce\x32\x84\x02\x14\x06\x4f\x81\x92\x3d\x3a\x1a\x6d\xad\x25\x68\xd7\x1e\xbf\xd4\x42\xfc\x89\x54\xc7\x09\xf4\x81\x0c\x5d\x77\x57\x94\xc5\x5e\x77\xad\xa4\x9d\x79\xc5\xd9\xe0\x55\xa7\xef\xfc\x77\xb8\x10\xa0\x81\x3c\x1c\xb8\x78\xaf\x6a\x6d\x3a\xdd\xc5\x77\xcd\xaf\xb9\xac\x2d\x1e\xa2\x76\xda\x7b\xcc\x95\x64\x41\x7b\x98\x38\x07\x91\x03\x58\x71\x66\x67\x03\x78\x0c\xf9\x79\x84\x0c\x1e\xe1\xdb\x37\xe8\x8d\x7b\x2e\x89\xd2\x25\x01\xfa\xd0\xf3\x4f\xcd\xc9\x65\x2a\x50\x96\x76\x06\x97\x59\x30\x87\xd7\x20\xe1\xc2\x67\xeb\x8d\xd6\x74\x13\x07\xe9\x70\x87\xec\xc3\x59\x92\xfe\xad\xb8\x8c\x1f\x1d\x49\x79\x54\xc4\x93\xcd\xd2\xbe\x26\x9a\x97\x6b\x5b\x44\x57\x59\xf8\x4c\xe8\x62\x8a\x9a\x0c\xda\x69\x73\xbf\x1b\x32\x20\x52\xfd\xe1\x5f\x74\x64\xe0\x7b\xed\x4b\xca\x25\xc3\xf5\x6d\x11\x07\x6f\xe1\xfe\x30\x3c\x73\x7d\x1d\x24\x6e\x3b\x79\xdb\xa6\xc2\xcd\x46\xc9\x05\x35\xe6\x23\x37\xb6\x59\x28\x71\x1b\x70\x6f\xbe\x43\x48\xd8\x8b\x19\x1a\xbc\x69\xe0\x27\x9e\x28\x63\x2d\x8d\x03\xc4\x6e\xd5\x98\xab\xcd\x5b\x07\xbf\xa1\x0b\x8c\x49\x73\xf0\x70\xfb\xd9\x5f\xd3\x8d\xe2\x59\x4e\xdc\x84\x06\x7a\xec\x3b\x8e\xc2\x00\x1d\x75\x87\xe6\xe5\xcc\xde\xf3\x47\xbc\xe2\xa5\x5b\xcc\xfb\xe3\x45\x97\x94\x0b\x3a\x15\xf8\xc9\x97\x39\x83\x6b\x6a\x67\x69\x21\x94\xd2\x71\x7b\xad\xf3\x11\x82\x7e\xf8\xbf\x71\x02\x23\x38\x3f\x7b\x95\xc0\x4b\xf7\x33\xe9\x3c\xf9\x3e\x09\xf7\x8e\xf8\xc8\xeb\x65\x16\x2c\x5e\x1f\x85\xbb\xe8\x1c\x9c\x5a\xd3\xbd\x29\x2f\x87\x53\xb5\xee\x25\xa9\xb1\x1b\x81\xe9\xaa\xa1\xd9\x45\xeb\x03\xa9\xd6\x64\x47\xa3\xa8\x85\xf8\xd4\x28\xd1\x7c\xff\x0d\x70\x90\xd1\x9e\xb3\xf0\xee\x7a\x4d\x19\xdd\xe2\x8a\x9d\x2f\xee\xae\x98\x13\xe0\xf0\xd3\x91\xdb\x66\x14\x26\xc0\xfb\xfd\xfd\x65\x74\x88\xfa\xcc\xbf\x1c\xb1\x8e\x3b\xda\x43\x08\x13\xde\x71\xdf\x46\xdb\xe8\x9f\x00\x00\x00\xff\xff\x57\x9f\x85\x75\x87\x0b\x00\x00")

func scriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsJs,
		"scripts.js",
	)
}

func scriptsJs() (*asset, error) {
	bytes, err := scriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.js", size: 2951, mode: os.FileMode(420), modTime: time.Unix(1579980078, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xc1\x72\x9b\x30\x10\xbd\xf3\x15\x3b\xc9\xe4\xe2\x31\x18\x4c\x9c\x26\xe4\xd6\xe9\x1f\xb4\xe9\x7d\x41\x02\xab\x11\x12\x23\x2d\x8e\xdd\x4c\xfe\xbd\x03\x02\x1b\x3b\x90\x34\x4e\x8e\x5a\x56\x4f\xda\xb7\x4f\x6f\x59\xcc\x40\xa2\xa5\x87\x8a\x21\x71\xc8\x24\x5a\x0b\x30\x5b\x78\xc1\x21\xca\xe0\xd9\x03\x00\xc8\xb5\x22\xdf\x8a\xbf\x3c\xb9\x0e\xaf\xee\xdb\x50\x89\xa6\x10\xca\x4f\xa5\xce\x1e\x7d\xae\x58\x02\x58\x93\x1e\xf9\x66\x09\x0d\x0d\xbf\x56\xda\x0a\x12\x5a\x25\x80\xa9\xd5\xb2\x26\xee\xe2\x46\x14\x6b\x4a\x20\xae\xb6\x6e\x9d\x6a\x22\x5d\x26\x10\x35\x81\x17\xcf\x63\x62\x73\x69\x09\xa9\xb6\x7e\x8a\x06\xde\xbc\x26\x7c\x5b\x5d\xb5\x9b\x82\x52\x64\x46\x8f\x25\x33\x61\x2b\x89\xbb\x04\x94\x56\xdc\xe5\xb2\x8f\x24\xdb\x12\xa5\xfc\xbf\x5c\x6f\x31\x83\x92\x5b\x8b\x45\xcf\xf3\x6c\xe1\x55\x41\x1f\x3a\xbd\xfc\xcd\xb9\x1c\x87\xc1\x8a\x97\x47\x65\x1f\x1f\xf1\x46\xc9\xef\x25\x36\x25\x90\x20\x39\x28\x20\x70\xeb\xe7\x4f\xc8\x61\xa4\xab\x43\xd0\x23\x05\x9c\x34\x38\x0a\x7b\x96\x24\xcf\x87\xb2\x19\x93\x57\x57\x80\xe5\x44\x42\x15\xc0\x78\x8e\xb5\xa4\x16\x0e\x72\x2c\x85\xdc\xb5\x1d\x99\x43\xaa\xd9\x6e\x0e\x84\x69\x73\x87\xf6\x34\xf7\x39\x81\x8b\x1f\xfc\x0f\x6e\x6a\xf8\x89\xca\x5e\xcc\xe1\x37\x37\x0c\x15\xce\xc1\xa2\xb2\xbe\xe5\x46\xe4\xf7\xdd\x29\xa9\xde\x42\xa6\xa5\x36\x8e\x2a\xee\xc8\x2a\x0c\xe7\xaa\xaf\x0b\xb3\xc7\xc2\xe8\x5a\x31\xbf\x4d\x4c\x2e\xe3\x38\xcb\xe2\xd8\xb5\xc4\x70\x36\x87\x40\xe9\xee\x61\x4e\x6d\xc9\xb2\x30\x0c\x43\xb7\x05\xcb\x94\x9b\xc9\xcc\x3c\xbf\xdd\x67\x16\x86\xef\x26\x13\x31\xba\xe3\x77\xd9\x9e\xae\xa6\x90\x86\xec\xa3\x3a\xb6\x12\xcd\x88\x66\x97\x8d\xf0\x9a\xd0\x9a\xb7\xcf\x78\x15\x85\x7d\x43\x9e\x04\xa3\x75\x1f\x68\x35\x37\x0e\x11\x39\xf5\x0e\x40\x96\xab\xeb\x49\x90\xb3\x31\xba\x80\x13\x3f\x67\xa2\x2e\x47\x50\xa2\xe5\x29\x4e\xb4\xbc\x99\xc4\xf9\x0c\x4c\x17\x68\xaf\xe3\x2c\xe5\x14\x26\x0c\x6e\x4f\x40\x6e\x96\x93\x18\xe7\x42\xb8\xf5\xc0\x11\xde\x87\x88\xc3\x29\x88\x73\x11\xe2\x7d\x77\x9d\x23\xbc\x66\xf4\x04\x00\xf6\x3b\xf6\x0f\x6f\x20\xd5\x66\xed\x10\x9c\xbe\xe1\x69\x2d\xfa\x61\x93\x4b\x8d\x94\x34\xd6\x71\xec\x51\xce\x71\xf6\xe4\x74\x61\x37\x9a\x96\xaf\x2d\xc6\x70\x89\x24\x36\x1d\x28\xf1\x2d\xf9\x28\x45\xa1\x12\xc8\xb8\x22\x6e\x5c\x35\xa9\x28\xfc\xc3\x65\x1c\xe6\xc0\x02\xdb\xf1\x80\xdb\x5f\xdf\x1f\x06\xe6\xda\x05\x46\xfd\xf8\x4b\x47\x72\x77\x01\xa1\x72\xdd\x19\x5f\x73\xfc\x60\x39\x45\x61\x85\x8c\x09\x55\xf8\xce\x7f\x57\x7d\xeb\xdc\xce\x7e\x18\x0e\x29\x71\x6c\x1f\x72\xd6\x23\x39\x2d\xd3\x87\x89\xa3\xb5\x24\x51\x0d\x67\x4e\x17\xf9\xc8\x80\xf8\xfa\x5f\x15\x27\xd7\xee\x88\x17\xcf\xfb\x17\x00\x00\xff\xff\x47\xf0\x4c\xcc\x4b\x09\x00\x00")

func standardCssBytes() ([]byte, error) {
	return bindataRead(
		_standardCss,
		"standard.css",
	)
}

func standardCss() (*asset, error) {
	bytes, err := standardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standard.css", size: 2379, mode: os.FileMode(420), modTime: time.Unix(1580041913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.js":   scriptsJs,
	"standard.css": standardCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.js":   &bintree{scriptsJs, map[string]*bintree{}},
	"standard.css": &bintree{standardCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
