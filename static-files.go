// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\xc5\x64\x4a\x32\x92\x29\xa5\x3b\xed\x83\x65\xa5\x13\x7b\x33\xd3\xee\x26\x71\x27\x76\xa6\x0f\x99\xcc\x06\x22\x8f\x28\x44\x14\xc0\x01\xa0\x9b\x5d\xfd\xf7\x9d\x03\x80\x17\xa9\x52\xeb\x6d\xbb\xf5\x83\x45\xe2\x5c\x71\xf0\x9d\x0b\x38\x7c\x0e\x5f\xcc\x5c\x48\x0b\x68\xd6\xa8\x8d\x50\xf2\x12\xbe\x83\xe7\xc3\x5e\x6f\x38\x84\xf7\x58\x2a\x9e\x83\x98\x81\xc6\x8b\xb5\x30\xc2\x0a\x59\xc0\xca\xd0\xff\x29\xcf\x16\xc3\x99\xd2\x1b\xae\x73\x98\xae\xac\x55\xd2\xa4\x3d\x31\x83\xf8\xce\x6a\x21\x8b\x78\x23\x64\xae\x36\x69\x85\x7a\xa6\xf4\x92\xcb\x0c\xd3\x02\xed\x6b\x69\xb5\x40\x73\xbd\xbb\xdf\x55\x18\x33\xc9\xd7\xa2\xe0\x56\x28\xc9\x92\x8f\xa3\x4f\xa9\xdd\x55\x98\xc0\x64\x32\x01\x46\x06\xfe\x13\x0c\xb0\xe4\xb1\x07\x50\xaa\xcc\xb1\xa6\xda\xf9\x15\x27\xe3\xde\xbe\x17\x1c\x2d\x84\xb1\xa8\x61\x23\xec\x1c\xa6\x6a\x0b\xb8\x46\x69\xc1\xa8\x95\xce\xb0\x57\x62\xfd\x08\x13\x90\xb8\x81\xd7\x44\xbd\x73\x2b\x31\x1b\x3a\x5e\x33\x64\xc9\xb8\xe7\xb9\x52\x25\x97\x68\x0c\x2f\x88\x7f\xb6\x92\x19\x59\x8d\x1d\x5b\x02\xe4\x89\xd7\x3e\x81\x7f\xdd\xdd\xbe\x4b\x2b\xae\x0d\x7a\x6a\x9a\x73\xcb\x93\x71\x0f\xc0\x6c\x84\xcd\xe6\x61\xd5\xef\x8a\x04\x01\x32\x6e\x10\xd8\x02\xb1\xe2\xa5\x58\x23\xbb\x74\xab\x00\xcd\x0a\x6d\x2b\xac\x4d\x35\xf2\x45\x78\xf3\x72\xab\x2a\xe7\x16\xaf\xd5\xb6\x91\xa3\x88\x43\x88\x75\x13\xa0\x8a\xdb\xb9\xe4\x4b\xf4\x91\x1c\x32\xf8\xe5\x97\xdf\xe6\xf9\x3c\x9c\xaa\xed\xf0\xd9\xa3\xf7\x57\xe4\xfb\xcf\xb5\xbf\xf4\xd7\x58\x0d\x31\x18\x07\xca\xfe\xbc\xa3\x39\x96\xf8\xf7\x3b\xda\x58\x8d\x6b\xfa\x53\x7c\xcd\x34\xfe\xa1\xa0\x76\x2d\x37\x3a\x82\x65\x3e\xb3\xa8\x07\x1e\x28\xe9\x54\x6d\x9f\xe2\x87\x87\xf5\x4f\xbc\x68\x51\x71\x02\xf2\xa4\x62\x3f\xf6\xb8\xbf\x56\x5b\xb0\x4a\x95\x56\x54\xbd\x1a\xa7\x04\xff\x1f\xd4\x1a\x75\x6c\x45\xe5\x5d\x24\xfc\x5b\xae\x0b\x24\xcc\xe6\x2a\x5b\x2d\xc9\x2b\xca\xc6\x12\xe9\xf1\x7a\xf7\x63\x1e\xb3\xa0\x88\x39\x1b\x9e\x3d\x15\x52\xa2\xfe\xe1\xfe\xed\x1b\x98\x80\x15\x55\x87\x92\x0b\x53\x95\x7c\x07\x94\xa9\xa5\xca\x16\xcc\x27\x63\xd7\x8b\xdb\x95\x8d\xff\x4a\x07\x18\x3b\x6d\x7f\x2e\xf2\x1c\x25\x6b\xaa\x01\x45\x25\x2b\x45\xb6\x38\xf0\xe6\x86\x56\x62\x91\x7b\x8f\x8e\x0f\x77\xae\x71\x46\xba\x1c\xbc\x18\xf4\x41\xe4\x8d\xbe\x1b\x77\xb6\xa4\xa3\x55\xd8\x9e\x77\x38\x69\x3a\xe3\x76\xaf\xc2\x96\x48\xce\x12\x90\xa6\x6a\x5b\x7b\x4b\xf0\xa9\x51\xe3\x78\x60\x02\x47\x64\x77\xc0\x80\xa5\xc1\x13\x7c\x0d\x43\x2f\x18\xca\xc5\xfa\x46\x49\xeb\xab\xd1\x67\xc7\x7f\x95\x8b\x35\x28\xe9\x02\x30\x89\x9a\x8d\xdb\xb9\x30\x94\x0f\x11\x28\xb9\x54\x2b\x83\x04\x11\x47\xf7\x60\x61\xcf\x1e\x6b\x0b\x7b\xd6\xe1\x5a\x59\xc7\xe4\xce\x32\x02\x91\x4f\x22\xcf\x28\xf2\x7d\x04\x59\xc9\x8d\xa9\x57\x8c\xe5\x76\x65\xf6\x10\xde\xc4\x03\xee\xc9\xe9\xe8\x65\x93\x24\x57\x55\x2d\xe1\x36\x15\xbd\x7c\xf6\xe8\x1e\xf6\x57\xc3\xea\x14\x57\x28\xc2\xc4\x47\x2a\x4b\x6e\xec\x5b\xbf\x74\x4e\x82\x58\x3e\xb8\x6a\x95\x77\xa5\xfc\xd2\x59\x33\x7c\x7b\x7f\xfd\xa1\xe6\xf7\x6f\xe7\x78\x71\x5b\x09\x8d\xaf\xe8\xcc\x6b\x81\xce\x52\x2b\x75\x35\xcc\xc5\x9a\x1e\x3f\x8f\xeb\xb3\xaa\x34\x66\x98\x0b\x59\x10\x3e\xcf\xa7\x81\xc3\x93\x4b\x81\xae\x40\x2a\xa4\x41\x6d\x5f\xe5\x5f\x78\x86\xd2\x52\x46\xc4\xcc\xb1\xbe\x96\x39\x1b\x74\x80\xd0\xed\x8a\x4b\xb5\x3e\xc2\x6d\x5b\x21\xeb\x4c\x78\x52\x6e\x86\x42\x1a\x72\xaf\xe2\x1a\xa5\x7d\xa7\x72\x4c\xb5\xb3\x71\x33\x17\x65\x1e\x7b\x6a\x6b\xdf\x47\xfd\xd0\xfe\x71\x2b\x39\x72\xe1\xb7\x43\xd3\x29\xea\x21\xb7\x5a\xa9\xaf\x26\x13\x90\xab\xb2\x6c\xfa\xec\x9c\xcb\x02\x5f\x95\xa8\xed\x1b\x5c\x63\xd9\xb2\xd6\x55\xd9\xe3\xb5\x7e\xeb\x80\x2b\x69\x52\x8c\x4c\x78\xb2\x47\x45\xad\x9c\x1c\xd6\x6a\x43\x45\xb1\xd6\xda\xf1\xd5\x5c\xef\x6e\x08\x2d\xef\xf8\x12\x63\xe6\x25\xdd\x78\xe3\x7b\x80\x56\x9b\x43\xe6\x7b\x5e\x38\xd6\xc8\xe6\x91\x9b\x82\xba\x45\xaf\x6b\xde\xcb\x1f\x3b\xe5\xfb\xd1\x88\x25\xf0\x48\xaa\x8d\xdd\x95\xd8\x2d\x8f\x52\x49\x64\xe3\xba\xa6\x9c\x64\xb1\x7c\x5a\xe2\x85\x56\x1b\x36\xde\xff\x7a\xef\x1d\x80\xff\x91\x00\x74\xc4\xff\x64\x14\x3a\x9a\x8e\x43\xd1\x21\xfd\x3f\xe2\x11\x10\xdd\x0c\x69\x6e\xa4\x24\xc8\xfc\x9b\x8f\x5b\x70\x77\x66\xb8\x06\xd7\x99\x0d\x33\xe7\x3f\xb9\xc5\x38\xa1\x3d\xdf\x8b\x25\xfa\x4e\xee\xe6\x0c\xaf\x06\xbe\xfe\x1a\xe2\xf0\xd8\x87\xef\x46\xa3\xd1\x28\x81\x2b\x12\x4f\xe0\xf1\xc4\x1c\x40\x7e\x05\xf6\x09\x64\x76\xfc\xe4\x2e\xeb\x61\x7f\x31\xe5\xfa\xa0\xd1\xba\xfa\xf6\x46\x18\x1b\x52\x3a\x66\x7c\x39\x45\xcd\x06\xac\xd0\x88\xd2\xff\xee\xd8\x80\x49\xe5\xf3\x9a\x0d\x98\xc6\xfc\x8c\x0e\x9e\xe7\x71\x10\xec\x32\x9c\xcd\x11\x9f\x78\xec\x57\xe7\xee\x5b\xbe\x98\xc5\x34\x42\xab\x19\x2c\xb8\x4b\x74\xb6\x92\x39\xce\x84\x24\xfb\xf0\x08\x59\x89\x5c\x53\x54\xd5\xca\xc6\x0b\x9e\x8c\x81\xa2\xb3\xa0\xc8\x18\x1f\x6e\x22\x38\xc4\x34\xd3\x7c\x52\xcf\x6e\x7f\xc5\xfe\x4f\xea\x71\x31\x68\xb8\x8f\xf9\xfe\xf7\x50\xbc\x7e\xff\xfe\xf6\xfd\x25\xbc\x53\x2d\xce\x0c\x18\x21\x33\x04\x1a\x58\x96\x3b\x87\x2b\x8f\x89\x04\xfa\xc0\x52\xe6\x6d\xee\x07\xf0\x2d\x3c\x87\x17\xa3\xd1\xa8\x07\xd0\xd6\xe7\x9f\x34\x5d\xfc\xac\x58\x22\x08\x09\xcb\x1d\x35\x9c\x19\x6a\x8d\x39\xb8\x2b\x9b\x6d\x91\x1d\x94\x77\xea\xb5\xae\xf1\x6b\xe1\xab\xc3\xca\xab\xbb\x80\xf7\x97\x85\x83\x81\xe6\x80\x1e\x6a\x2d\x80\x46\xbb\xd2\x12\x74\x6a\xd5\x8f\x77\xb7\xe1\x0e\xd9\xf1\x95\xe7\xc0\xc1\xb8\xe5\xd6\xad\x8a\xe7\xb1\x1c\xc0\x46\xe4\x76\x3e\x80\x07\xef\xc1\x03\x4c\xe0\x81\x2e\x12\xd1\x28\x22\xed\x92\xec\x41\x1f\x22\xf7\x16\xec\xc8\xb4\x44\x59\xd8\x39\xbc\x9c\x78\x71\xf8\x1e\x24\x5c\x3a\xc7\x5e\x69\xcd\x77\xb1\x5f\xbd\x68\x39\xfb\xf0\x22\x49\xbf\x28\x21\xe3\x07\x0a\xaf\x6c\xe7\x43\xd7\x6a\x80\x53\xaf\x81\x92\x9a\x0d\xa8\x19\xf0\xa3\x81\xf1\x74\x3f\x1a\x40\xdd\x86\xc2\xc1\xfb\x3d\xb8\xc2\xf0\xf1\x89\x10\x24\x9c\xe4\xb8\xbd\x9d\xc5\x5e\x97\xbf\x40\x5f\xbc\xa0\xd4\xf0\x2b\x04\x1f\x27\xeb\xca\xc6\xef\x21\x1e\x6a\x7b\x41\x68\x00\x1d\x8b\xf0\x3b\x59\x1f\x5c\xf8\x33\x49\x1f\x08\x4f\x50\xd1\x19\xf7\x4e\xa8\xd9\xb5\x85\xd6\xcd\x5f\xa1\xbd\x9b\xa6\x6b\x9d\xd5\x5b\x69\x5c\x0b\xb5\x32\xb5\x04\x6b\xaa\xb5\xaf\x43\x71\xa3\xeb\xe3\xe8\x13\xe1\x3f\x6a\x0a\x52\x94\x50\x25\x3f\xa6\x77\xf3\xa3\x4b\x3b\x35\xd6\x45\x6e\xac\x9b\x62\x21\x64\x34\x00\x76\x55\x8a\x97\x9d\xfc\x76\x99\x7d\xe9\x32\xde\x87\x3a\xb5\xea\x43\x55\xa1\xbe\xe1\x26\x50\x21\x76\xfc\xe1\x0b\x46\x1f\x58\x72\x35\x24\x25\xf5\xe5\xd1\xa3\xf6\x2d\x5f\x20\x4c\x45\xe1\x3e\x97\x58\x05\x33\x61\x81\x1b\x58\x72\xb9\xa3\xe5\x02\x8d\x25\x12\x1a\x5a\xdd\x88\xb2\x74\x1c\x76\x8e\x90\xad\x34\xcd\x7f\xf5\x1d\xaa\xc5\xb8\x16\xc5\xdc\xde\x89\x07\xbc\x16\x34\xb3\x76\xba\x20\x5f\x73\x51\x52\x53\xfd\xd9\x65\xd5\x04\xde\x72\x3b\x4f\x67\xa5\x52\x3a\xae\xbf\x14\xb9\xb3\xf3\xf4\x8b\x7f\x8c\x12\x18\xc2\xb7\x2f\xbe\x49\xe0\x39\xfd\xd4\x67\xe8\x92\xd2\x0f\x89\xf1\x91\xce\x97\x13\xcf\xff\xfd\x91\xb1\xcb\x20\x7e\xae\x21\x46\x53\x51\x5c\xd0\x3d\x25\x09\x73\xc0\x26\xb8\xd8\xd8\xea\x03\xab\xb6\xac\x76\x61\xb6\x2a\xcb\x9f\x03\xc9\x61\xe9\x84\xe2\x03\x34\x45\x24\xe1\x94\x45\xee\x04\x66\x4a\x43\x4c\x9a\x04\x4c\x60\x34\x06\x01\x57\x47\x4a\x43\xc5\x19\x83\xe8\xf7\x6b\xd4\x1c\x72\x7c\x14\x9f\x8e\xbc\x8d\x1b\x77\x2f\xe0\x9b\xa4\xe3\x33\x1d\xf8\x7f\x03\x00\x00\xff\xff\x92\x62\x19\x25\xe7\x13\x00\x00")

func bindataScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_bindataScriptsJs,
		"/scripts.js",
	)
}



func bindataScriptsJs() (*asset, error) {
	bytes, err := bindataScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/scripts.js",
		size: 5095,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1717274056, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStandardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcb\x72\xa3\x3a\x10\xdd\xf3\x15\x5d\x49\x65\xe3\xb2\x6c\x6c\xc7\xb9\x09\x59\xdd\x5b\xf7\x0f\x66\x32\x7b\x81\x1a\xac\x89\x90\x28\xa9\xf1\x63\x52\xf9\xf7\x29\x10\xd8\xe0\x40\x32\x71\x66\xa9\xd6\xe9\x23\xf5\x51\x3f\x34\x9f\x80\x43\x22\xa9\x33\x10\x98\xf2\x52\x11\xa4\x46\x13\xa4\x3c\x97\xea\x00\x93\x79\x50\x4c\x21\x36\xe2\x30\x05\xe2\xb1\x42\x78\x09\xa0\x46\x30\x8f\x88\xe0\xea\x7f\xfc\xc9\xb7\x25\x7c\xe3\xda\x5d\x4d\xe1\x07\x5a\xc1\x35\x9f\x82\xe3\xda\x31\x87\x56\xa6\x8f\xc1\x6b\x10\xcc\x27\xb0\x91\x02\xc1\x25\xd6\x28\x05\x31\xb7\xae\x62\x8f\x22\xb6\xc3\xf8\x59\x12\xf3\x1b\x31\xb7\xf5\x11\x42\xba\x42\xf1\x43\x04\xda\x68\xac\xfc\xab\x3b\xd4\x3b\x2c\x77\xcc\x6c\xd1\xa6\xca\xec\x98\xa3\x83\x42\x0f\x7a\x0c\x00\x8e\x1c\x6c\x27\x05\x6d\xda\x0d\x7f\xbc\xe2\x8e\x9e\x0a\xc1\x09\x21\x51\xdc\x39\xa8\xa3\x9b\x9d\xcc\xa2\xe6\x6f\xc2\x73\xf2\x17\x46\xb7\xe1\xcd\x63\x6d\xca\xb9\xcd\xa4\x66\xb1\x32\xc9\x33\x43\x2d\x22\xe0\x25\x99\x81\x3d\x47\xdc\x52\x77\xb7\x30\x4e\x92\x34\x3a\x02\x1e\x3b\xa3\x4a\x42\x6f\xb7\x32\xdb\x50\x04\xab\x62\xef\xd7\xb1\x21\x32\x79\x04\x8b\xca\xf0\x1a\x04\x42\x6e\xaf\x1d\x71\x2a\x1d\xab\x34\x79\xf7\x9a\xf0\xcf\xfa\xa6\x76\x9a\xe5\x32\xb1\x66\x08\xdc\xd3\xd3\x63\xc5\x67\xc0\x2e\xe7\x4a\xfd\x19\xb6\xd2\x3a\x47\xe7\x78\xd6\x0a\x5d\xeb\xdc\x9a\xce\x2f\x7f\x77\xa9\xc6\xe1\x6c\x8d\x79\x2f\xec\xfe\x11\xef\x84\xfc\x11\xb0\x0a\x81\x24\xa9\x4e\x00\x33\xbf\x7e\xf9\x42\x3a\x0c\xbc\x6a\x97\xb4\x97\x01\x67\x0f\xbc\x08\x5b\x95\x14\xa6\xdd\xb4\x19\x4a\xaf\x26\x80\xd8\xec\x21\x31\xca\x58\x1f\x04\xfa\x30\x32\x8b\xa8\xdb\x13\x79\xf2\x9c\x59\x53\x6a\xc1\x6a\x60\x74\xbd\x5a\x25\xc9\x6a\xe5\xc5\xb2\x28\xa6\x30\xd3\xa6\xa9\x99\x31\x97\x24\x09\xc3\x30\xf4\x2e\x3c\x8f\xd1\x8e\x22\xd3\xf4\xfe\x88\xcc\x2c\x1e\x46\x81\x7c\xf1\x80\x0f\x49\x2f\x90\x4a\x86\x5e\x1c\x7b\xc5\xed\x40\x36\x2d\xab\x94\xa8\x4c\x1b\xac\x0b\x6c\xbd\x08\x5b\xa9\x7c\x4b\x68\x0c\x75\x36\x0c\x53\x2c\x7c\x5e\x75\x48\x96\xeb\xdb\x51\x92\x8b\x39\x1a\x83\x4f\x4b\x14\xb2\xcc\x07\x58\x16\xcb\x73\x9e\xc5\xf2\x6e\x94\xe7\x2b\x34\x8d\xa1\xbe\x8e\x2f\xf6\x73\x9a\x70\x76\x7f\x46\x72\xb7\x1c\xe5\xb8\x94\xc2\xaf\x3b\xb5\xfa\x31\xc5\x2a\x1c\xa3\xb8\x94\x61\x75\x7c\x5d\x5f\xab\x6f\x15\x3d\x23\x80\xa3\xc7\xb1\xf0\x3a\xa9\x5a\xad\x3d\x83\xcf\x6f\xd8\x6d\x64\x3b\x06\x52\x65\x38\x45\x55\x51\xf7\xbb\x87\xef\x05\x47\x71\x1a\xb3\x1f\x1a\xcb\xb7\xc5\x6f\x51\x71\x92\xdb\x86\x94\x70\x4f\x8c\x2b\x99\xe9\x08\x12\xd4\x84\xd6\x47\x13\xcb\x8c\x9d\x2e\xe3\x39\x3b\xcd\xa9\x6e\xdc\x7c\xff\xfd\xbf\xa7\x5e\xdf\xf6\x96\xb1\x56\x39\x9f\x00\xee\x0b\x69\xf1\xdf\x94\xd0\x76\x1d\xbb\xe6\x77\xbc\xa5\x4e\x4d\xf3\xb7\xa8\xc4\xea\x2c\xc7\x34\x2b\xb8\x10\x52\x67\xcc\xb7\xc2\x75\xfb\x56\xde\xb3\x9d\x4b\x5d\x0d\xbc\xbc\x27\xcc\x66\x00\x53\x4b\xeb\xf9\xb7\x68\x49\x26\x5c\xb5\x5b\x64\x8a\x8e\x77\xd9\xa6\xb5\x92\x8e\xfc\x07\x84\xd1\xa1\xe8\xfc\x42\x4e\x37\x94\x5a\x49\x8d\xc7\x81\x75\xf6\x9a\x64\x8a\xb7\xc6\x76\x0a\xb4\x09\x55\x4d\x22\x63\x14\xc9\xa2\x3b\x8b\x1a\xcb\x67\x06\xc7\xdf\xff\xc2\x34\x7f\x2c\x7f\xc4\x6b\xf0\x3b\x00\x00\xff\xff\xaf\xdf\x00\xef\x4b\x0a\x00\x00")

func bindataStandardCssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStandardCss,
		"/standard.css",
	)
}



func bindataStandardCss() (*asset, error) {
	bytes, err := bindataStandardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/standard.css",
		size: 2635,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1717257132, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/scripts.js":   bindataScriptsJs,
	"/standard.css": bindataStandardCss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"scripts.js": {Func: bindataScriptsJs, Children: map[string]*bintree{}},
		"standard.css": {Func: bindataStandardCss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
