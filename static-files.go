// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static-source/scripts.js
// static-source/standard.css

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x6f\xdb\xc6\xf2\x7f\xd7\xa7\x98\x2e\x82\x98\x8a\x6d\x4a\xe9\x1f\xed\x83\x65\xba\x88\xdd\x00\xed\xff\x24\x76\x61\x3b\xc8\x43\x10\x9c\xac\xc8\x11\xb5\x31\xb5\x4b\xec\xae\x6e\x4e\xf4\xdd\x0f\x66\x2f\x24\xa5\x48\xa7\x0e\x4e\x0b\x34\x0f\x31\x35\x3b\xb7\x9d\x99\xdf\xcc\x90\x83\x17\xf0\xd9\x4c\x85\xb4\x80\x66\x81\xda\x08\x25\xcf\xe0\x67\x78\x31\xe8\xf5\x06\x03\xb8\xc5\x4a\xf1\x02\xc4\x04\x34\x9e\x2e\x84\x11\x56\xc8\x12\xe6\x86\xfe\x1f\xf3\xfc\x61\x30\x51\x7a\xc9\x75\x01\xe3\xb9\xb5\x4a\x9a\xb4\x27\x26\x90\xf4\x00\xee\xac\x16\xb2\x4c\x96\x42\x16\x6a\x99\xd6\xa8\x27\x4a\xcf\xb8\xcc\x31\x2d\xd1\xbe\x96\x56\x0b\x34\x97\xeb\xfb\x75\x8d\x09\x93\x7c\x21\x4a\x6e\x85\x92\xac\xff\x61\xf8\x31\xb5\xeb\x1a\xfb\x90\x65\x59\x0f\x80\x91\x95\x7f\x07\x2b\xac\xd7\x87\x2f\x3d\x80\x4a\xe5\x8e\x3d\xd5\xce\xbd\xa4\x3f\xea\x6d\x82\xbb\xa5\x30\x16\x35\x2c\x85\x9d\xc2\x58\xad\x00\x17\x28\x2d\x18\x35\xd7\x39\xf6\x2a\x8c\x8f\x90\x81\xc4\x25\xbc\xa6\xd3\x3b\x47\x49\xd8\xc0\xf1\x9a\x01\xeb\x8f\x7a\x9e\x2b\x55\x72\x86\xc6\xf0\x92\xf8\x27\x73\x99\x93\x51\x48\x1c\x9f\xf7\xc4\xab\xcf\xe0\xff\xef\x6e\xae\xd3\x9a\x6b\x83\xfe\x34\x2d\xb8\xe5\xfd\x51\x0f\xc0\x2c\x85\xcd\xa7\x41\x28\x5c\x8d\x24\x01\x72\x6e\x10\xd8\x03\x62\xcd\x2b\xb1\x40\x76\xe6\xa8\x00\x0d\x85\xee\x15\x68\x63\x8d\xfc\x21\xfc\xf2\x72\xf3\xba\xe0\x16\x2f\xd5\xaa\x91\x0b\x91\xf7\xff\x42\xe0\x9b\x48\xd5\xdc\x4e\x25\x9f\x21\x85\x15\xd8\x80\xc1\xd7\xaf\x4f\xe3\xfd\x34\x18\xab\xd5\xe0\xd9\x17\xef\xbf\x28\x36\x9f\x82\x5c\xbc\x06\xfd\x6b\x9c\x09\xb1\x19\x85\x93\xcd\x61\xff\x0b\xac\xf0\x1f\xe3\x7f\xe3\x4c\x12\xd9\x9e\x72\x85\x5c\xe3\x9e\x14\xfc\x99\xe7\x5d\xbb\x8d\x86\x60\x97\x4f\x2c\xea\x13\x5f\x55\xe9\x58\xad\x9e\xe2\x85\xc7\xc0\x1f\xbc\x6c\x2b\x68\x0f\x3e\x48\xc5\x66\xe4\x40\x72\xa9\x56\x60\x95\xaa\xac\xa8\x7b\x4d\x51\x8f\xd5\xea\x37\xb5\x40\x9d\x58\x51\x07\x90\xa1\x05\xcb\x75\x89\x54\xdf\x85\xca\xe7\x33\x72\x8a\xd0\x5b\x21\x3d\x5e\xae\x7f\x2f\x12\x16\x14\x31\x67\xc2\xb3\xa7\x42\x4a\xd4\xbf\xdd\xbf\x7d\x03\x19\x58\x51\x77\x4e\x0a\x61\xea\x8a\xaf\x21\x03\x36\xae\x54\xfe\xc0\x1c\x70\xbb\x4e\xdc\xcc\x6d\xf2\x57\xda\x67\x6c\xbf\xf9\xa9\x28\x0a\x94\x2c\x36\x0e\x8a\x49\x5e\x89\xfc\x61\xcb\x99\x2b\xa2\x24\xa2\xf0\x0e\xed\x26\x76\xaa\x71\x42\xaa\x5c\x81\x31\x38\x06\x51\x44\x75\x57\x2e\xaf\xa4\xa2\xd5\xd7\xe6\x3a\x64\x99\xf2\xdb\xde\x54\xd8\x0a\xc9\x55\x2a\xa1\xb1\x5a\x45\x5f\xaf\xf9\xac\x69\x18\x8e\x07\x32\xd8\x39\x76\xc9\x05\xac\x0c\xee\xe1\x93\x91\xa1\x17\x0c\x15\x62\x71\xa5\xa4\xf5\x6d\xcb\x63\xe1\xbc\x10\x0b\x50\xd2\xdd\x3f\x3b\x6a\xee\x6d\xa7\xc2\x10\x12\x8e\x40\xc9\x99\x9a\x1b\xa4\xfa\x70\xe7\xbe\x52\xd8\xb3\x2f\xd1\xc2\x86\x75\xb8\xe6\xd6\x31\xb9\x4c\x1e\x81\x28\xb2\x23\xcf\x28\x8a\xcd\x11\xe4\x15\x37\x26\x52\x8c\xe5\x76\x6e\x36\x10\x7e\x89\x47\xdc\x90\xd3\x47\x17\x0d\x40\xce\xeb\x28\xe1\x2e\x75\x74\xf1\xec\x8b\x7b\xd8\x9c\x0f\xea\x7d\x5c\xa1\x5d\x13\x1f\xa9\xac\xb8\xb1\x6f\x3d\xe9\x90\x04\xb1\xbc\x73\xed\xab\xe8\x4a\x79\xd2\x41\x33\x7c\x75\x7f\xf9\x2e\xf2\xfb\x5f\x87\x78\x71\x55\x0b\x8d\xaf\x28\xe7\x51\xa0\x43\x6a\xa5\xce\x07\x85\x58\xd0\xe3\xa7\x51\xcc\x55\xad\x31\xc7\x42\xc8\x92\xca\xf3\x30\x08\x5c\x3d\x39\x00\x74\x05\x52\x21\x0d\x6a\xfb\xaa\xf8\xcc\x73\x94\x96\xf0\x90\x30\xc7\xfa\x5a\x16\xec\xa4\x53\x08\x9d\xf1\x39\x53\x8b\x9d\xb2\x6d\x5b\x63\xc4\xc1\x93\x80\x19\x3a\x68\x00\x5e\xcd\x35\x4a\x7b\xad\x0a\x4c\xb5\xb3\x71\x35\x15\x55\x91\xf8\xd3\xc6\xbc\x8f\xf9\xb6\xf9\xdd\xc9\xb2\xe3\xc1\x7f\x0f\x4c\xa7\x99\x07\x64\xb5\x52\x3f\x64\x19\xc8\x79\x55\x35\xd3\x78\xca\x65\x89\xaf\x2a\xd4\xf6\x0d\x2e\xb0\x6a\x59\x63\x3f\xf6\xd5\x1a\x7f\x75\x4a\xab\xdf\x00\x8c\x4c\xf8\x63\x5f\x13\x51\xb9\x73\x98\xba\x61\xd4\xd9\xf1\xd4\x5c\xae\xaf\xa8\x52\x08\xca\x09\xf3\x72\x6e\x0f\xf2\xbd\xdf\x79\x9d\x5a\x5e\x5e\x37\x33\xe4\xfe\xb6\x33\x44\xec\xb6\xaa\x7b\xcf\x98\xb0\xfb\x5f\xfd\x32\xd5\x6d\x86\x5d\xd7\x46\x9d\x91\xd5\xa5\x7b\x13\x43\xb3\x35\xa7\xe8\xf2\xeb\x0a\xbb\x0d\x54\x2a\x89\xac\x19\x4f\xdd\xf6\x73\x40\xc0\xf2\x71\x85\xa7\x5a\x2d\x5b\xa9\xde\x1e\x59\xfb\x27\x1e\x6f\xbe\x8d\x75\x07\x4e\xdf\x1f\xf0\x8e\xf0\xdf\x1a\xf5\x8e\x9d\x6f\x43\xdf\x39\xfc\x27\xc6\xff\x1b\xdf\x7d\x12\x3c\x6a\x9b\x75\xd5\xad\xd7\x04\x8b\x7f\xf1\x51\x0b\xe0\xce\x36\xdb\x60\x37\xb7\x61\xff\xfe\x95\x5b\x4c\xfa\x14\xcb\x7b\x31\x43\xbf\xa7\x50\x54\xbc\x16\x78\xfe\x3c\xe8\x83\x63\xf8\x79\x38\x1c\x0e\xe1\x1c\x72\xdb\xe4\x78\xff\x96\x03\x51\x26\x83\xdc\x8e\x9e\xbc\x48\x78\x74\x9f\x8e\xb9\xde\xda\x25\x5c\x13\x7f\x23\x8c\x0d\x8d\x2b\x61\x7c\x36\x46\xcd\x4e\x80\x95\x1a\x51\x86\x87\x35\xfd\x95\xca\x77\x30\x7a\xd6\x58\x1c\xd0\xc3\x8b\x22\x09\xb2\x5d\x86\x83\x0d\xc1\xf7\x98\x6f\xcb\xca\x6f\x36\xae\x50\xd7\x35\xaa\x09\x3c\x70\xd7\xd4\xd8\x5c\x16\x38\x11\x92\x1c\x88\xbd\xad\x42\xae\x29\xc2\x6a\x6e\x93\x07\xde\x04\xea\x81\x82\x64\x7c\xf0\xe9\xa8\x7d\xc5\x69\x56\x8e\xbf\x28\x0a\x87\xe2\xd0\x30\x6f\x73\x7d\x6f\x30\x42\xed\xb2\xd7\xb7\xb7\x37\xb7\x67\x70\xad\xda\xb2\x33\x60\x84\xcc\x11\x68\x41\x9b\xad\x5d\x99\xf9\xfa\xe8\xc3\x31\xb0\xd4\x05\x71\x73\x02\x3f\xc1\x0b\x78\x39\x1c\x0e\x9b\x61\xf4\x87\xa6\x77\x62\x2b\x66\x08\x42\xc2\x6c\x4d\xb3\x75\x82\x5a\x63\x01\xee\x55\xd6\xb6\x25\x1e\xd4\x76\x86\x93\x6e\x52\x03\x3f\x6c\x8f\x19\xdd\xad\x7c\xff\xa2\xb4\x05\xc0\xad\xf3\x26\x51\x1a\xed\x5c\x4b\xd0\xa9\x55\xbf\xdf\xdd\x84\x77\xeb\xd6\x55\x5e\x00\x07\xe3\xa8\xad\x57\x35\x2f\x12\x79\x02\x4b\x51\xd8\xe9\x09\x3c\x7a\x07\x1e\x21\x83\x47\xf8\xfa\x15\xd8\xd0\xdd\x5c\x92\x39\x0a\x84\xfb\x15\xcc\xc8\xb4\x42\x59\xda\x29\x5c\x64\x5e\x1c\x7e\x01\x09\x67\xce\xaf\x57\x5a\xf3\x75\xe2\xa9\xa7\x2d\xe7\x31\xbc\xec\xa7\x9f\x95\x90\xc9\x23\xc5\x55\x36\x8b\xb0\x9b\xaa\xc0\x69\xac\x42\x45\x73\x15\xd4\x04\xf8\xce\x66\xbc\x7f\xf4\x9e\x40\x9c\xb8\x21\xed\xfe\x0a\x14\xd6\x0f\xdf\x51\x7f\x54\x28\x05\xae\x6e\x26\x89\x57\xe7\xbe\x2c\xc0\xe9\xcb\x98\x11\x4f\x25\x40\x39\x0d\x31\xe4\x7f\x2b\xfe\x83\x27\xff\x0b\xfc\xc3\xc1\x13\x54\x74\x36\xdc\x3d\x6a\xd6\x6d\xe7\x75\x2b\x67\xd8\x69\x4c\x33\x3c\x0f\xea\xad\x35\x2e\x84\x9a\x9b\x28\xc1\xfa\x3b\x0d\x29\x69\x94\x7d\x18\x7e\x24\x20\x6c\xb5\xa6\xe7\xcf\x61\xf7\xbc\x0b\x94\xee\xd9\xbe\x55\x36\x42\xde\x6d\xb4\x63\x2c\x85\x64\x27\x91\x76\x5e\x89\x0b\x06\xc7\xcd\x34\x8c\x97\xec\x90\xd8\x19\x74\x39\x7c\x42\x52\xab\xde\xd5\x35\xea\x2b\x6e\x76\xb8\x21\xd9\xd2\x17\x3e\x0a\x75\x18\xfa\xe7\x03\x32\xea\x5d\x88\xef\xdb\x0e\x02\x6f\xf9\x03\xc2\x58\x94\xee\x73\x94\x55\x30\x11\x16\xb8\x81\x19\x97\x6b\x22\x97\x68\x2c\x1d\xa1\x21\xea\x52\x54\x95\xe3\xb0\x53\x84\x7c\xae\x69\x6d\x8e\x2f\x9e\x2d\x60\xb4\x28\xa7\xf6\x4e\x3c\xe2\xa5\xa0\x4d\x3f\xa9\x79\x89\xf7\xcd\x97\x25\x4a\xa3\x03\xe8\xa5\x5a\xc5\x8c\x44\x0e\xbf\x5d\x14\xdc\x4c\xc7\x8a\xeb\x76\x42\x90\x0c\x5f\x70\x51\xd1\x92\xf0\xde\xa1\x3b\x83\xb7\xdc\x4e\xd3\x49\xa5\x94\x4e\xe2\x57\x0d\x57\x3a\xef\x03\xfa\xff\x6f\xd8\x87\x01\xfc\xf4\xf2\xc7\x3e\xbc\xa0\x3f\xbe\x85\x47\xd3\x90\xed\x6a\xbc\xc8\x88\x0b\x7e\xd9\xa5\x9f\x45\xe1\xad\x4e\xd8\xd1\xb3\xdf\x78\x44\xea\xc1\x91\x3e\x16\xe5\xe9\x58\xad\x58\x3f\x2c\x43\xcb\x70\xaf\x46\xf3\x31\xb0\x7a\xc5\x62\xe9\x4f\xe6\x55\xf5\x3e\x1c\xb9\xfa\xdf\xa3\x78\x1b\x01\x24\xe1\x94\xf9\xd2\x9f\x28\x0d\x09\x69\x12\x90\xc1\x70\x04\x02\xce\x77\x94\x86\x76\x39\x02\x71\x7c\x1c\x43\xbf\xcd\xf1\x41\x7c\x3c\xe4\xed\x29\xfc\xd8\xf1\x98\xca\xeb\x3f\x01\x00\x00\xff\xff\x5b\xd3\xe4\xad\xbc\x15\x00\x00")

func bindataScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_bindataScriptsJs,
		"/scripts.js",
	)
}



func bindataScriptsJs() (*asset, error) {
	bytes, err := bindataScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/scripts.js",
		size: 5564,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1748632895, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStandardCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x93\xdb\x28\x10\xbd\xeb\x57\x74\x25\x95\xcb\x94\xf1\x48\x76\xec\x4d\x34\xa7\xdd\xda\x7f\xb0\x9b\xbd\x23\xd1\x92\xd9\x41\xa0\x82\x96\x3f\x36\x35\xff\x7d\x4b\x42\xb2\xb1\x6c\xc5\x63\x27\x47\x1e\x8f\x07\xfd\x68\xba\x79\x7e\x02\x87\x44\x52\x97\x20\xb0\xe0\x8d\x22\x28\x8c\x26\x28\x78\x25\xd5\x01\x9e\x9e\xa3\x7a\x06\x99\x11\x87\x19\x10\xcf\x14\xc2\xf7\x08\x3a\x06\xf3\x8c\x14\x3e\xfc\x89\xff\xf2\x6d\x03\x7f\x71\xed\x3e\xcc\xe0\x1f\xb4\x82\x6b\x3e\x03\xc7\xb5\x63\x0e\xad\x2c\x5e\xa2\xb7\x28\x7a\x7e\x82\x8d\x14\x08\x2e\xb7\x46\x29\xc8\xb8\x75\xad\x7a\x9a\xb2\x1d\x66\xaf\x92\x98\x9f\xc8\xb8\xed\xb6\x10\xd2\xd5\x8a\x1f\x52\xd0\x46\x63\xbb\xbe\x3d\x43\x37\xc3\x2a\xc7\xcc\x16\x6d\xa1\xcc\x8e\x39\x3a\x28\xf4\xa4\x97\x08\xe0\xa8\xc1\x76\x52\xd0\x66\x98\xf0\xdb\x2b\xee\xe8\x5b\x2d\x38\x21\xe4\x8a\x3b\x07\x5d\x74\xf3\x13\x2c\x3a\xfd\x3e\x3c\x27\xff\xc3\xf4\x73\xfc\xe9\xa5\x83\x2a\x6e\x4b\xa9\x59\xa6\x4c\xfe\xca\x50\x8b\x14\x78\x43\xe6\xca\x9c\x23\x6e\x29\x9c\xad\x8d\x93\x24\x8d\x4e\x81\x67\xce\xa8\x86\xd0\xe3\x56\x96\x1b\x4a\x61\x59\xef\xfd\x38\x33\x44\xa6\x4a\x21\x69\x81\xb7\x28\x12\x72\xfb\xd1\x11\xa7\xc6\xb1\xd6\x93\x1f\x1e\x13\x7e\x5b\x7d\xea\x16\xcd\x85\xa1\x6b\xd4\x33\x37\x3d\xb3\x92\xb9\x35\xef\xe4\x8a\x7b\xc8\xae\xe2\x4a\xbd\x8f\xdb\xde\x4a\x85\xce\xf1\x72\xb8\x92\xee\x46\x06\x68\x1c\xe6\xfa\xd1\xdb\x88\xe7\x2b\xac\x02\x83\xce\x37\x98\x36\xe7\x26\x4f\xbc\x93\xd8\x06\x4a\x92\x54\x10\xe6\xdc\x8f\xbf\xff\x44\x7a\x1d\xe3\x09\xa5\x2e\x37\x1f\x67\x52\xc8\x3e\xcb\xba\x51\x52\x25\xf1\xe0\xb7\xc2\x22\x4c\xd5\x6b\x29\xdd\x07\x99\x99\x3d\xe4\x46\x19\xeb\x03\x45\x1f\x6a\x69\x11\xf5\xb0\x23\xcf\x5f\x4b\x6b\x1a\x2d\x58\x47\x4c\x3f\x2e\x97\x79\xbe\x5c\xfa\x70\x2c\x8a\x19\xcc\xb5\xe9\xdf\xe9\xd4\x92\x3c\x8f\xe3\x38\xf6\x4b\x78\x95\xa1\x9d\x64\x16\xc5\x97\x23\xb3\xb4\x78\x98\x24\xf2\xe4\x2b\x7e\xcd\xcf\x02\x69\x6d\x38\x8b\x63\xaf\xb8\xbd\x92\x97\x8b\x36\xb9\x5a\x68\x83\xdd\xa3\x5e\x25\xf1\x60\x95\x2f\x43\x01\x30\x54\xae\xb4\xad\x86\x02\x75\x7f\x8b\xd7\x85\x13\x9f\xb7\x81\xf4\x62\xf5\xf9\x4e\xe9\x87\x95\x03\x60\xe2\xd0\x15\x0a\xd9\x54\x57\xb4\x93\xc5\x58\x3d\x59\xac\xef\x54\xff\x19\xf1\x00\x98\x38\xba\x2f\x52\x63\xf1\x78\xfe\x65\x24\xbd\x5e\xdc\xa9\xfc\xa8\xf0\x69\x3c\x65\x76\x57\x69\x6e\x0b\x2f\xe3\xfb\x84\x1f\xd5\x5d\xde\x4a\x69\x43\x97\x7d\x2a\x9e\xaf\x47\xb2\x90\x8c\xd2\x2e\x00\x26\x1c\xee\x4a\xd9\x65\x62\x8c\x85\x6f\x1c\xf0\x58\xad\x82\xf7\xdd\x8e\xbd\xae\x2f\x0a\xb0\xdb\xc8\xa1\x5f\x17\xca\x70\x4a\xdb\x4a\x78\x5e\x96\x7d\x01\x3d\x9a\xdc\xc3\xbe\xbb\x2f\x2e\x2b\xa6\x45\xc5\x49\x6e\x7b\x51\xc2\x3d\x31\xae\x64\xa9\x53\xc8\x51\x13\x5a\x1f\x63\x26\x4b\x76\x3a\x8c\xd7\x0c\xaa\x7e\xd7\x37\xf9\xfe\xef\x3f\xbe\x9d\xb5\x4d\x8f\x4c\xb5\x81\xe7\x27\xc0\x7d\x2d\x2d\xfe\x5e\x10\xda\x70\x61\x08\xff\x60\xb5\xd4\x85\xe9\x3f\x81\xad\x59\xc1\x70\xca\xb3\x9a\x0b\x21\x75\xc9\x7c\xff\x58\xf5\x3f\x9b\x7e\xe5\xf0\x2d\x08\x3d\xf0\xf6\x9e\x38\x9b\x2b\x9c\xce\x5a\xaf\xbf\x45\x4b\x32\xe7\x6a\x98\x22\x53\x07\xab\x9b\xe1\x1d\x2a\xe9\xc8\xff\x14\x19\x1d\xea\xe0\xbb\x78\x3a\xa1\xd4\x4a\x6a\x3c\xfe\x17\x46\xb7\x49\xa6\xbe\x04\x87\xd6\x19\xf7\x61\xb5\x2d\xde\x18\x45\xb2\x0e\x9b\x7c\x8f\xdc\xd3\x6d\x7f\xfd\x5f\x73\x78\x59\xdd\x16\x6f\xd1\xff\x01\x00\x00\xff\xff\xc9\xae\x65\x30\xf4\x0b\x00\x00")

func bindataStandardCssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStandardCss,
		"/standard.css",
	)
}



func bindataStandardCss() (*asset, error) {
	bytes, err := bindataStandardCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/standard.css",
		size: 3060,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1746366787, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/scripts.js":   bindataScriptsJs,
	"/standard.css": bindataStandardCss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"scripts.js": {Func: bindataScriptsJs, Children: map[string]*bintree{}},
		"standard.css": {Func: bindataStandardCss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
