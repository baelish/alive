// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for BoxSize.
const (
	Dlarge  BoxSize = 8
	Dmedium BoxSize = 6
	Dmicro  BoxSize = 2
	Dot     BoxSize = 0
	Dsmall  BoxSize = 4
	Large   BoxSize = 7
	Medium  BoxSize = 5
	Micro   BoxSize = 1
	Small   BoxSize = 3
	Xlarge  BoxSize = 9
)

// Defines values for Status.
const (
	Amber    Status = 2
	Green    Status = 3
	Grey     Status = 0
	NoUpdate Status = 4
	Red      Status = 1
)

// Box defines model for Box.
type Box struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`

	// ExpireAfter Go-style duration string (e.g., "5s", "1h30m") Integers will be treated as seconds
	ExpireAfter *DurationString `json:"expireAfter,omitempty"`
	ID          *string         `json:"id,omitempty"`
	LastMessage *string         `json:"lastMessage,omitempty"`
	LastUpdate  *time.Time      `json:"lastUpdate,omitempty"`

	// MaxTBU Go-style duration string (e.g., "5s", "1h30m") Integers will be treated as seconds
	MaxTBU   *DurationString `json:"maxTBU,omitempty"`
	Messages *[]Message      `json:"messages,omitempty"`
	Name     *string         `json:"name,omitempty"`
	Parent   *string         `json:"parent,omitempty"`

	// Size Enum representing box size.
	Size *BoxSize `json:"size,omitempty"`

	// Status Enum representing status
	Status *Status `json:"status,omitempty"`
}

// BoxSize Enum representing box size.
type BoxSize int

// DurationString Go-style duration string (e.g., "5s", "1h30m") Integers will be treated as seconds
type DurationString = string

// Event defines model for Event.
type Event struct {
	After *string `json:"after,omitempty"`
	Box   *Box    `json:"box,omitempty"`

	// ExpireAfter Go-style duration string (e.g., "5s", "1h30m") Integers will be treated as seconds
	ExpireAfter *DurationString `json:"expireAfter,omitempty"`
	ID          *string         `json:"id,omitempty"`

	// MaxTBU Go-style duration string (e.g., "5s", "1h30m") Integers will be treated as seconds
	MaxTBU  *DurationString `json:"maxTBU,omitempty"`
	Message *string         `json:"message,omitempty"`

	// Status Enum representing status
	Status *Status `json:"status,omitempty"`
	Type   string  `json:"type"`
}

// Message defines model for Message.
type Message struct {
	Message   string    `json:"message"`
	Status    string    `json:"status"`
	TimeStamp time.Time `json:"timeStamp"`
}

// Status Enum representing status
type Status int

// PostApiV1BoxNewJSONRequestBody defines body for PostApiV1BoxNew for application/json ContentType.
type PostApiV1BoxNewJSONRequestBody = Box

// PostApiV1BoxUpdateJSONRequestBody defines body for PostApiV1BoxUpdate for application/json ContentType.
type PostApiV1BoxUpdateJSONRequestBody = Box

// PostApiV1BoxIdEventJSONRequestBody defines body for PostApiV1BoxIdEvent for application/json ContentType.
type PostApiV1BoxIdEventJSONRequestBody = Event

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List boxes
	// (GET /api/v1/box)
	GetApiV1Box(w http.ResponseWriter, r *http.Request)
	// Create new box
	// (POST /api/v1/box/new)
	PostApiV1BoxNew(w http.ResponseWriter, r *http.Request)
	// Update box
	// (POST /api/v1/box/update)
	PostApiV1BoxUpdate(w http.ResponseWriter, r *http.Request)
	// Delete box
	// (DELETE /api/v1/box/{id})
	DeleteApiV1BoxId(w http.ResponseWriter, r *http.Request, id string)
	// Get box by ID
	// (GET /api/v1/box/{id})
	GetApiV1BoxId(w http.ResponseWriter, r *http.Request, id string)
	// Send event to box
	// (POST /api/v1/box/{id}/event)
	PostApiV1BoxIdEvent(w http.ResponseWriter, r *http.Request, id string)
	// Health check
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List boxes
// (GET /api/v1/box)
func (_ Unimplemented) GetApiV1Box(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new box
// (POST /api/v1/box/new)
func (_ Unimplemented) PostApiV1BoxNew(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update box
// (POST /api/v1/box/update)
func (_ Unimplemented) PostApiV1BoxUpdate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete box
// (DELETE /api/v1/box/{id})
func (_ Unimplemented) DeleteApiV1BoxId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get box by ID
// (GET /api/v1/box/{id})
func (_ Unimplemented) GetApiV1BoxId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send event to box
// (POST /api/v1/box/{id}/event)
func (_ Unimplemented) PostApiV1BoxIdEvent(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1Box operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Box(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Box(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1BoxNew operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1BoxNew(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1BoxNew(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1BoxUpdate operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1BoxUpdate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1BoxUpdate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiV1BoxId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1BoxId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1BoxId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1BoxId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1BoxId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1BoxId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1BoxIdEvent operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1BoxIdEvent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1BoxIdEvent(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/box", wrapper.GetApiV1Box)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/box/new", wrapper.PostApiV1BoxNew)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/box/update", wrapper.PostApiV1BoxUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/box/{id}", wrapper.DeleteApiV1BoxId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/box/{id}", wrapper.GetApiV1BoxId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/box/{id}/event", wrapper.PostApiV1BoxIdEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})

	return r
}
