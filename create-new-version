#!/usr/bin/env bash
#
# create-new-version
#
# This will create a new alive release, tag the current master create a new
# image with the new tag and push if desired.
#
# Prerequisites:
#
#   - Must be in the master branch
#   - Have no outstanding changes
#   - Main tag supplied must not already exist
#   - Docker daemon must be running
#
# Usage:
#
#   ./create-new-version --tag <version>
#
# Examples:
#
#   # Create a new git tag v0.5.1, build a new docker image, tag it with v0.5.1
#   # and latest and push the images.
#   ./create-new-version -t v0.5.1 -g -a latest --push
#
#



set -euo pipefail
IFS=$'\n\t'

log() {
  local level="${1^^}"
  shift

  if [[ "${level}" == "DEBUG" && -z "${DEBUG:-}" ]]; then

    return 0
  fi

  echo "$level " "$@" >&2
}

processOptions() {
  dryRun=()
  additionalTags=()
  while [[ $# -gt 0 ]]; do
    case $1 in
      --additional-tag|-a)
        additionalTags+=("$2")
        shift 2
      ;;
      --additional-tag=*)
        additionalTags+=("${1#--additional-tag=}")
        shift
      ;;

      --debug|-d)
        DEBUG="true"
        shift
      ;;

      --dry-run)
        dryRun=( "echo" "would run:" )
        shift
      ;;

      --git-tag|-g)
        newGitTag="true"
        shift
      ;;

      --push|-p)
        pushImages="true"
        shift
      ;;

      --tag|-t)
        mainTag="${2}"
        shift 2
      ;;

      --tag=*)
        mainTag="${1#--tag=}"
        shift
      ;;

      --test)
        testing="true"
        shift
      ;;

      -*)
        log "WARN" "Unknown option $1"
        unknownOptions="true"
        shift
      ;;

      *)
        log "WARN" "This script takes no arguments $1"
        unknownOptions="true"
        shift
      ;;

    esac
  done

  if [[ -n "${unknownOptions:-}" ]]; then

    return 1
  fi

  if [[ -z "${mainTag:-}" ]]; then
    log "ERROR" "Missing --tag|-t"

    return 1
  fi

  log "DEBUG" "mainTag=$mainTag"
  log "DEBUG" "additionalTags=( ${additionalTags[*]} )"
  log "DEBUG" "newGitTag=${newGitTag:-}"
}


main() {
  # Check that the docker daemon is running
  if ! docker system info &> /dev/null; then
    log "ERROR" "Looks like the docker daemon isn't running and it is needed."

    return 1
  fi

  # Check that we're on master and no changes are outstanding
  currentBranch="$(git rev-parse --abbrev-ref HEAD)"
  if [[ "${testing:-}" != "true" && "$currentBranch" != "master" ]]; then
    log "ERROR" "Not on master branch ($currentBranch), aborting."

    return 1
  fi

  if [[ "${testing:-}" != "true" ]] && ! git diff-index --quiet HEAD --; then
    log "ERROR" "Uncommitted files are present, aborting."

    return 1
  fi

  mapfile -t untracked < <(git ls-files --exclude-standard --others)
  if [[ "${testing:-}" != "true" && ${#untracked[@]} -gt 0 ]]; then
    log "ERROR" "Untracked files are present, aborting."

    return 1
  fi

  if [[ "${newGitTag:-}" == "true" ]]; then
    # Check that this is a new tag
    mapfile -t currentTags < <(git tag)
    for tag in "${currentTags[@]}"; do
      if [[ "$mainTag" == "$tag" ]]; then
        log "ERROR" "This version already exists! $mainTag, aborting."

        return 1
      fi
    done

    # Create tag
    if [[ "${testing:-}" != "true" ]]; then
      "${dryRun[@]}" git tag "$mainTag"
      "${dryRun[@]}" git push --tags
    fi
  fi

  # Build and tag image
  "${dryRun[@]}" docker build . \
    --pull \
    --build-arg BUILD_COMMIT="$(git rev-parse --verify HEAD)" \
    --build-arg BUILD_IMAGE="baelish/alive" \
    --build-arg BUILD_VERSION="$mainTag" \
    --build-arg BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
    -t "baelish/alive:$mainTag"

  if [[ ${testing:-} != "true" ]]; then
    if [[ "${pushImages:-}" == "true" ]]; then
      "${dryRun[@]}" docker push "baelish/alive:$mainTag"
    fi

    for aTag in "${additionalTags[@]}"; do
      "${dryRun[@]}" docker tag "baelish/alive:$mainTag" "baelish/alive:$aTag"

      if [[ "${pushImages:-}" == "true" ]]; then
        "${dryRun[@]}" docker push "baelish/alive:$aTag"
      fi
    done
  fi
}


processOptions "$@"
main
